
Application_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005504  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e0  080056e0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080056e0  080056e0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e0  080056e0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080056e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000213c  20000008  080056f0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002144  080056f0  00022144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073ab  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a86  00000000  00000000  000273e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  00028e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  00029768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002513  00000000  00000000  00029f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007781  00000000  00000000  0002c45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00013a28  00000000  00000000  00033bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00047604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002328  00000000  00000000  00047654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800568c 	.word	0x0800568c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	0800568c 	.word	0x0800568c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	0000      	movs	r0, r0
	...

08000a20 <HFSR_u32MeasureForce>:
	MADC_VoidInit();
	MADC_VoidEnable();
}

u32 HFSR_u32MeasureForce(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	f32 ADC_u32Read=0;
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
	MADC_VoidStartChannelConversion(ADC_CHANNEL1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 f9e7 	bl	8000e00 <MADC_VoidStartChannelConversion>
	ADC_u32Read=MADC_u16ReadSynch();
 8000a32:	f000 f9c7 	bl	8000dc4 <MADC_u16ReadSynch>
 8000a36:	ee07 0a90 	vmov	s15, r0
 8000a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a3e:	edc7 7a01 	vstr	s15, [r7, #4]
	f32 AnalogValue=(f32)((ADC_u32Read*3.3)/256UL);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fd30 	bl	80004a8 <__aeabi_f2d>
 8000a48:	a317      	add	r3, pc, #92	; (adr r3, 8000aa8 <HFSR_u32MeasureForce+0x88>)
 8000a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a4e:	f7ff fd83 	bl	8000558 <__aeabi_dmul>
 8000a52:	4602      	mov	r2, r0
 8000a54:	460b      	mov	r3, r1
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HFSR_u32MeasureForce+0x80>)
 8000a60:	f7ff fea4 	bl	80007ac <__aeabi_ddiv>
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	4610      	mov	r0, r2
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f7ff ff86 	bl	800097c <__aeabi_d2f>
 8000a70:	4603      	mov	r3, r0
 8000a72:	603b      	str	r3, [r7, #0]

//	return	(	(AnalogValue * FIXED_RESISTANCE)	/	(INPUT_VOLTAGE - AnalogValue)	);
	return((FIXED_RESISTANCE*(INPUT_VOLTAGE-AnalogValue))/AnalogValue);
 8000a74:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000a78:	edd7 7a00 	vldr	s15, [r7]
 8000a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a80:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000aa4 <HFSR_u32MeasureForce+0x84>
 8000a84:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000a88:	ed97 7a00 	vldr	s14, [r7]
 8000a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	ee17 3a90 	vmov	r3, s15
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40700000 	.word	0x40700000
 8000aa4:	47c35000 	.word	0x47c35000
 8000aa8:	66666666 	.word	0x66666666
 8000aac:	400a6666 	.word	0x400a6666

08000ab0 <HLDR_u32MeasureLightIntensity>:
	MADC_VoidInit();
	MADC_VoidEnable();
}

u32 HLDR_u32MeasureLightIntensity(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	f32 ADC_u32Read=0;
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
	f32 AnalogValue=0;
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
//	MADC_VoidStartConversion();
	MADC_VoidStartChannelConversion(ADC_CHANNEL0);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f99c 	bl	8000e00 <MADC_VoidStartChannelConversion>
	ADC_u32Read=(f32)MADC_u16ReadSynch();
 8000ac8:	f000 f97c 	bl	8000dc4 <MADC_u16ReadSynch>
 8000acc:	ee07 0a90 	vmov	s15, r0
 8000ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad4:	edc7 7a01 	vstr	s15, [r7, #4]
	AnalogValue=(f32)((ADC_u32Read*3.3)/256UL);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff fce5 	bl	80004a8 <__aeabi_f2d>
 8000ade:	a318      	add	r3, pc, #96	; (adr r3, 8000b40 <HLDR_u32MeasureLightIntensity+0x90>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f7ff fd38 	bl	8000558 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HLDR_u32MeasureLightIntensity+0x88>)
 8000af6:	f7ff fe59 	bl	80007ac <__aeabi_ddiv>
 8000afa:	4602      	mov	r2, r0
 8000afc:	460b      	mov	r3, r1
 8000afe:	4610      	mov	r0, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	f7ff ff3b 	bl	800097c <__aeabi_d2f>
 8000b06:	4603      	mov	r3, r0
 8000b08:	603b      	str	r3, [r7, #0]
//	return	(	(AnalogValue * FIXED_RESISTANCE)	/	(INPUT_VOLTAGE - AnalogValue)	);


	return((FIXED_RESISTANCE*(INPUT_VOLTAGE-AnalogValue))/AnalogValue);
 8000b0a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000b0e:	edd7 7a00 	vldr	s15, [r7]
 8000b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b16:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000b3c <HLDR_u32MeasureLightIntensity+0x8c>
 8000b1a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000b1e:	ed97 7a00 	vldr	s14, [r7]
 8000b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2a:	ee17 3a90 	vmov	r3, s15
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40700000 	.word	0x40700000
 8000b3c:	461c4000 	.word	0x461c4000
 8000b40:	66666666 	.word	0x66666666
 8000b44:	400a6666 	.word	0x400a6666

08000b48 <HMotor_VoidCarInit>:




void HMotor_VoidCarInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af02      	add	r7, sp, #8
	/* define Motor driver pins as GPIO_OUTPUT */
	MGPIO_voidSetPinMode(MOTORDRIVER_PORT,MOTORDRIVER_IN1,GPIO_OUTPUT);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2106      	movs	r1, #6
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 f9a0 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MOTORDRIVER_PORT,MOTORDRIVER_IN2,GPIO_OUTPUT);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f000 f99b 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MOTORDRIVER_PORT,MOTORDRIVER_IN3,GPIO_OUTPUT);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2102      	movs	r1, #2
 8000b66:	2001      	movs	r0, #1
 8000b68:	f000 f996 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MOTORDRIVER_PORT,MOTORDRIVER_IN4,GPIO_OUTPUT);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2105      	movs	r1, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 f991 	bl	8000e98 <MGPIO_voidSetPinMode>

	/* Define Pins GPIO_OUTPUT mode */
	MGPIO_voidSetPinOutputMode(MOTORDRIVER_PORT,MOTORDRIVER_IN1,GPIO_PUSH_PULL,GPIO_LOW_SPEED);
 8000b76:	2300      	movs	r3, #0
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2106      	movs	r1, #6
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 fa0d 	bl	8000f9c <MGPIO_voidSetPinOutputMode>
	MGPIO_voidSetPinOutputMode(MOTORDRIVER_PORT,MOTORDRIVER_IN2,GPIO_PUSH_PULL,GPIO_LOW_SPEED);
 8000b82:	2300      	movs	r3, #0
 8000b84:	2200      	movs	r2, #0
 8000b86:	2101      	movs	r1, #1
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 fa07 	bl	8000f9c <MGPIO_voidSetPinOutputMode>
	MGPIO_voidSetPinOutputMode(MOTORDRIVER_PORT,MOTORDRIVER_IN3,GPIO_PUSH_PULL,GPIO_LOW_SPEED);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2200      	movs	r2, #0
 8000b92:	2102      	movs	r1, #2
 8000b94:	2001      	movs	r0, #1
 8000b96:	f000 fa01 	bl	8000f9c <MGPIO_voidSetPinOutputMode>
	MGPIO_voidSetPinOutputMode(MOTORDRIVER_PORT,MOTORDRIVER_IN4,GPIO_PUSH_PULL,GPIO_LOW_SPEED);
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 f9fb 	bl	8000f9c <MGPIO_voidSetPinOutputMode>

	MTIMER_voidSetPWMOption(TIMER_PWM, CHANNEL1, PRELOAD_VALUE, NO_DUTYCYCLE, 15);
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2300      	movs	r3, #0
 8000bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f002 f8f4 	bl	8002da0 <MTIMER_voidSetPWMOption>
	MTIMER_voidSetPWMOption(TIMER_PWM, CHANNEL2, PRELOAD_VALUE, NO_DUTYCYCLE, 15);
 8000bb8:	230f      	movs	r3, #15
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f002 f8eb 	bl	8002da0 <MTIMER_voidSetPWMOption>
//	MTimer_voidPWMConfig(TIMER_PWM1,PRELOAD_VALUE,NO_DUTYCYCLE);
//	MTimer_voidPWMConfig(TIMER_PWM2,PRELOAD_VALUE,NO_DUTYCYCLE);


}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HMotor_VoidCarForword>:
void HMotor_VoidCarForword(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinValue(MOTORDRIVER_PORT,MOTORDRIVER_IN1,GPIO_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2106      	movs	r1, #6
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f000 faab 	bl	8001134 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTORDRIVER_PORT,MOTORDRIVER_IN2,GPIO_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2101      	movs	r1, #1
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 faa6 	bl	8001134 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTORDRIVER_PORT,MOTORDRIVER_IN3,GPIO_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2102      	movs	r1, #2
 8000bec:	2001      	movs	r0, #1
 8000bee:	f000 faa1 	bl	8001134 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MOTORDRIVER_PORT,MOTORDRIVER_IN4,GPIO_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 fa9c 	bl	8001134 <MGPIO_voidSetPinValue>

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HMotor_VoidCarSpeed>:
	MGPIO_voidSetPinValue(MOTORDRIVER_PORT,MOTORDRIVER_IN4,GPIO_RESET);
}


void HMotor_VoidCarSpeed(u16 Copy_u16DutyCycle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
//	MTIMER_VoidUpdateDuty(TIMER_PWM1,Copy_u16DutyCycle);
//	MTIMER_VoidUpdateDuty(TIMER_PWM2,Copy_u16DutyCycle);
	MTIMER_voidSetCCRValue(TIMER_PWM, CHANNEL1, Copy_u16DutyCycle);
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 fd71 	bl	80026f8 <MTIMER_voidSetCCRValue>
	MTIMER_voidSetCCRValue(TIMER_PWM, CHANNEL2, Copy_u16DutyCycle);
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f001 fd6b 	bl	80026f8 <MTIMER_voidSetCCRValue>

}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <MADC_VoidInit>:


pf MADC_CallBack_Global = NULL;

void MADC_VoidInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0

	u8 Iterator1_u8Local = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]
	u8 SampleTime_u8arr[6] = {MADC_CH0_SAMPLE_TIME,MADC_CH1_SAMPLE_TIME,MADC_CH2_SAMPLE_TIME,MADC_CH3_SAMPLE_TIME,MADC_CH4_SAMPLE_TIME,MADC_CH5_SAMPLE_TIME};
 8000c36:	4a57      	ldr	r2, [pc, #348]	; (8000d94 <MADC_VoidInit+0x168>)
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c40:	6018      	str	r0, [r3, #0]
 8000c42:	3304      	adds	r3, #4
 8000c44:	8019      	strh	r1, [r3, #0]
	u8 RegularSequence_u8arr[6] = {ADC_REGULAR_SEQ_1,ADC_REGULAR_SEQ_2,ADC_REGULAR_SEQ_3,ADC_REGULAR_SEQ_4,ADC_REGULAR_SEQ_5,ADC_REGULAR_SEQ_6};
 8000c46:	4a54      	ldr	r2, [pc, #336]	; (8000d98 <MADC_VoidInit+0x16c>)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c4e:	6018      	str	r0, [r3, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	8019      	strh	r1, [r3, #0]

	/*Set the resolution for sampling*/
	MADC->CR1 &= ( ~(RESOLUTION_MASK << RESOLUTION_BITS) );
 8000c54:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	4a50      	ldr	r2, [pc, #320]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c5a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c5e:	6053      	str	r3, [r2, #4]
	MADC ->CR1 |= (MADC_RESOLUTION << RESOLUTION_BITS);
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	4a4d      	ldr	r2, [pc, #308]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6a:	6053      	str	r3, [r2, #4]

	/*Set the adc mode*/
	#if MADC_MODE == ADC_SGL_CHANNEL_SGL_CONVERSION
	CLR_BIT(MADC->CR1,CR1_SCAN);
 8000c6c:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a4a      	ldr	r2, [pc, #296]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c76:	6053      	str	r3, [r2, #4]
	CLR_BIT(MADC->CR2,CR2_CONT);
 8000c78:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4a47      	ldr	r2, [pc, #284]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c7e:	f023 0302 	bic.w	r3, r3, #2
 8000c82:	6093      	str	r3, [r2, #8]

	#endif

	/*Set the data alignment*/
	#if MDAC_DATA_ALIGNMENT == ADC_RIGHT_ALIGNMENT
	CLR_BIT(MADC->CR2,CR2_ALIGN);
 8000c84:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	4a44      	ldr	r2, [pc, #272]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c8e:	6093      	str	r3, [r2, #8]
	#else
	SET_BIT(MADC->CR2,CR2_ALIGN);
	#endif

	#if MADC_EOCS_MODE == AFTER_ALL_CONVERSIONS
	CLR_BIT(MADC->CR2,CR2_EOCS);
 8000c90:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	4a41      	ldr	r2, [pc, #260]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c9a:	6093      	str	r3, [r2, #8]
	#endif

	#if MADC_DMA_MODE == ENABLE
	SET_BIT(MADC->CR2,CR2_DMA);
	#else
	CLR_BIT(MADC->CR2,CR2_DMA);
 8000c9c:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <MADC_VoidInit+0x170>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <MADC_VoidInit+0x170>)
 8000ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ca6:	6093      	str	r3, [r2, #8]
	#endif

	#if MADC_DMA_SELECTION == ADC_DMA_FREE_RUNNING_COPY
	SET_BIT(MADC->CR2,CR2_DDS);
	#else
	CLR_BIT(MADC->CR2,CR2_DDS);
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <MADC_VoidInit+0x170>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	4a3b      	ldr	r2, [pc, #236]	; (8000d9c <MADC_VoidInit+0x170>)
 8000cae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cb2:	6093      	str	r3, [r2, #8]
	#endif

	/*Set the length of channels*/
	MADC->SQR1 &= (~(LENGTH_MASK << LENGTH_BITS));
 8000cb4:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <MADC_VoidInit+0x170>)
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	4a38      	ldr	r2, [pc, #224]	; (8000d9c <MADC_VoidInit+0x170>)
 8000cba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
	MADC->SQR1 |= ((MADC_REGULAR_CHANNELS_SEQUENCE_LENGTH-1) << LENGTH_BITS);
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <MADC_VoidInit+0x170>)
 8000cc2:	4a36      	ldr	r2, [pc, #216]	; (8000d9c <MADC_VoidInit+0x170>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

	/*Set the sampling time for the channels*/
	for(Iterator1_u8Local = 0; Iterator1_u8Local < MADC_REGULAR_CHANNELS_SEQUENCE_LENGTH; Iterator1_u8Local++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e020      	b.n	8000d10 <MADC_VoidInit+0xe4>
	{
		MADC->SMPPR2 &= (~	(SAMPLE_MASK << (Iterator1_u8Local	* SAMPLE_BITS) )    );
 8000cce:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <MADC_VoidInit+0x170>)
 8000cd0:	6919      	ldr	r1, [r3, #16]
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	2207      	movs	r2, #7
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <MADC_VoidInit+0x170>)
 8000ce4:	400b      	ands	r3, r1
 8000ce6:	6113      	str	r3, [r2, #16]
		MADC->SMPPR2 |= (SampleTime_u8arr[Iterator1_u8Local] << (Iterator1_u8Local * SAMPLE_BITS) );
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <MADC_VoidInit+0x170>)
 8000cea:	6919      	ldr	r1, [r3, #16]
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	3310      	adds	r3, #16
 8000cf0:	443b      	add	r3, r7
 8000cf2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	fa00 f303 	lsl.w	r3, r0, r3
 8000d04:	4a25      	ldr	r2, [pc, #148]	; (8000d9c <MADC_VoidInit+0x170>)
 8000d06:	430b      	orrs	r3, r1
 8000d08:	6113      	str	r3, [r2, #16]
	for(Iterator1_u8Local = 0; Iterator1_u8Local < MADC_REGULAR_CHANNELS_SEQUENCE_LENGTH; Iterator1_u8Local++)
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0db      	beq.n	8000cce <MADC_VoidInit+0xa2>
	}

	/*Set the regular Sequence Channels*/
	for(Iterator1_u8Local = 0; Iterator1_u8Local < MADC_REGULAR_CHANNELS_SEQUENCE_LENGTH; Iterator1_u8Local++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e020      	b.n	8000d5e <MADC_VoidInit+0x132>
	{
		MADC->SQR3 &= (~	(SEQUENCE_MASK << (SEQUENCE_BITS * Iterator1_u8Local)	)	);
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MADC_VoidInit+0x170>)
 8000d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	221f      	movs	r2, #31
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <MADC_VoidInit+0x170>)
 8000d32:	400b      	ands	r3, r1
 8000d34:	6353      	str	r3, [r2, #52]	; 0x34
		MADC->SQR3 |= (RegularSequence_u8arr[Iterator1_u8Local]	<< (SEQUENCE_BITS * Iterator1_u8Local)	);
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MADC_VoidInit+0x170>)
 8000d38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	443b      	add	r3, r7
 8000d40:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000d44:	4618      	mov	r0, r3
 8000d46:	7bfa      	ldrb	r2, [r7, #15]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	fa00 f303 	lsl.w	r3, r0, r3
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <MADC_VoidInit+0x170>)
 8000d54:	430b      	orrs	r3, r1
 8000d56:	6353      	str	r3, [r2, #52]	; 0x34
	for(Iterator1_u8Local = 0; Iterator1_u8Local < MADC_REGULAR_CHANNELS_SEQUENCE_LENGTH; Iterator1_u8Local++)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0db      	beq.n	8000d1c <MADC_VoidInit+0xf0>

	/*Select the interrupt enable or disable*/
	#if MADC_EOC_INTERRUPT == ENABLE
	SET_BIT(MADC->CR1,CR1_EOCIE);
	#else
	CLR_BIT(MADC->CR1,CR1_EOCIE);
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <MADC_VoidInit+0x170>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <MADC_VoidInit+0x170>)
 8000d6a:	f023 0320 	bic.w	r3, r3, #32
 8000d6e:	6053      	str	r3, [r2, #4]
	#endif

	/*Set the prescaler*/
	MADC_COMMON_REG->CCR &= (~(PRESCALER_MASK <<PRESCALER_BITS));
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MADC_VoidInit+0x174>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <MADC_VoidInit+0x174>)
 8000d76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000d7a:	6053      	str	r3, [r2, #4]
	MADC_COMMON_REG ->CCR |= (MADC_PRESCALER << PRESCALER_BITS);
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MADC_VoidInit+0x174>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <MADC_VoidInit+0x174>)
 8000d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d86:	6053      	str	r3, [r2, #4]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	080056a4 	.word	0x080056a4
 8000d98:	080056ac 	.word	0x080056ac
 8000d9c:	40012000 	.word	0x40012000
 8000da0:	40012300 	.word	0x40012300

08000da4 <MADC_VoidEnable>:


void MADC_VoidEnable(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
	SET_BIT(MADC->CR2,CR2_ADON);
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <MADC_VoidEnable+0x1c>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <MADC_VoidEnable+0x1c>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6093      	str	r3, [r2, #8]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40012000 	.word	0x40012000

08000dc4 <MADC_u16ReadSynch>:
	CLR_BIT(MADC->CR2,CR2_SWSTART);
}


u32 MADC_u16ReadSynch(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
	while(GET_BIT(MADC->SR,SR_EOC) == 0);
 8000dc8:	bf00      	nop
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <MADC_u16ReadSynch+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	085b      	lsrs	r3, r3, #1
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0f8      	beq.n	8000dca <MADC_u16ReadSynch+0x6>
	return (MADC->DR);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <MADC_u16ReadSynch+0x24>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40012000 	.word	0x40012000

08000dec <ADC_IRQHandler>:
	MADC_CallBack_Global = ADC_CallBack;
}


void ADC_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	MADC_CallBack_Global();
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <ADC_IRQHandler+0x10>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4798      	blx	r3
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000024 	.word	0x20000024

08000e00 <MADC_VoidStartChannelConversion>:

void MADC_VoidStartChannelConversion(u8 A_u8Channel)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	MADC->SQR3 &= (~	(SEQUENCE_MASK << (0)	)	);
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MADC_VoidStartChannelConversion+0x3c>)
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <MADC_VoidStartChannelConversion+0x3c>)
 8000e10:	f023 031f 	bic.w	r3, r3, #31
 8000e14:	6353      	str	r3, [r2, #52]	; 0x34
	MADC->SQR3 |= (A_u8Channel	<< (0)	);
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MADC_VoidStartChannelConversion+0x3c>)
 8000e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <MADC_VoidStartChannelConversion+0x3c>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	634b      	str	r3, [r1, #52]	; 0x34
	SET_BIT(MADC->CR2,CR2_SWSTART);
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MADC_VoidStartChannelConversion+0x3c>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <MADC_VoidStartChannelConversion+0x3c>)
 8000e28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e2c:	6093      	str	r3, [r2, #8]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40012000 	.word	0x40012000

08000e40 <EXTI0_IRQHandler>:
	}
}


void EXTI0_IRQHandler (void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR , MEXTI_LINE0);
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <EXTI0_IRQHandler+0x24>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <EXTI0_IRQHandler+0x24>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6153      	str	r3, [r2, #20]
	if (MEXTI_CallBack[MEXTI_LINE0] != NULL)
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <EXTI0_IRQHandler+0x28>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <EXTI0_IRQHandler+0x1e>
	{
		MEXTI_CallBack[MEXTI_LINE0]();
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <EXTI0_IRQHandler+0x28>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4798      	blx	r3
	}
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40013c00 	.word	0x40013c00
 8000e68:	20000028 	.word	0x20000028

08000e6c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR , MEXTI_LINE1);
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <EXTI1_IRQHandler+0x24>)
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <EXTI1_IRQHandler+0x24>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6153      	str	r3, [r2, #20]
	if (MEXTI_CallBack[MEXTI_LINE1] != NULL)
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <EXTI1_IRQHandler+0x28>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <EXTI1_IRQHandler+0x1e>
	{
		MEXTI_CallBack[MEXTI_LINE1]();
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <EXTI1_IRQHandler+0x28>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	4798      	blx	r3
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40013c00 	.word	0x40013c00
 8000e94:	20000028 	.word	0x20000028

08000e98 <MGPIO_voidSetPinMode>:
#include "../include/MCAL/GPIO/MGPIO_Private.h"
#include "../include/MCAL/GPIO/MGPIO_Config.h"


void MGPIO_voidSetPinMode (u8 A_u8Port , u8 A_u8Pin , u8 A_u8Mode)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	71bb      	strb	r3, [r7, #6]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	717b      	strb	r3, [r7, #5]
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d108      	bne.n	8000ec2 <MGPIO_voidSetPinMode+0x2a>
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b0d      	cmp	r3, #13
 8000eb4:	d060      	beq.n	8000f78 <MGPIO_voidSetPinMode+0xe0>
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	2b0e      	cmp	r3, #14
 8000eba:	d05d      	beq.n	8000f78 <MGPIO_voidSetPinMode+0xe0>
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	d05a      	beq.n	8000f78 <MGPIO_voidSetPinMode+0xe0>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d105      	bne.n	8000ed4 <MGPIO_voidSetPinMode+0x3c>
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d056      	beq.n	8000f7c <MGPIO_voidSetPinMode+0xe4>
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d053      	beq.n	8000f7c <MGPIO_voidSetPinMode+0xe4>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else
	{
		switch (A_u8Port)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d036      	beq.n	8000f48 <MGPIO_voidSetPinMode+0xb0>
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	dc50      	bgt.n	8000f80 <MGPIO_voidSetPinMode+0xe8>
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <MGPIO_voidSetPinMode+0x50>
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d018      	beq.n	8000f18 <MGPIO_voidSetPinMode+0x80>
		case GPIO_PORTC:
			GPIOC->MODER &= ~(TWO_BIT_MASK<<(A_u8Pin*2));
			GPIOC->MODER |= (A_u8Mode<<(A_u8Pin*2));
			break;
		default :
			break;
 8000ee6:	e04b      	b.n	8000f80 <MGPIO_voidSetPinMode+0xe8>
			GPIOA->MODER &= ~(TWO_BIT_MASK<<(A_u8Pin*2));
 8000ee8:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <MGPIO_voidSetPinMode+0xf8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	79ba      	ldrb	r2, [r7, #6]
 8000eee:	0052      	lsls	r2, r2, #1
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef6:	43d2      	mvns	r2, r2
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <MGPIO_voidSetPinMode+0xf8>)
 8000efc:	400b      	ands	r3, r1
 8000efe:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |= (A_u8Mode<<(A_u8Pin*2));
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <MGPIO_voidSetPinMode+0xf8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	7979      	ldrb	r1, [r7, #5]
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	0052      	lsls	r2, r2, #1
 8000f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <MGPIO_voidSetPinMode+0xf8>)
 8000f12:	430b      	orrs	r3, r1
 8000f14:	6013      	str	r3, [r2, #0]
			break;
 8000f16:	e034      	b.n	8000f82 <MGPIO_voidSetPinMode+0xea>
			GPIOB->MODER &= ~(TWO_BIT_MASK<<(A_u8Pin*2));
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MGPIO_voidSetPinMode+0xfc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	0052      	lsls	r2, r2, #1
 8000f20:	2103      	movs	r1, #3
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	43d2      	mvns	r2, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4a1a      	ldr	r2, [pc, #104]	; (8000f94 <MGPIO_voidSetPinMode+0xfc>)
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	6013      	str	r3, [r2, #0]
			GPIOB->MODER |= (A_u8Mode<<(A_u8Pin*2));
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MGPIO_voidSetPinMode+0xfc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	7979      	ldrb	r1, [r7, #5]
 8000f36:	79ba      	ldrb	r2, [r7, #6]
 8000f38:	0052      	lsls	r2, r2, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <MGPIO_voidSetPinMode+0xfc>)
 8000f42:	430b      	orrs	r3, r1
 8000f44:	6013      	str	r3, [r2, #0]
			break;
 8000f46:	e01c      	b.n	8000f82 <MGPIO_voidSetPinMode+0xea>
			GPIOC->MODER &= ~(TWO_BIT_MASK<<(A_u8Pin*2));
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MGPIO_voidSetPinMode+0x100>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	0052      	lsls	r2, r2, #1
 8000f50:	2103      	movs	r1, #3
 8000f52:	fa01 f202 	lsl.w	r2, r1, r2
 8000f56:	43d2      	mvns	r2, r2
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <MGPIO_voidSetPinMode+0x100>)
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (A_u8Mode<<(A_u8Pin*2));
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <MGPIO_voidSetPinMode+0x100>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	7979      	ldrb	r1, [r7, #5]
 8000f66:	79ba      	ldrb	r2, [r7, #6]
 8000f68:	0052      	lsls	r2, r2, #1
 8000f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <MGPIO_voidSetPinMode+0x100>)
 8000f72:	430b      	orrs	r3, r1
 8000f74:	6013      	str	r3, [r2, #0]
			break;
 8000f76:	e004      	b.n	8000f82 <MGPIO_voidSetPinMode+0xea>
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 8000f78:	bf00      	nop
 8000f7a:	e002      	b.n	8000f82 <MGPIO_voidSetPinMode+0xea>
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 8000f7c:	bf00      	nop
 8000f7e:	e000      	b.n	8000f82 <MGPIO_voidSetPinMode+0xea>
			break;
 8000f80:	bf00      	nop
		}
	}
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40020800 	.word	0x40020800

08000f9c <MGPIO_voidSetPinOutputMode>:
void MGPIO_voidSetPinOutputMode (u8 A_u8Port , u8 A_u8Pin , u8 A_u8OutputMode , u8 A_u8Speed)
{
 8000f9c:	b490      	push	{r4, r7}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4623      	mov	r3, r4
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71bb      	strb	r3, [r7, #6]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	717b      	strb	r3, [r7, #5]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	713b      	strb	r3, [r7, #4]
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10b      	bne.n	8000fd8 <MGPIO_voidSetPinOutputMode+0x3c>
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	2b0d      	cmp	r3, #13
 8000fc4:	f000 80a5 	beq.w	8001112 <MGPIO_voidSetPinOutputMode+0x176>
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	2b0e      	cmp	r3, #14
 8000fcc:	f000 80a1 	beq.w	8001112 <MGPIO_voidSetPinOutputMode+0x176>
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f000 809d 	beq.w	8001112 <MGPIO_voidSetPinOutputMode+0x176>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d107      	bne.n	8000fee <MGPIO_voidSetPinOutputMode+0x52>
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	f000 8098 	beq.w	8001116 <MGPIO_voidSetPinOutputMode+0x17a>
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	f000 8094 	beq.w	8001116 <MGPIO_voidSetPinOutputMode+0x17a>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else
	{
		switch (A_u8Port)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d061      	beq.n	80010b8 <MGPIO_voidSetPinOutputMode+0x11c>
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	f300 8090 	bgt.w	800111a <MGPIO_voidSetPinOutputMode+0x17e>
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <MGPIO_voidSetPinOutputMode+0x68>
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d02d      	beq.n	800105e <MGPIO_voidSetPinOutputMode+0xc2>
			GPIOC->OSPEEDR |= (A_u8Speed<<(A_u8Pin*2));
			GPIOC->OTYPER &= ~(ONE_BIT_MASK<<A_u8Pin);
			GPIOC->OTYPER |= (A_u8OutputMode<<A_u8Pin);
			break;
		default :
			break;
 8001002:	e08a      	b.n	800111a <MGPIO_voidSetPinOutputMode+0x17e>
			GPIOA->OSPEEDR &= ~(TWO_BIT_MASK<<(A_u8Pin*2));
 8001004:	4b48      	ldr	r3, [pc, #288]	; (8001128 <MGPIO_voidSetPinOutputMode+0x18c>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	79ba      	ldrb	r2, [r7, #6]
 800100a:	0052      	lsls	r2, r2, #1
 800100c:	2103      	movs	r1, #3
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	43d2      	mvns	r2, r2
 8001014:	4611      	mov	r1, r2
 8001016:	4a44      	ldr	r2, [pc, #272]	; (8001128 <MGPIO_voidSetPinOutputMode+0x18c>)
 8001018:	400b      	ands	r3, r1
 800101a:	6093      	str	r3, [r2, #8]
			GPIOA->OSPEEDR |= (A_u8Speed<<(A_u8Pin*2));
 800101c:	4b42      	ldr	r3, [pc, #264]	; (8001128 <MGPIO_voidSetPinOutputMode+0x18c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	7939      	ldrb	r1, [r7, #4]
 8001022:	79ba      	ldrb	r2, [r7, #6]
 8001024:	0052      	lsls	r2, r2, #1
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	4611      	mov	r1, r2
 800102c:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <MGPIO_voidSetPinOutputMode+0x18c>)
 800102e:	430b      	orrs	r3, r1
 8001030:	6093      	str	r3, [r2, #8]
			GPIOA->OTYPER &= ~(ONE_BIT_MASK<<A_u8Pin);
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <MGPIO_voidSetPinOutputMode+0x18c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	79ba      	ldrb	r2, [r7, #6]
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	43d2      	mvns	r2, r2
 8001040:	4611      	mov	r1, r2
 8001042:	4a39      	ldr	r2, [pc, #228]	; (8001128 <MGPIO_voidSetPinOutputMode+0x18c>)
 8001044:	400b      	ands	r3, r1
 8001046:	6053      	str	r3, [r2, #4]
			GPIOA->OTYPER |= (A_u8OutputMode<<A_u8Pin);
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <MGPIO_voidSetPinOutputMode+0x18c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	7979      	ldrb	r1, [r7, #5]
 800104e:	79ba      	ldrb	r2, [r7, #6]
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	4611      	mov	r1, r2
 8001056:	4a34      	ldr	r2, [pc, #208]	; (8001128 <MGPIO_voidSetPinOutputMode+0x18c>)
 8001058:	430b      	orrs	r3, r1
 800105a:	6053      	str	r3, [r2, #4]
			break;
 800105c:	e05e      	b.n	800111c <MGPIO_voidSetPinOutputMode+0x180>
			GPIOB->OSPEEDR &= ~(TWO_BIT_MASK<<(A_u8Pin*2));
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <MGPIO_voidSetPinOutputMode+0x190>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	79ba      	ldrb	r2, [r7, #6]
 8001064:	0052      	lsls	r2, r2, #1
 8001066:	2103      	movs	r1, #3
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	43d2      	mvns	r2, r2
 800106e:	4611      	mov	r1, r2
 8001070:	4a2e      	ldr	r2, [pc, #184]	; (800112c <MGPIO_voidSetPinOutputMode+0x190>)
 8001072:	400b      	ands	r3, r1
 8001074:	6093      	str	r3, [r2, #8]
			GPIOB->OSPEEDR |= (A_u8Speed<<(A_u8Pin*2));
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <MGPIO_voidSetPinOutputMode+0x190>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	7939      	ldrb	r1, [r7, #4]
 800107c:	79ba      	ldrb	r2, [r7, #6]
 800107e:	0052      	lsls	r2, r2, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4611      	mov	r1, r2
 8001086:	4a29      	ldr	r2, [pc, #164]	; (800112c <MGPIO_voidSetPinOutputMode+0x190>)
 8001088:	430b      	orrs	r3, r1
 800108a:	6093      	str	r3, [r2, #8]
			GPIOB->OTYPER &= ~(ONE_BIT_MASK<<A_u8Pin);
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <MGPIO_voidSetPinOutputMode+0x190>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	79ba      	ldrb	r2, [r7, #6]
 8001092:	2101      	movs	r1, #1
 8001094:	fa01 f202 	lsl.w	r2, r1, r2
 8001098:	43d2      	mvns	r2, r2
 800109a:	4611      	mov	r1, r2
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <MGPIO_voidSetPinOutputMode+0x190>)
 800109e:	400b      	ands	r3, r1
 80010a0:	6053      	str	r3, [r2, #4]
			GPIOB->OTYPER |= (A_u8OutputMode<<A_u8Pin);
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <MGPIO_voidSetPinOutputMode+0x190>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	7979      	ldrb	r1, [r7, #5]
 80010a8:	79ba      	ldrb	r2, [r7, #6]
 80010aa:	fa01 f202 	lsl.w	r2, r1, r2
 80010ae:	4611      	mov	r1, r2
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <MGPIO_voidSetPinOutputMode+0x190>)
 80010b2:	430b      	orrs	r3, r1
 80010b4:	6053      	str	r3, [r2, #4]
			break;
 80010b6:	e031      	b.n	800111c <MGPIO_voidSetPinOutputMode+0x180>
			GPIOC->OSPEEDR &= ~(TWO_BIT_MASK<<(A_u8Pin*2));
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MGPIO_voidSetPinOutputMode+0x194>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	79ba      	ldrb	r2, [r7, #6]
 80010be:	0052      	lsls	r2, r2, #1
 80010c0:	2103      	movs	r1, #3
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	43d2      	mvns	r2, r2
 80010c8:	4611      	mov	r1, r2
 80010ca:	4a19      	ldr	r2, [pc, #100]	; (8001130 <MGPIO_voidSetPinOutputMode+0x194>)
 80010cc:	400b      	ands	r3, r1
 80010ce:	6093      	str	r3, [r2, #8]
			GPIOC->OSPEEDR |= (A_u8Speed<<(A_u8Pin*2));
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MGPIO_voidSetPinOutputMode+0x194>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	7939      	ldrb	r1, [r7, #4]
 80010d6:	79ba      	ldrb	r2, [r7, #6]
 80010d8:	0052      	lsls	r2, r2, #1
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	4611      	mov	r1, r2
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <MGPIO_voidSetPinOutputMode+0x194>)
 80010e2:	430b      	orrs	r3, r1
 80010e4:	6093      	str	r3, [r2, #8]
			GPIOC->OTYPER &= ~(ONE_BIT_MASK<<A_u8Pin);
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MGPIO_voidSetPinOutputMode+0x194>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	2101      	movs	r1, #1
 80010ee:	fa01 f202 	lsl.w	r2, r1, r2
 80010f2:	43d2      	mvns	r2, r2
 80010f4:	4611      	mov	r1, r2
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <MGPIO_voidSetPinOutputMode+0x194>)
 80010f8:	400b      	ands	r3, r1
 80010fa:	6053      	str	r3, [r2, #4]
			GPIOC->OTYPER |= (A_u8OutputMode<<A_u8Pin);
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MGPIO_voidSetPinOutputMode+0x194>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	7979      	ldrb	r1, [r7, #5]
 8001102:	79ba      	ldrb	r2, [r7, #6]
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	4611      	mov	r1, r2
 800110a:	4a09      	ldr	r2, [pc, #36]	; (8001130 <MGPIO_voidSetPinOutputMode+0x194>)
 800110c:	430b      	orrs	r3, r1
 800110e:	6053      	str	r3, [r2, #4]
			break;
 8001110:	e004      	b.n	800111c <MGPIO_voidSetPinOutputMode+0x180>
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 8001112:	bf00      	nop
 8001114:	e002      	b.n	800111c <MGPIO_voidSetPinOutputMode+0x180>
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 8001116:	bf00      	nop
 8001118:	e000      	b.n	800111c <MGPIO_voidSetPinOutputMode+0x180>
			break;
 800111a:	bf00      	nop
		}
	}
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bc90      	pop	{r4, r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800

08001134 <MGPIO_voidSetPinValue>:
		}
	}
}

void MGPIO_voidSetPinValue (u8 A_u8Port , u8 A_u8Pin , u8 A_u8Output)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	460b      	mov	r3, r1
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	4613      	mov	r3, r2
 8001144:	717b      	strb	r3, [r7, #5]
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d108      	bne.n	800115e <MGPIO_voidSetPinValue+0x2a>
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	2b0d      	cmp	r3, #13
 8001150:	d06f      	beq.n	8001232 <MGPIO_voidSetPinValue+0xfe>
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	2b0e      	cmp	r3, #14
 8001156:	d06c      	beq.n	8001232 <MGPIO_voidSetPinValue+0xfe>
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	d069      	beq.n	8001232 <MGPIO_voidSetPinValue+0xfe>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <MGPIO_voidSetPinValue+0x3c>
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d065      	beq.n	8001236 <MGPIO_voidSetPinValue+0x102>
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d062      	beq.n	8001236 <MGPIO_voidSetPinValue+0x102>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else
	{
		switch (A_u8Port)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d040      	beq.n	80011f8 <MGPIO_voidSetPinValue+0xc4>
 8001176:	2b02      	cmp	r3, #2
 8001178:	dc5f      	bgt.n	800123a <MGPIO_voidSetPinValue+0x106>
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <MGPIO_voidSetPinValue+0x50>
 800117e:	2b01      	cmp	r3, #1
 8001180:	d01d      	beq.n	80011be <MGPIO_voidSetPinValue+0x8a>
				CLR_BIT(GPIOC->ODR , A_u8Pin);
				break;
			}
				break;
		default :
			break;
 8001182:	e05a      	b.n	800123a <MGPIO_voidSetPinValue+0x106>
			switch (A_u8Output)
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00c      	beq.n	80011a4 <MGPIO_voidSetPinValue+0x70>
 800118a:	2b01      	cmp	r3, #1
 800118c:	d157      	bne.n	800123e <MGPIO_voidSetPinValue+0x10a>
				SET_BIT(GPIOA->ODR , A_u8Pin);
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <MGPIO_voidSetPinValue+0x120>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	79ba      	ldrb	r2, [r7, #6]
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	4611      	mov	r1, r2
 800119c:	4a2d      	ldr	r2, [pc, #180]	; (8001254 <MGPIO_voidSetPinValue+0x120>)
 800119e:	430b      	orrs	r3, r1
 80011a0:	6153      	str	r3, [r2, #20]
				break;
 80011a2:	e00b      	b.n	80011bc <MGPIO_voidSetPinValue+0x88>
				CLR_BIT(GPIOA->ODR , A_u8Pin);
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MGPIO_voidSetPinValue+0x120>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	79ba      	ldrb	r2, [r7, #6]
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	43d2      	mvns	r2, r2
 80011b2:	4611      	mov	r1, r2
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <MGPIO_voidSetPinValue+0x120>)
 80011b6:	400b      	ands	r3, r1
 80011b8:	6153      	str	r3, [r2, #20]
				break;
 80011ba:	bf00      	nop
			break;
 80011bc:	e03f      	b.n	800123e <MGPIO_voidSetPinValue+0x10a>
			switch (A_u8Output)
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00c      	beq.n	80011de <MGPIO_voidSetPinValue+0xaa>
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d13c      	bne.n	8001242 <MGPIO_voidSetPinValue+0x10e>
				SET_BIT(GPIOB->ODR , A_u8Pin);
 80011c8:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MGPIO_voidSetPinValue+0x124>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f202 	lsl.w	r2, r1, r2
 80011d4:	4611      	mov	r1, r2
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <MGPIO_voidSetPinValue+0x124>)
 80011d8:	430b      	orrs	r3, r1
 80011da:	6153      	str	r3, [r2, #20]
				break;
 80011dc:	e00b      	b.n	80011f6 <MGPIO_voidSetPinValue+0xc2>
				CLR_BIT(GPIOB->ODR , A_u8Pin);
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MGPIO_voidSetPinValue+0x124>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	79ba      	ldrb	r2, [r7, #6]
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	43d2      	mvns	r2, r2
 80011ec:	4611      	mov	r1, r2
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <MGPIO_voidSetPinValue+0x124>)
 80011f0:	400b      	ands	r3, r1
 80011f2:	6153      	str	r3, [r2, #20]
				break;
 80011f4:	bf00      	nop
			break;
 80011f6:	e024      	b.n	8001242 <MGPIO_voidSetPinValue+0x10e>
			switch (A_u8Output)
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00c      	beq.n	8001218 <MGPIO_voidSetPinValue+0xe4>
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d121      	bne.n	8001246 <MGPIO_voidSetPinValue+0x112>
				SET_BIT(GPIOC->ODR , A_u8Pin);
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <MGPIO_voidSetPinValue+0x128>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	79ba      	ldrb	r2, [r7, #6]
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	4611      	mov	r1, r2
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <MGPIO_voidSetPinValue+0x128>)
 8001212:	430b      	orrs	r3, r1
 8001214:	6153      	str	r3, [r2, #20]
				break;
 8001216:	e00b      	b.n	8001230 <MGPIO_voidSetPinValue+0xfc>
				CLR_BIT(GPIOC->ODR , A_u8Pin);
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <MGPIO_voidSetPinValue+0x128>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	79ba      	ldrb	r2, [r7, #6]
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	43d2      	mvns	r2, r2
 8001226:	4611      	mov	r1, r2
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <MGPIO_voidSetPinValue+0x128>)
 800122a:	400b      	ands	r3, r1
 800122c:	6153      	str	r3, [r2, #20]
				break;
 800122e:	bf00      	nop
				break;
 8001230:	e009      	b.n	8001246 <MGPIO_voidSetPinValue+0x112>
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 8001232:	bf00      	nop
 8001234:	e008      	b.n	8001248 <MGPIO_voidSetPinValue+0x114>
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 8001236:	bf00      	nop
 8001238:	e006      	b.n	8001248 <MGPIO_voidSetPinValue+0x114>
			break;
 800123a:	bf00      	nop
 800123c:	e004      	b.n	8001248 <MGPIO_voidSetPinValue+0x114>
			break;
 800123e:	bf00      	nop
 8001240:	e002      	b.n	8001248 <MGPIO_voidSetPinValue+0x114>
			break;
 8001242:	bf00      	nop
 8001244:	e000      	b.n	8001248 <MGPIO_voidSetPinValue+0x114>
				break;
 8001246:	bf00      	nop
		}
	}
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800

08001260 <MGPIO_voidSetResetPin>:
		}
	}

}
void MGPIO_voidSetResetPin (u8 A_u8Port , u8 A_u8Pin , u8 A_u8SetResetValue)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	460b      	mov	r3, r1
 800126c:	71bb      	strb	r3, [r7, #6]
 800126e:	4613      	mov	r3, r2
 8001270:	717b      	strb	r3, [r7, #5]
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d108      	bne.n	800128a <MGPIO_voidSetResetPin+0x2a>
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	2b0d      	cmp	r3, #13
 800127c:	d06f      	beq.n	800135e <MGPIO_voidSetResetPin+0xfe>
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b0e      	cmp	r3, #14
 8001282:	d06c      	beq.n	800135e <MGPIO_voidSetResetPin+0xfe>
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d069      	beq.n	800135e <MGPIO_voidSetResetPin+0xfe>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <MGPIO_voidSetResetPin+0x3c>
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d065      	beq.n	8001362 <MGPIO_voidSetResetPin+0x102>
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d062      	beq.n	8001362 <MGPIO_voidSetResetPin+0x102>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else
	{
		switch (A_u8Port)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d040      	beq.n	8001324 <MGPIO_voidSetResetPin+0xc4>
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	dc5f      	bgt.n	8001366 <MGPIO_voidSetResetPin+0x106>
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <MGPIO_voidSetResetPin+0x50>
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d01d      	beq.n	80012ea <MGPIO_voidSetResetPin+0x8a>
				SET_BIT(GPIOC->BSRR , (A_u8Pin+GPIO_RESET_INDEX));
				break;
			}
				break;
		default :
			break;
 80012ae:	e05a      	b.n	8001366 <MGPIO_voidSetResetPin+0x106>
			switch (A_u8SetResetValue)
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00c      	beq.n	80012d0 <MGPIO_voidSetResetPin+0x70>
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d157      	bne.n	800136a <MGPIO_voidSetResetPin+0x10a>
				SET_BIT(GPIOA->BSRR , A_u8Pin);
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <MGPIO_voidSetResetPin+0x120>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	79ba      	ldrb	r2, [r7, #6]
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	4611      	mov	r1, r2
 80012c8:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <MGPIO_voidSetResetPin+0x120>)
 80012ca:	430b      	orrs	r3, r1
 80012cc:	6193      	str	r3, [r2, #24]
				break;
 80012ce:	e00b      	b.n	80012e8 <MGPIO_voidSetResetPin+0x88>
				SET_BIT(GPIOA->BSRR , (A_u8Pin+GPIO_RESET_INDEX));
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <MGPIO_voidSetResetPin+0x120>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	79ba      	ldrb	r2, [r7, #6]
 80012d6:	3210      	adds	r2, #16
 80012d8:	2101      	movs	r1, #1
 80012da:	fa01 f202 	lsl.w	r2, r1, r2
 80012de:	4611      	mov	r1, r2
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <MGPIO_voidSetResetPin+0x120>)
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6193      	str	r3, [r2, #24]
				break;
 80012e6:	bf00      	nop
			break;
 80012e8:	e03f      	b.n	800136a <MGPIO_voidSetResetPin+0x10a>
			switch (A_u8SetResetValue)
 80012ea:	797b      	ldrb	r3, [r7, #5]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <MGPIO_voidSetResetPin+0xaa>
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d13c      	bne.n	800136e <MGPIO_voidSetResetPin+0x10e>
				SET_BIT(GPIOB->BSRR , A_u8Pin);
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MGPIO_voidSetResetPin+0x124>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	79ba      	ldrb	r2, [r7, #6]
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4611      	mov	r1, r2
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <MGPIO_voidSetResetPin+0x124>)
 8001304:	430b      	orrs	r3, r1
 8001306:	6193      	str	r3, [r2, #24]
				break;
 8001308:	e00b      	b.n	8001322 <MGPIO_voidSetResetPin+0xc2>
				SET_BIT(GPIOB->BSRR , (A_u8Pin+GPIO_RESET_INDEX));
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MGPIO_voidSetResetPin+0x124>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	79ba      	ldrb	r2, [r7, #6]
 8001310:	3210      	adds	r2, #16
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4611      	mov	r1, r2
 800131a:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <MGPIO_voidSetResetPin+0x124>)
 800131c:	430b      	orrs	r3, r1
 800131e:	6193      	str	r3, [r2, #24]
				break;
 8001320:	bf00      	nop
			break;
 8001322:	e024      	b.n	800136e <MGPIO_voidSetResetPin+0x10e>
			switch (A_u8SetResetValue)
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00c      	beq.n	8001344 <MGPIO_voidSetResetPin+0xe4>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d121      	bne.n	8001372 <MGPIO_voidSetResetPin+0x112>
				SET_BIT(GPIOC->BSRR , A_u8Pin);
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MGPIO_voidSetResetPin+0x128>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	79ba      	ldrb	r2, [r7, #6]
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	4611      	mov	r1, r2
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <MGPIO_voidSetResetPin+0x128>)
 800133e:	430b      	orrs	r3, r1
 8001340:	6193      	str	r3, [r2, #24]
				break;
 8001342:	e00b      	b.n	800135c <MGPIO_voidSetResetPin+0xfc>
				SET_BIT(GPIOC->BSRR , (A_u8Pin+GPIO_RESET_INDEX));
 8001344:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MGPIO_voidSetResetPin+0x128>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	79ba      	ldrb	r2, [r7, #6]
 800134a:	3210      	adds	r2, #16
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	4611      	mov	r1, r2
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <MGPIO_voidSetResetPin+0x128>)
 8001356:	430b      	orrs	r3, r1
 8001358:	6193      	str	r3, [r2, #24]
				break;
 800135a:	bf00      	nop
				break;
 800135c:	e009      	b.n	8001372 <MGPIO_voidSetResetPin+0x112>
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 800135e:	bf00      	nop
 8001360:	e008      	b.n	8001374 <MGPIO_voidSetResetPin+0x114>
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 8001362:	bf00      	nop
 8001364:	e006      	b.n	8001374 <MGPIO_voidSetResetPin+0x114>
			break;
 8001366:	bf00      	nop
 8001368:	e004      	b.n	8001374 <MGPIO_voidSetResetPin+0x114>
			break;
 800136a:	bf00      	nop
 800136c:	e002      	b.n	8001374 <MGPIO_voidSetResetPin+0x114>
			break;
 800136e:	bf00      	nop
 8001370:	e000      	b.n	8001374 <MGPIO_voidSetResetPin+0x114>
				break;
 8001372:	bf00      	nop
		}
	}
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800

0800138c <MGPIO_voidSetPinAltrenativeFunction>:

void MGPIO_voidSetPinAltrenativeFunction (u8 A_u8Port , u8 A_u8Pin , u8 A_u8AltFunc)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	460b      	mov	r3, r1
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	4613      	mov	r3, r2
 800139c:	717b      	strb	r3, [r7, #5]
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10b      	bne.n	80013bc <MGPIO_voidSetPinAltrenativeFunction+0x30>
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	2b0d      	cmp	r3, #13
 80013a8:	f000 80bd 	beq.w	8001526 <MGPIO_voidSetPinAltrenativeFunction+0x19a>
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	2b0e      	cmp	r3, #14
 80013b0:	f000 80b9 	beq.w	8001526 <MGPIO_voidSetPinAltrenativeFunction+0x19a>
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	f000 80b5 	beq.w	8001526 <MGPIO_voidSetPinAltrenativeFunction+0x19a>
	{
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d107      	bne.n	80013d2 <MGPIO_voidSetPinAltrenativeFunction+0x46>
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	f000 80b0 	beq.w	800152a <MGPIO_voidSetPinAltrenativeFunction+0x19e>
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	f000 80ac 	beq.w	800152a <MGPIO_voidSetPinAltrenativeFunction+0x19e>
		/*Do Nothing (Reserved Pins For Debugger)*/
	}
	else
	{
		/*Switch on the Entered port*/
		switch (A_u8Port)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d071      	beq.n	80014bc <MGPIO_voidSetPinAltrenativeFunction+0x130>
 80013d8:	2b02      	cmp	r3, #2
 80013da:	f300 80a8 	bgt.w	800152e <MGPIO_voidSetPinAltrenativeFunction+0x1a2>
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <MGPIO_voidSetPinAltrenativeFunction+0x5c>
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d035      	beq.n	8001452 <MGPIO_voidSetPinAltrenativeFunction+0xc6>
				GPIOB->AFRH &= ~(FOUR_BIT_MASK<<((A_u8Pin-8)*4));
				GPIOB->AFRH |= (A_u8AltFunc<<((A_u8Pin-8)*4));
			}
			break;
		default :
			break;
 80013e6:	e0a2      	b.n	800152e <MGPIO_voidSetPinAltrenativeFunction+0x1a2>
			if (A_u8Pin < 8)
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b07      	cmp	r3, #7
 80013ec:	d817      	bhi.n	800141e <MGPIO_voidSetPinAltrenativeFunction+0x92>
				GPIOA->AFRL &= ~(FOUR_BIT_MASK<<(A_u8Pin*4));
 80013ee:	4b53      	ldr	r3, [pc, #332]	; (800153c <MGPIO_voidSetPinAltrenativeFunction+0x1b0>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	79ba      	ldrb	r2, [r7, #6]
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	210f      	movs	r1, #15
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	43d2      	mvns	r2, r2
 80013fe:	4611      	mov	r1, r2
 8001400:	4a4e      	ldr	r2, [pc, #312]	; (800153c <MGPIO_voidSetPinAltrenativeFunction+0x1b0>)
 8001402:	400b      	ands	r3, r1
 8001404:	6213      	str	r3, [r2, #32]
				GPIOA->AFRL |= (A_u8AltFunc<<(A_u8Pin*4));
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <MGPIO_voidSetPinAltrenativeFunction+0x1b0>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	7979      	ldrb	r1, [r7, #5]
 800140c:	79ba      	ldrb	r2, [r7, #6]
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	4611      	mov	r1, r2
 8001416:	4a49      	ldr	r2, [pc, #292]	; (800153c <MGPIO_voidSetPinAltrenativeFunction+0x1b0>)
 8001418:	430b      	orrs	r3, r1
 800141a:	6213      	str	r3, [r2, #32]
			break;
 800141c:	e088      	b.n	8001530 <MGPIO_voidSetPinAltrenativeFunction+0x1a4>
				GPIOA->AFRH &= ~(FOUR_BIT_MASK<<((A_u8Pin-8)*4));
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <MGPIO_voidSetPinAltrenativeFunction+0x1b0>)
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	79ba      	ldrb	r2, [r7, #6]
 8001424:	3a08      	subs	r2, #8
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	210f      	movs	r1, #15
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	43d2      	mvns	r2, r2
 8001430:	4611      	mov	r1, r2
 8001432:	4a42      	ldr	r2, [pc, #264]	; (800153c <MGPIO_voidSetPinAltrenativeFunction+0x1b0>)
 8001434:	400b      	ands	r3, r1
 8001436:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOA->AFRH |= (A_u8AltFunc<<((A_u8Pin-8)*4));
 8001438:	4b40      	ldr	r3, [pc, #256]	; (800153c <MGPIO_voidSetPinAltrenativeFunction+0x1b0>)
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	7979      	ldrb	r1, [r7, #5]
 800143e:	79ba      	ldrb	r2, [r7, #6]
 8001440:	3a08      	subs	r2, #8
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	fa01 f202 	lsl.w	r2, r1, r2
 8001448:	4611      	mov	r1, r2
 800144a:	4a3c      	ldr	r2, [pc, #240]	; (800153c <MGPIO_voidSetPinAltrenativeFunction+0x1b0>)
 800144c:	430b      	orrs	r3, r1
 800144e:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8001450:	e06e      	b.n	8001530 <MGPIO_voidSetPinAltrenativeFunction+0x1a4>
			if (A_u8Pin < 8)
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	2b07      	cmp	r3, #7
 8001456:	d817      	bhi.n	8001488 <MGPIO_voidSetPinAltrenativeFunction+0xfc>
				GPIOB->AFRL &= ~(FOUR_BIT_MASK<<(A_u8Pin*4));
 8001458:	4b39      	ldr	r3, [pc, #228]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	79ba      	ldrb	r2, [r7, #6]
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	210f      	movs	r1, #15
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	43d2      	mvns	r2, r2
 8001468:	4611      	mov	r1, r2
 800146a:	4a35      	ldr	r2, [pc, #212]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 800146c:	400b      	ands	r3, r1
 800146e:	6213      	str	r3, [r2, #32]
				GPIOB->AFRL |= (A_u8AltFunc<<(A_u8Pin*4));
 8001470:	4b33      	ldr	r3, [pc, #204]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	7979      	ldrb	r1, [r7, #5]
 8001476:	79ba      	ldrb	r2, [r7, #6]
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	4611      	mov	r1, r2
 8001480:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 8001482:	430b      	orrs	r3, r1
 8001484:	6213      	str	r3, [r2, #32]
			break;
 8001486:	e053      	b.n	8001530 <MGPIO_voidSetPinAltrenativeFunction+0x1a4>
				GPIOB->AFRH &= ~(FOUR_BIT_MASK<<((A_u8Pin-8)*4));
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	79ba      	ldrb	r2, [r7, #6]
 800148e:	3a08      	subs	r2, #8
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	210f      	movs	r1, #15
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	43d2      	mvns	r2, r2
 800149a:	4611      	mov	r1, r2
 800149c:	4a28      	ldr	r2, [pc, #160]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 800149e:	400b      	ands	r3, r1
 80014a0:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOB->AFRH |= (A_u8AltFunc<<((A_u8Pin-8)*4));
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	7979      	ldrb	r1, [r7, #5]
 80014a8:	79ba      	ldrb	r2, [r7, #6]
 80014aa:	3a08      	subs	r2, #8
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	4611      	mov	r1, r2
 80014b4:	4a22      	ldr	r2, [pc, #136]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 80014b6:	430b      	orrs	r3, r1
 80014b8:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 80014ba:	e039      	b.n	8001530 <MGPIO_voidSetPinAltrenativeFunction+0x1a4>
			if (A_u8Pin < 8)
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	2b07      	cmp	r3, #7
 80014c0:	d817      	bhi.n	80014f2 <MGPIO_voidSetPinAltrenativeFunction+0x166>
				GPIOC->AFRL &= ~(FOUR_BIT_MASK<<(A_u8Pin*4));
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <MGPIO_voidSetPinAltrenativeFunction+0x1b8>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	79ba      	ldrb	r2, [r7, #6]
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	210f      	movs	r1, #15
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	43d2      	mvns	r2, r2
 80014d2:	4611      	mov	r1, r2
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <MGPIO_voidSetPinAltrenativeFunction+0x1b8>)
 80014d6:	400b      	ands	r3, r1
 80014d8:	6213      	str	r3, [r2, #32]
				GPIOC->AFRL |= (A_u8AltFunc<<(A_u8Pin*4));
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MGPIO_voidSetPinAltrenativeFunction+0x1b8>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	7979      	ldrb	r1, [r7, #5]
 80014e0:	79ba      	ldrb	r2, [r7, #6]
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	4611      	mov	r1, r2
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <MGPIO_voidSetPinAltrenativeFunction+0x1b8>)
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6213      	str	r3, [r2, #32]
			break;
 80014f0:	e01e      	b.n	8001530 <MGPIO_voidSetPinAltrenativeFunction+0x1a4>
				GPIOB->AFRH &= ~(FOUR_BIT_MASK<<((A_u8Pin-8)*4));
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	79ba      	ldrb	r2, [r7, #6]
 80014f8:	3a08      	subs	r2, #8
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	210f      	movs	r1, #15
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	43d2      	mvns	r2, r2
 8001504:	4611      	mov	r1, r2
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 8001508:	400b      	ands	r3, r1
 800150a:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOB->AFRH |= (A_u8AltFunc<<((A_u8Pin-8)*4));
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	7979      	ldrb	r1, [r7, #5]
 8001512:	79ba      	ldrb	r2, [r7, #6]
 8001514:	3a08      	subs	r2, #8
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	fa01 f202 	lsl.w	r2, r1, r2
 800151c:	4611      	mov	r1, r2
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <MGPIO_voidSetPinAltrenativeFunction+0x1b4>)
 8001520:	430b      	orrs	r3, r1
 8001522:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8001524:	e004      	b.n	8001530 <MGPIO_voidSetPinAltrenativeFunction+0x1a4>
	if ((A_u8Port == GPIO_PORTA) && ((A_u8Pin == GPIO_PIN13) || (A_u8Pin == GPIO_PIN14) || (A_u8Pin == GPIO_PIN15)))
 8001526:	bf00      	nop
 8001528:	e002      	b.n	8001530 <MGPIO_voidSetPinAltrenativeFunction+0x1a4>
	else if ((A_u8Port == GPIO_PORTB) && ((A_u8Pin == GPIO_PIN3) || (A_u8Pin == GPIO_PIN4)))
 800152a:	bf00      	nop
 800152c:	e000      	b.n	8001530 <MGPIO_voidSetPinAltrenativeFunction+0x1a4>
			break;
 800152e:	bf00      	nop
		}
	}
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800

08001548 <MRCC_voidInit>:
#include "../include/MCAL/RCC/MRCC_Interface.h"
#include "../include/MCAL/RCC/MRCC_Private.h"
#include "../include/MCAL/RCC/MRCC_Config.h"

void MRCC_voidInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
	#if SYS_CLK == MRCC_HSI

		/* Set HSITRIM (High speed internal clock trimming) default value */
		RCC->CR &= ~(HSITRIM_MASK);
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MRCC_voidInit+0x70>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a19      	ldr	r2, [pc, #100]	; (80015b8 <MRCC_voidInit+0x70>)
 8001552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001556:	6013      	str	r3, [r2, #0]
		RCC->CR |= HSITRIM_MASK;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MRCC_voidInit+0x70>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <MRCC_voidInit+0x70>)
 800155e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001562:	6013      	str	r3, [r2, #0]

		/* Enable HSI and Disable others */
		CLR_BIT(RCC->CR, CR_HSE_ON);
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MRCC_voidInit+0x70>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <MRCC_voidInit+0x70>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
		CLR_BIT(RCC->CR, CR_PLL_ON);
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MRCC_voidInit+0x70>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <MRCC_voidInit+0x70>)
 8001576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157a:	6013      	str	r3, [r2, #0]
		SET_BIT(RCC->CR, CR_HSI_ON);
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MRCC_voidInit+0x70>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <MRCC_voidInit+0x70>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

		/* Polling on HSI ready flag */
		while (!GET_BIT(RCC->CR, CR_HSI_RDY));
 8001588:	bf00      	nop
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MRCC_voidInit+0x70>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f8      	beq.n	800158a <MRCC_voidInit+0x42>

		/* Switch to HSI */
		RCC->CFGR &= ~(TWO_BITS_MASK << CFGR_SW0);
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MRCC_voidInit+0x70>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <MRCC_voidInit+0x70>)
 800159e:	f023 0303 	bic.w	r3, r3, #3
 80015a2:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= SW_HSI;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <MRCC_voidInit+0x70>)
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <MRCC_voidInit+0x70>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= SW_PLL;

	#else
		#error "Check System Clock source in MRCC_conf.h"
	#endif
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <MRCC_voidEnablePeripheral>:

void MRCC_voidEnablePeripheral (u32 Copy_u32BusID, u32 Copy_u32PeripheralID)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
	if (Copy_u32PeripheralID < 32)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b1f      	cmp	r3, #31
 80015ca:	d83a      	bhi.n	8001642 <MRCC_voidEnablePeripheral+0x86>
	{
		switch (Copy_u32BusID)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d836      	bhi.n	8001640 <MRCC_voidEnablePeripheral+0x84>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <MRCC_voidEnablePeripheral+0x1c>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	080015ff 	.word	0x080015ff
 80015e0:	08001615 	.word	0x08001615
 80015e4:	0800162b 	.word	0x0800162b
		{
		/* Enable peripheral in APB1 bus */
		case MRCC_APB1: SET_BIT(RCC->APB1ENR, Copy_u32PeripheralID); break;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MRCC_voidEnablePeripheral+0x94>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2101      	movs	r1, #1
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4611      	mov	r1, r2
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <MRCC_voidEnablePeripheral+0x94>)
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	e021      	b.n	8001642 <MRCC_voidEnablePeripheral+0x86>
		/* Enable peripheral in APB2 bus */
		case MRCC_APB2: SET_BIT(RCC->APB2ENR, Copy_u32PeripheralID); break;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MRCC_voidEnablePeripheral+0x94>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	2101      	movs	r1, #1
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	4611      	mov	r1, r2
 800160c:	4a10      	ldr	r2, [pc, #64]	; (8001650 <MRCC_voidEnablePeripheral+0x94>)
 800160e:	430b      	orrs	r3, r1
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	e016      	b.n	8001642 <MRCC_voidEnablePeripheral+0x86>
		/* Enable peripheral in AHB1 bus */
		case MRCC_AHB1: SET_BIT(RCC->AHB1ENR, Copy_u32PeripheralID); break;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MRCC_voidEnablePeripheral+0x94>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	2101      	movs	r1, #1
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	4611      	mov	r1, r2
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <MRCC_voidEnablePeripheral+0x94>)
 8001624:	430b      	orrs	r3, r1
 8001626:	6313      	str	r3, [r2, #48]	; 0x30
 8001628:	e00b      	b.n	8001642 <MRCC_voidEnablePeripheral+0x86>
		/* Enable peripheral in AHB2 bus */
		case MRCC_AHB2: SET_BIT(RCC->AHB2ENR, Copy_u32PeripheralID); break;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MRCC_voidEnablePeripheral+0x94>)
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	2101      	movs	r1, #1
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	4611      	mov	r1, r2
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <MRCC_voidEnablePeripheral+0x94>)
 800163a:	430b      	orrs	r3, r1
 800163c:	6353      	str	r3, [r2, #52]	; 0x34
 800163e:	e000      	b.n	8001642 <MRCC_voidEnablePeripheral+0x86>
		default: break;
 8001640:	bf00      	nop
	}
	else
	{
		/* Do nothing */
	}
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800

08001654 <SPI1_IRQHandler>:
	SPI_CallBack[0] = p_CallBackFunc;
}


void SPI1_IRQHandler (void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	if (SPI_CallBack[0] != NULL)
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SPI1_IRQHandler+0x18>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <SPI1_IRQHandler+0x12>
	{
		SPI_CallBack[0]();
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <SPI1_IRQHandler+0x18>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4798      	blx	r3
	}
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000068 	.word	0x20000068

08001670 <MSPI2_voidInit>:

void MSPI2_voidInit (void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	/*Set Data Size*/
#if MSPI2_DATA_SIZE == MSPI_16BIT_DATA
	SET_BIT (SPI2->CR1 , CR1_DFF);
#else
	CLR_BIT (SPI2->CR1 , CR1_DFF);
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MSPI2_voidInit+0x7c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <MSPI2_voidInit+0x7c>)
 800167a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800167e:	6013      	str	r3, [r2, #0]
	/*Set slave management mode*/
#if MSPI2_SS_MANAGE == MSPI_SW_SLAVE_MANAGEMENT
	SET_BIT (SPI2->CR1 , CR1_SSM);
	SET_BIT(SPI2->CR1 , CR1_SSI);
#else
	CLR_BIT (SPI2->CR1 , CR1_SSM);
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MSPI2_voidInit+0x7c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	; (80016ec <MSPI2_voidInit+0x7c>)
 8001686:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]
#endif
	/*Set Data Order*/
#if MSPI2_DATA_ORDER == MSPI_LSB_FIRST
	SET_BIT (SPI2->CR1 , CR1_LSBFIRST);
#else
	CLR_BIT (SPI2->CR1 , CR1_LSBFIRST);
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MSPI2_voidInit+0x7c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a16      	ldr	r2, [pc, #88]	; (80016ec <MSPI2_voidInit+0x7c>)
 8001692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001696:	6013      	str	r3, [r2, #0]
#endif
	/*Set Clock Mode*/
	SPI2->CR1 &= ~(TWO_BIT_MASK<<CR1_CLK_SELECT);
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MSPI2_voidInit+0x7c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MSPI2_voidInit+0x7c>)
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	6013      	str	r3, [r2, #0]
	SPI2->CR1 |= (MSPI2_CLK_MODE<<CR1_CLK_SELECT);
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016aa:	f043 0303 	orr.w	r3, r3, #3
 80016ae:	6013      	str	r3, [r2, #0]
	/*Set Interrupt States*/
#if MSPI2_TX_INTERRUPT_STATE == MSPI_INTERRUPT_ENABLE
	SET_BIT (SPI2->CR2 , CR2_TXEIE);
#else
	CLR_BIT (SPI2->CR2 , CR2_TXEIE);
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ba:	6053      	str	r3, [r2, #4]
#endif
#if MSPI2_RX_INTERRUPT_STATE == MSPI_INTERRUPT_ENABLE
	SET_BIT (SPI2->CR2 , CR2_RXNEIE);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c6:	6053      	str	r3, [r2, #4]
	SET_BIT (SPI2->CR1 , CR1_MSTR);
	/*Set Prescaler*/
	SPI2->CR1 &= ~(THREE_BIT_MASK<<CR1_BR);
	SPI2->CR1 |= (MSPI2_PRESCALER<<CR1_CLK_SELECT);
#else
	CLR_BIT (SPI2->CR1 , CR1_MSTR);
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6013      	str	r3, [r2, #0]
#endif
	/*ٍSet SPI State*/
#if MSPI2_STATE == MSPI_ENABLED
	SET_BIT (SPI2->CR1 , CR1_SPE);
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <MSPI2_voidInit+0x7c>)
 80016da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016de:	6013      	str	r3, [r2, #0]
#else
	CLR_BIT (SPI2->CR1 , CR1_SPE);
#endif
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40003800 	.word	0x40003800

080016f0 <SPI2_IRQHandler>:
	SPI_CallBack[1] = p_CallBackFunc;
}


void SPI2_IRQHandler (void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	if (SPI_CallBack[1] != NULL)
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SPI2_IRQHandler+0x18>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <SPI2_IRQHandler+0x12>
	{
		SPI_CallBack[1]();
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <SPI2_IRQHandler+0x18>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4798      	blx	r3
	}
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000068 	.word	0x20000068

0800170c <MTIMER_voidEnableTimer>:


PtrToFunc_void TIMER_CallBack [4];

void MTIMER_voidEnableTimer (TIMERS_t A_Timer)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
	switch (A_Timer)
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d829      	bhi.n	8001770 <MTIMER_voidEnableTimer+0x64>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <MTIMER_voidEnableTimer+0x18>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001735 	.word	0x08001735
 8001728:	08001747 	.word	0x08001747
 800172c:	08001755 	.word	0x08001755
 8001730:	08001763 	.word	0x08001763
	{
	case TIMER2:
		SET_BIT(TIM2->CR1 , CR1_CEN);
 8001734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6013      	str	r3, [r2, #0]
		break;
 8001744:	e014      	b.n	8001770 <MTIMER_voidEnableTimer+0x64>
	case TIMER3:
		SET_BIT(TIM3->CR1 , CR1_CEN);
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <MTIMER_voidEnableTimer+0x70>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <MTIMER_voidEnableTimer+0x70>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6013      	str	r3, [r2, #0]
		break;
 8001752:	e00d      	b.n	8001770 <MTIMER_voidEnableTimer+0x64>
	case TIMER4:
		SET_BIT(TIM4->CR1 , CR1_CEN);
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <MTIMER_voidEnableTimer+0x74>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a09      	ldr	r2, [pc, #36]	; (8001780 <MTIMER_voidEnableTimer+0x74>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6013      	str	r3, [r2, #0]
		break;
 8001760:	e006      	b.n	8001770 <MTIMER_voidEnableTimer+0x64>
	case TIMER5:
		SET_BIT(TIM5->CR1 , CR1_CEN);
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MTIMER_voidEnableTimer+0x78>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <MTIMER_voidEnableTimer+0x78>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6013      	str	r3, [r2, #0]
		break;
 800176e:	bf00      	nop
	}
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40000400 	.word	0x40000400
 8001780:	40000800 	.word	0x40000800
 8001784:	40000c00 	.word	0x40000c00

08001788 <MTIMER_EnableChannelInterrupt>:
 * Outcompare mode3,4		-> CCMR2
 * set ccr registers		-> CCR
 *
 */
void MTIMER_EnableChannelInterrupt (TIMERS_t A_Timer, CHANNELS_t A_Channel)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	460a      	mov	r2, r1
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
	switch (A_Timer)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d838      	bhi.n	8001810 <MTIMER_EnableChannelInterrupt+0x88>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <MTIMER_EnableChannelInterrupt+0x1c>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	080017cf 	.word	0x080017cf
 80017ac:	080017e5 	.word	0x080017e5
 80017b0:	080017fb 	.word	0x080017fb
	{
	case TIMER2:
		SET_BIT(TIM2->DIER, A_Channel);
 80017b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	79ba      	ldrb	r2, [r7, #6]
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4611      	mov	r1, r2
 80017c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c8:	430b      	orrs	r3, r1
 80017ca:	60d3      	str	r3, [r2, #12]
		break;
 80017cc:	e020      	b.n	8001810 <MTIMER_EnableChannelInterrupt+0x88>
	case TIMER3:
		SET_BIT(TIM3->DIER, A_Channel);
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MTIMER_EnableChannelInterrupt+0x94>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	79ba      	ldrb	r2, [r7, #6]
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	4611      	mov	r1, r2
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <MTIMER_EnableChannelInterrupt+0x94>)
 80017de:	430b      	orrs	r3, r1
 80017e0:	60d3      	str	r3, [r2, #12]
		break;
 80017e2:	e015      	b.n	8001810 <MTIMER_EnableChannelInterrupt+0x88>
	case TIMER4:
		SET_BIT(TIM4->DIER, A_Channel);
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MTIMER_EnableChannelInterrupt+0x98>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	79ba      	ldrb	r2, [r7, #6]
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	4611      	mov	r1, r2
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <MTIMER_EnableChannelInterrupt+0x98>)
 80017f4:	430b      	orrs	r3, r1
 80017f6:	60d3      	str	r3, [r2, #12]
		break;
 80017f8:	e00a      	b.n	8001810 <MTIMER_EnableChannelInterrupt+0x88>
	case TIMER5:
		SET_BIT(TIM5->DIER, A_Channel);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <MTIMER_EnableChannelInterrupt+0x9c>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	79ba      	ldrb	r2, [r7, #6]
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4611      	mov	r1, r2
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <MTIMER_EnableChannelInterrupt+0x9c>)
 800180a:	430b      	orrs	r3, r1
 800180c:	60d3      	str	r3, [r2, #12]
		break;
 800180e:	bf00      	nop
	}
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40000400 	.word	0x40000400
 8001820:	40000800 	.word	0x40000800
 8001824:	40000c00 	.word	0x40000c00

08001828 <MTIMER_voidSetPrescaler>:

void MTIMER_voidSetPrescaler (TIMERS_t A_Timer, u16 A_u16Prescaler)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	80bb      	strh	r3, [r7, #4]
	switch (A_Timer)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d81b      	bhi.n	8001876 <MTIMER_voidSetPrescaler+0x4e>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <MTIMER_voidSetPrescaler+0x1c>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	08001855 	.word	0x08001855
 8001848:	0800185f 	.word	0x0800185f
 800184c:	08001867 	.word	0x08001867
 8001850:	0800186f 	.word	0x0800186f
	{
	case TIMER2:
		TIM2->PSC = A_u16Prescaler;
 8001854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 800185c:	e00b      	b.n	8001876 <MTIMER_voidSetPrescaler+0x4e>
	case TIMER3:
		TIM3->PSC = A_u16Prescaler;
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <MTIMER_voidSetPrescaler+0x5c>)
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8001864:	e007      	b.n	8001876 <MTIMER_voidSetPrescaler+0x4e>
	case TIMER4:
		TIM4->PSC = A_u16Prescaler;
 8001866:	4a08      	ldr	r2, [pc, #32]	; (8001888 <MTIMER_voidSetPrescaler+0x60>)
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 800186c:	e003      	b.n	8001876 <MTIMER_voidSetPrescaler+0x4e>
	case TIMER5:
		TIM5->PSC = A_u16Prescaler;
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <MTIMER_voidSetPrescaler+0x64>)
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	6293      	str	r3, [r2, #40]	; 0x28
		break;
 8001874:	bf00      	nop
	}
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40000400 	.word	0x40000400
 8001888:	40000800 	.word	0x40000800
 800188c:	40000c00 	.word	0x40000c00

08001890 <MTIMER_voidSetTimerCountDirection>:

void MTIMER_voidSetTimerCountDirection (TIMERS_t A_Timer, CNT_DIR_t A_CNT_Direction)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
	switch (A_Timer)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d862      	bhi.n	800196c <MTIMER_voidSetTimerCountDirection+0xdc>
 80018a6:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <MTIMER_voidSetTimerCountDirection+0x1c>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	080018ef 	.word	0x080018ef
 80018b4:	08001919 	.word	0x08001919
 80018b8:	08001943 	.word	0x08001943
	{
	case TIMER2:
		switch (A_CNT_Direction)
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <MTIMER_voidSetTimerCountDirection+0x38>
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d009      	beq.n	80018da <MTIMER_voidSetTimerCountDirection+0x4a>
			break;
		case DOWNCOUNT:
			SET_BIT(TIM2->CR1, CR1_DIR);
			break;
		}
		break;
 80018c6:	e051      	b.n	800196c <MTIMER_voidSetTimerCountDirection+0xdc>
			CLR_BIT (TIM2->CR1, CR1_DIR);
 80018c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d2:	f023 0310 	bic.w	r3, r3, #16
 80018d6:	6013      	str	r3, [r2, #0]
			break;
 80018d8:	e008      	b.n	80018ec <MTIMER_voidSetTimerCountDirection+0x5c>
			SET_BIT(TIM2->CR1, CR1_DIR);
 80018da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e4:	f043 0310 	orr.w	r3, r3, #16
 80018e8:	6013      	str	r3, [r2, #0]
			break;
 80018ea:	bf00      	nop
		break;
 80018ec:	e03e      	b.n	800196c <MTIMER_voidSetTimerCountDirection+0xdc>
	case TIMER3:
		switch (A_CNT_Direction)
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <MTIMER_voidSetTimerCountDirection+0x6a>
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d007      	beq.n	8001908 <MTIMER_voidSetTimerCountDirection+0x78>
			break;
		case DOWNCOUNT:
			SET_BIT(TIM3->CR1, CR1_DIR);
			break;
		}
		break;
 80018f8:	e038      	b.n	800196c <MTIMER_voidSetTimerCountDirection+0xdc>
			CLR_BIT (TIM3->CR1, CR1_DIR);
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MTIMER_voidSetTimerCountDirection+0xe8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <MTIMER_voidSetTimerCountDirection+0xe8>)
 8001900:	f023 0310 	bic.w	r3, r3, #16
 8001904:	6013      	str	r3, [r2, #0]
			break;
 8001906:	e006      	b.n	8001916 <MTIMER_voidSetTimerCountDirection+0x86>
			SET_BIT(TIM3->CR1, CR1_DIR);
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <MTIMER_voidSetTimerCountDirection+0xe8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <MTIMER_voidSetTimerCountDirection+0xe8>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6013      	str	r3, [r2, #0]
			break;
 8001914:	bf00      	nop
		break;
 8001916:	e029      	b.n	800196c <MTIMER_voidSetTimerCountDirection+0xdc>
	case TIMER4:
		switch (A_CNT_Direction)
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <MTIMER_voidSetTimerCountDirection+0x94>
 800191e:	2b01      	cmp	r3, #1
 8001920:	d007      	beq.n	8001932 <MTIMER_voidSetTimerCountDirection+0xa2>
			break;
		case DOWNCOUNT:
			SET_BIT(TIM4->CR1, CR1_DIR);
			break;
		}
		break;
 8001922:	e023      	b.n	800196c <MTIMER_voidSetTimerCountDirection+0xdc>
			CLR_BIT (TIM4->CR1, CR1_DIR);
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <MTIMER_voidSetTimerCountDirection+0xec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <MTIMER_voidSetTimerCountDirection+0xec>)
 800192a:	f023 0310 	bic.w	r3, r3, #16
 800192e:	6013      	str	r3, [r2, #0]
			break;
 8001930:	e006      	b.n	8001940 <MTIMER_voidSetTimerCountDirection+0xb0>
			SET_BIT(TIM4->CR1, CR1_DIR);
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <MTIMER_voidSetTimerCountDirection+0xec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <MTIMER_voidSetTimerCountDirection+0xec>)
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	6013      	str	r3, [r2, #0]
			break;
 800193e:	bf00      	nop
		break;
 8001940:	e014      	b.n	800196c <MTIMER_voidSetTimerCountDirection+0xdc>
	case TIMER5:
		switch (A_CNT_Direction)
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <MTIMER_voidSetTimerCountDirection+0xbe>
 8001948:	2b01      	cmp	r3, #1
 800194a:	d007      	beq.n	800195c <MTIMER_voidSetTimerCountDirection+0xcc>
			break;
		case DOWNCOUNT:
			SET_BIT(TIM5->CR1, CR1_DIR);
			break;
		}
		break;
 800194c:	e00d      	b.n	800196a <MTIMER_voidSetTimerCountDirection+0xda>
			CLR_BIT (TIM5->CR1, CR1_DIR);
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MTIMER_voidSetTimerCountDirection+0xf0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <MTIMER_voidSetTimerCountDirection+0xf0>)
 8001954:	f023 0310 	bic.w	r3, r3, #16
 8001958:	6013      	str	r3, [r2, #0]
			break;
 800195a:	e006      	b.n	800196a <MTIMER_voidSetTimerCountDirection+0xda>
			SET_BIT(TIM5->CR1, CR1_DIR);
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MTIMER_voidSetTimerCountDirection+0xf0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <MTIMER_voidSetTimerCountDirection+0xf0>)
 8001962:	f043 0310 	orr.w	r3, r3, #16
 8001966:	6013      	str	r3, [r2, #0]
			break;
 8001968:	bf00      	nop
		break;
 800196a:	bf00      	nop
	}
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40000400 	.word	0x40000400
 800197c:	40000800 	.word	0x40000800
 8001980:	40000c00 	.word	0x40000c00

08001984 <MTIMER_voidSetChannelDirection>:

void MTIMER_voidSetChannelDirection (TIMERS_t A_Timer, CHANNELS_t A_Channel, CHANNEL_DIR_t A_Direction)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	460b      	mov	r3, r1
 8001990:	71bb      	strb	r3, [r7, #6]
 8001992:	4613      	mov	r3, r2
 8001994:	717b      	strb	r3, [r7, #5]
	switch (A_Timer)
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2b03      	cmp	r3, #3
 800199a:	f200 8147 	bhi.w	8001c2c <MTIMER_voidSetChannelDirection+0x2a8>
 800199e:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <MTIMER_voidSetChannelDirection+0x20>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	080019b5 	.word	0x080019b5
 80019a8:	08001a67 	.word	0x08001a67
 80019ac:	08001afb 	.word	0x08001afb
 80019b0:	08001b8f 	.word	0x08001b8f
	{
	case TIMER2:
		switch (A_Channel)
 80019b4:	79bb      	ldrb	r3, [r7, #6]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	f200 8130 	bhi.w	8001c1e <MTIMER_voidSetChannelDirection+0x29a>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <MTIMER_voidSetChannelDirection+0x40>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019f7 	.word	0x080019f7
 80019cc:	08001a1d 	.word	0x08001a1d
 80019d0:	08001a3f 	.word	0x08001a3f
		{
		case CHANNEL1:
			TIM2->CCMR1 &= ~(TWO_BIT_MASK << CCMR1_CC1S);
 80019d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019de:	f023 0303 	bic.w	r3, r3, #3
 80019e2:	6193      	str	r3, [r2, #24]
			TIM2->CCMR1 |=  (A_Direction << CCMR1_CC1S);
 80019e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	797b      	ldrb	r3, [r7, #5]
 80019ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019f0:	4313      	orrs	r3, r2
 80019f2:	618b      	str	r3, [r1, #24]
			break;
 80019f4:	e036      	b.n	8001a64 <MTIMER_voidSetChannelDirection+0xe0>
		case CHANNEL2:
			TIM2->CCMR1 &= ~(TWO_BIT_MASK << CCMR1_CC2S);
 80019f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a04:	6193      	str	r3, [r2, #24]
			TIM2->CCMR1 |=  (A_Direction << CCMR1_CC2S);
 8001a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	797a      	ldrb	r2, [r7, #5]
 8001a0e:	0212      	lsls	r2, r2, #8
 8001a10:	4611      	mov	r1, r2
 8001a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a16:	430b      	orrs	r3, r1
 8001a18:	6193      	str	r3, [r2, #24]
			break;
 8001a1a:	e023      	b.n	8001a64 <MTIMER_voidSetChannelDirection+0xe0>
		case CHANNEL3:
			TIM2->CCMR2 &= ~(TWO_BIT_MASK << CCMR2_CC3S);
 8001a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a26:	f023 0303 	bic.w	r3, r3, #3
 8001a2a:	61d3      	str	r3, [r2, #28]
			TIM2->CCMR2 |=  (A_Direction << CCMR2_CC3S);
 8001a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	797b      	ldrb	r3, [r7, #5]
 8001a34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61cb      	str	r3, [r1, #28]
			break;
 8001a3c:	e012      	b.n	8001a64 <MTIMER_voidSetChannelDirection+0xe0>
		case CHANNEL4:
			TIM2->CCMR2 &= ~(TWO_BIT_MASK << CCMR2_CC4S);
 8001a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a4c:	61d3      	str	r3, [r2, #28]
			TIM2->CCMR2 |=  (A_Direction << CCMR2_CC4S);
 8001a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	797a      	ldrb	r2, [r7, #5]
 8001a56:	0212      	lsls	r2, r2, #8
 8001a58:	4611      	mov	r1, r2
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	61d3      	str	r3, [r2, #28]
			break;
 8001a62:	bf00      	nop
		}
		break;
 8001a64:	e0db      	b.n	8001c1e <MTIMER_voidSetChannelDirection+0x29a>
	case TIMER3:
		switch (A_Channel)
 8001a66:	79bb      	ldrb	r3, [r7, #6]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	f200 80d9 	bhi.w	8001c22 <MTIMER_voidSetChannelDirection+0x29e>
 8001a70:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <MTIMER_voidSetChannelDirection+0xf4>)
 8001a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001aa3 	.word	0x08001aa3
 8001a80:	08001ac1 	.word	0x08001ac1
 8001a84:	08001adb 	.word	0x08001adb
		{
		case CHANNEL1:
			TIM3->CCMR1 &= ~(TWO_BIT_MASK << CCMR1_CC1S);
 8001a88:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a6a      	ldr	r2, [pc, #424]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001a8e:	f023 0303 	bic.w	r3, r3, #3
 8001a92:	6193      	str	r3, [r2, #24]
			TIM3->CCMR1 |=  (A_Direction << CCMR1_CC1S);
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	4967      	ldr	r1, [pc, #412]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	618b      	str	r3, [r1, #24]
			break;
 8001aa0:	e02a      	b.n	8001af8 <MTIMER_voidSetChannelDirection+0x174>
		case CHANNEL2:
			TIM3->CCMR1 &= ~(TWO_BIT_MASK << CCMR1_CC2S);
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	4a64      	ldr	r2, [pc, #400]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aac:	6193      	str	r3, [r2, #24]
			TIM3->CCMR1 |=  (A_Direction << CCMR1_CC2S);
 8001aae:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	797a      	ldrb	r2, [r7, #5]
 8001ab4:	0212      	lsls	r2, r2, #8
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4a5f      	ldr	r2, [pc, #380]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001aba:	430b      	orrs	r3, r1
 8001abc:	6193      	str	r3, [r2, #24]
			break;
 8001abe:	e01b      	b.n	8001af8 <MTIMER_voidSetChannelDirection+0x174>
		case CHANNEL3:
			TIM3->CCMR2 &= ~(TWO_BIT_MASK << CCMR2_CC3S);
 8001ac0:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	4a5c      	ldr	r2, [pc, #368]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	61d3      	str	r3, [r2, #28]
			TIM3->CCMR2 |=  (A_Direction << CCMR2_CC3S);
 8001acc:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001ace:	69da      	ldr	r2, [r3, #28]
 8001ad0:	797b      	ldrb	r3, [r7, #5]
 8001ad2:	4959      	ldr	r1, [pc, #356]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61cb      	str	r3, [r1, #28]
			break;
 8001ad8:	e00e      	b.n	8001af8 <MTIMER_voidSetChannelDirection+0x174>
		case CHANNEL4:
			TIM3->CCMR2 &= ~(TWO_BIT_MASK << CCMR2_CC4S);
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ae4:	61d3      	str	r3, [r2, #28]
			TIM3->CCMR2 |=  (A_Direction << CCMR2_CC4S);
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	797a      	ldrb	r2, [r7, #5]
 8001aec:	0212      	lsls	r2, r2, #8
 8001aee:	4611      	mov	r1, r2
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <MTIMER_voidSetChannelDirection+0x2b4>)
 8001af2:	430b      	orrs	r3, r1
 8001af4:	61d3      	str	r3, [r2, #28]
			break;
 8001af6:	bf00      	nop
		}
		break;
 8001af8:	e093      	b.n	8001c22 <MTIMER_voidSetChannelDirection+0x29e>
	case TIMER4:
		switch (A_Channel)
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	f200 8091 	bhi.w	8001c26 <MTIMER_voidSetChannelDirection+0x2a2>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <MTIMER_voidSetChannelDirection+0x188>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b1d 	.word	0x08001b1d
 8001b10:	08001b37 	.word	0x08001b37
 8001b14:	08001b55 	.word	0x08001b55
 8001b18:	08001b6f 	.word	0x08001b6f
		{
		case CHANNEL1:
			TIM4->CCMR1 &= ~(TWO_BIT_MASK << CCMR1_CC1S);
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a46      	ldr	r2, [pc, #280]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b22:	f023 0303 	bic.w	r3, r3, #3
 8001b26:	6193      	str	r3, [r2, #24]
			TIM4->CCMR1 |=  (A_Direction << CCMR1_CC1S);
 8001b28:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	797b      	ldrb	r3, [r7, #5]
 8001b2e:	4943      	ldr	r1, [pc, #268]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	618b      	str	r3, [r1, #24]
			break;
 8001b34:	e02a      	b.n	8001b8c <MTIMER_voidSetChannelDirection+0x208>
		case CHANNEL2:
			TIM4->CCMR1 &= ~(TWO_BIT_MASK << CCMR1_CC2S);
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4a40      	ldr	r2, [pc, #256]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b40:	6193      	str	r3, [r2, #24]
			TIM4->CCMR1 |=  (A_Direction << CCMR1_CC2S);
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	797a      	ldrb	r2, [r7, #5]
 8001b48:	0212      	lsls	r2, r2, #8
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	6193      	str	r3, [r2, #24]
			break;
 8001b52:	e01b      	b.n	8001b8c <MTIMER_voidSetChannelDirection+0x208>
		case CHANNEL3:
			TIM4->CCMR2 &= ~(TWO_BIT_MASK << CCMR2_CC3S);
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	4a38      	ldr	r2, [pc, #224]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b5a:	f023 0303 	bic.w	r3, r3, #3
 8001b5e:	61d3      	str	r3, [r2, #28]
			TIM4->CCMR2 |=  (A_Direction << CCMR2_CC3S);
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b62:	69da      	ldr	r2, [r3, #28]
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	4935      	ldr	r1, [pc, #212]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61cb      	str	r3, [r1, #28]
			break;
 8001b6c:	e00e      	b.n	8001b8c <MTIMER_voidSetChannelDirection+0x208>
		case CHANNEL4:
			TIM4->CCMR2 &= ~(TWO_BIT_MASK << CCMR2_CC4S);
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b78:	61d3      	str	r3, [r2, #28]
			TIM4->CCMR2 |=  (A_Direction << CCMR2_CC4S);
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	797a      	ldrb	r2, [r7, #5]
 8001b80:	0212      	lsls	r2, r2, #8
 8001b82:	4611      	mov	r1, r2
 8001b84:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <MTIMER_voidSetChannelDirection+0x2b8>)
 8001b86:	430b      	orrs	r3, r1
 8001b88:	61d3      	str	r3, [r2, #28]
			break;
 8001b8a:	bf00      	nop
		}
		break;
 8001b8c:	e04b      	b.n	8001c26 <MTIMER_voidSetChannelDirection+0x2a2>
	case TIMER5:
		switch (A_Channel)
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d849      	bhi.n	8001c2a <MTIMER_voidSetChannelDirection+0x2a6>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <MTIMER_voidSetChannelDirection+0x218>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bc7 	.word	0x08001bc7
 8001ba4:	08001be5 	.word	0x08001be5
 8001ba8:	08001bff 	.word	0x08001bff
		{
		case CHANNEL1:
			TIM5->CCMR1 &= ~(TWO_BIT_MASK << CCMR1_CC1S);
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	6193      	str	r3, [r2, #24]
			TIM5->CCMR1 |=  (A_Direction << CCMR1_CC1S);
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bba:	699a      	ldr	r2, [r3, #24]
 8001bbc:	797b      	ldrb	r3, [r7, #5]
 8001bbe:	4920      	ldr	r1, [pc, #128]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	618b      	str	r3, [r1, #24]
			break;
 8001bc4:	e02a      	b.n	8001c1c <MTIMER_voidSetChannelDirection+0x298>
		case CHANNEL2:
			TIM5->CCMR1 &= ~(TWO_BIT_MASK << CCMR1_CC2S);
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bd0:	6193      	str	r3, [r2, #24]
			TIM5->CCMR1 |=  (A_Direction << CCMR1_CC2S);
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	797a      	ldrb	r2, [r7, #5]
 8001bd8:	0212      	lsls	r2, r2, #8
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bde:	430b      	orrs	r3, r1
 8001be0:	6193      	str	r3, [r2, #24]
			break;
 8001be2:	e01b      	b.n	8001c1c <MTIMER_voidSetChannelDirection+0x298>
		case CHANNEL3:
			TIM5->CCMR2 &= ~(TWO_BIT_MASK << CCMR2_CC3S);
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	61d3      	str	r3, [r2, #28]
			TIM5->CCMR2 |=  (A_Direction << CCMR2_CC3S);
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bf2:	69da      	ldr	r2, [r3, #28]
 8001bf4:	797b      	ldrb	r3, [r7, #5]
 8001bf6:	4912      	ldr	r1, [pc, #72]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61cb      	str	r3, [r1, #28]
			break;
 8001bfc:	e00e      	b.n	8001c1c <MTIMER_voidSetChannelDirection+0x298>
		case CHANNEL4:
			TIM5->CCMR2 &= ~(TWO_BIT_MASK << CCMR2_CC4S);
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c08:	61d3      	str	r3, [r2, #28]
			TIM5->CCMR2 |=  (A_Direction << CCMR2_CC4S);
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	797a      	ldrb	r2, [r7, #5]
 8001c10:	0212      	lsls	r2, r2, #8
 8001c12:	4611      	mov	r1, r2
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <MTIMER_voidSetChannelDirection+0x2bc>)
 8001c16:	430b      	orrs	r3, r1
 8001c18:	61d3      	str	r3, [r2, #28]
			break;
 8001c1a:	bf00      	nop
		}
		break;
 8001c1c:	e005      	b.n	8001c2a <MTIMER_voidSetChannelDirection+0x2a6>
		break;
 8001c1e:	bf00      	nop
 8001c20:	e004      	b.n	8001c2c <MTIMER_voidSetChannelDirection+0x2a8>
		break;
 8001c22:	bf00      	nop
 8001c24:	e002      	b.n	8001c2c <MTIMER_voidSetChannelDirection+0x2a8>
		break;
 8001c26:	bf00      	nop
 8001c28:	e000      	b.n	8001c2c <MTIMER_voidSetChannelDirection+0x2a8>
		break;
 8001c2a:	bf00      	nop
	}
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40000c00 	.word	0x40000c00

08001c44 <MTIMER_voidSetChannelInputPolarity>:

void MTIMER_voidSetChannelInputPolarity (TIMERS_t A_Timer, CHANNELS_t A_Channel, CHANNEL_POL_t A_Polarity)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	71bb      	strb	r3, [r7, #6]
 8001c52:	4613      	mov	r3, r2
 8001c54:	717b      	strb	r3, [r7, #5]
	switch (A_Timer)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	f200 8419 	bhi.w	8002490 <MTIMER_voidSetChannelInputPolarity+0x84c>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <MTIMER_voidSetChannelInputPolarity+0x20>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001ec7 	.word	0x08001ec7
 8001c6c:	080020ab 	.word	0x080020ab
 8001c70:	08002297 	.word	0x08002297
	{
	case TIMER2:
		switch (A_Channel)
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	f200 8402 	bhi.w	8002482 <MTIMER_voidSetChannelInputPolarity+0x83e>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <MTIMER_voidSetChannelInputPolarity+0x40>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001d21 	.word	0x08001d21
 8001c8c:	08001dad 	.word	0x08001dad
 8001c90:	08001e39 	.word	0x08001e39
		{
		case CHANNEL1:
			switch (A_Polarity)
 8001c94:	797b      	ldrb	r3, [r7, #5]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d028      	beq.n	8001cec <MTIMER_voidSetChannelInputPolarity+0xa8>
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	dc37      	bgt.n	8001d0e <MTIMER_voidSetChannelInputPolarity+0xca>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <MTIMER_voidSetChannelInputPolarity+0x64>
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d011      	beq.n	8001cca <MTIMER_voidSetChannelInputPolarity+0x86>
 8001ca6:	e032      	b.n	8001d0e <MTIMER_voidSetChannelInputPolarity+0xca>
			{
			case RISING_EDGE:
				CLR_BIT(TIM2->CCER, CCER_CC1P);
 8001ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb2:	f023 0302 	bic.w	r3, r3, #2
 8001cb6:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM2->CCER, CCER_CC1NP);
 8001cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc2:	f023 0308 	bic.w	r3, r3, #8
 8001cc6:	6213      	str	r3, [r2, #32]
				break;
 8001cc8:	e021      	b.n	8001d0e <MTIMER_voidSetChannelInputPolarity+0xca>
			case FALLING_EDGE:
				SET_BIT(TIM2->CCER, CCER_CC1P);
 8001cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM2->CCER, CCER_CC1NP);
 8001cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce4:	f023 0308 	bic.w	r3, r3, #8
 8001ce8:	6213      	str	r3, [r2, #32]
				break;
 8001cea:	e010      	b.n	8001d0e <MTIMER_voidSetChannelInputPolarity+0xca>
			case BOTH_EDGES:
				SET_BIT(TIM2->CCER, CCER_CC1P);
 8001cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM2->CCER, CCER_CC1NP);
 8001cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	6213      	str	r3, [r2, #32]
				break;
 8001d0c:	bf00      	nop
			}
			SET_BIT(TIM2->CCER, CCER_CC1E);
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6213      	str	r3, [r2, #32]
			break;
 8001d1e:	e0d1      	b.n	8001ec4 <MTIMER_voidSetChannelInputPolarity+0x280>
		case CHANNEL2:
			switch (A_Polarity)
 8001d20:	797b      	ldrb	r3, [r7, #5]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d028      	beq.n	8001d78 <MTIMER_voidSetChannelInputPolarity+0x134>
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	dc37      	bgt.n	8001d9a <MTIMER_voidSetChannelInputPolarity+0x156>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <MTIMER_voidSetChannelInputPolarity+0xf0>
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d011      	beq.n	8001d56 <MTIMER_voidSetChannelInputPolarity+0x112>
 8001d32:	e032      	b.n	8001d9a <MTIMER_voidSetChannelInputPolarity+0x156>
			{
			case RISING_EDGE:
				CLR_BIT(TIM2->CCER, CCER_CC2P);
 8001d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3e:	f023 0320 	bic.w	r3, r3, #32
 8001d42:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM2->CCER, CCER_CC2NP);
 8001d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d52:	6213      	str	r3, [r2, #32]
				break;
 8001d54:	e021      	b.n	8001d9a <MTIMER_voidSetChannelInputPolarity+0x156>
			case FALLING_EDGE:
				SET_BIT(TIM2->CCER, CCER_CC2P);
 8001d56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM2->CCER, CCER_CC2NP);
 8001d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d74:	6213      	str	r3, [r2, #32]
				break;
 8001d76:	e010      	b.n	8001d9a <MTIMER_voidSetChannelInputPolarity+0x156>
			case BOTH_EDGES:
				SET_BIT(TIM2->CCER, CCER_CC2P);
 8001d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d82:	f043 0320 	orr.w	r3, r3, #32
 8001d86:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM2->CCER, CCER_CC2NP);
 8001d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d96:	6213      	str	r3, [r2, #32]
				break;
 8001d98:	bf00      	nop
			}
			SET_BIT(TIM2->CCER, CCER_CC2E);
 8001d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da4:	f043 0310 	orr.w	r3, r3, #16
 8001da8:	6213      	str	r3, [r2, #32]
			break;
 8001daa:	e08b      	b.n	8001ec4 <MTIMER_voidSetChannelInputPolarity+0x280>
		case CHANNEL3:
			switch (A_Polarity)
 8001dac:	797b      	ldrb	r3, [r7, #5]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d028      	beq.n	8001e04 <MTIMER_voidSetChannelInputPolarity+0x1c0>
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	dc37      	bgt.n	8001e26 <MTIMER_voidSetChannelInputPolarity+0x1e2>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <MTIMER_voidSetChannelInputPolarity+0x17c>
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d011      	beq.n	8001de2 <MTIMER_voidSetChannelInputPolarity+0x19e>
 8001dbe:	e032      	b.n	8001e26 <MTIMER_voidSetChannelInputPolarity+0x1e2>
			{
			case RISING_EDGE:
				CLR_BIT(TIM2->CCER, CCER_CC3P);
 8001dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dce:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM2->CCER, CCER_CC3NP);
 8001dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dde:	6213      	str	r3, [r2, #32]
				break;
 8001de0:	e021      	b.n	8001e26 <MTIMER_voidSetChannelInputPolarity+0x1e2>
			case FALLING_EDGE:
				SET_BIT(TIM2->CCER, CCER_CC3P);
 8001de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df0:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM2->CCER, CCER_CC3NP);
 8001df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e00:	6213      	str	r3, [r2, #32]
				break;
 8001e02:	e010      	b.n	8001e26 <MTIMER_voidSetChannelInputPolarity+0x1e2>
			case BOTH_EDGES:
				SET_BIT(TIM2->CCER, CCER_CC3P);
 8001e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e12:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM2->CCER, CCER_CC3NP);
 8001e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e22:	6213      	str	r3, [r2, #32]
				break;
 8001e24:	bf00      	nop
			}
			SET_BIT(TIM2->CCER, CCER_CC3E);
 8001e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6213      	str	r3, [r2, #32]
			break;
 8001e36:	e045      	b.n	8001ec4 <MTIMER_voidSetChannelInputPolarity+0x280>
		case CHANNEL4:
			switch (A_Polarity)
 8001e38:	797b      	ldrb	r3, [r7, #5]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d028      	beq.n	8001e90 <MTIMER_voidSetChannelInputPolarity+0x24c>
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	dc37      	bgt.n	8001eb2 <MTIMER_voidSetChannelInputPolarity+0x26e>
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <MTIMER_voidSetChannelInputPolarity+0x208>
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d011      	beq.n	8001e6e <MTIMER_voidSetChannelInputPolarity+0x22a>
 8001e4a:	e032      	b.n	8001eb2 <MTIMER_voidSetChannelInputPolarity+0x26e>
			{
			case RISING_EDGE:
				CLR_BIT(TIM2->CCER, CCER_CC4P);
 8001e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e5a:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM2->CCER, CCER_CC4NP);
 8001e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e6a:	6213      	str	r3, [r2, #32]
				break;
 8001e6c:	e021      	b.n	8001eb2 <MTIMER_voidSetChannelInputPolarity+0x26e>
			case FALLING_EDGE:
				SET_BIT(TIM2->CCER, CCER_CC4P);
 8001e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e7c:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM2->CCER, CCER_CC4NP);
 8001e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e8c:	6213      	str	r3, [r2, #32]
				break;
 8001e8e:	e010      	b.n	8001eb2 <MTIMER_voidSetChannelInputPolarity+0x26e>
			case BOTH_EDGES:
				SET_BIT(TIM2->CCER, CCER_CC4P);
 8001e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e9e:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM2->CCER, CCER_CC4NP);
 8001ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eae:	6213      	str	r3, [r2, #32]
				break;
 8001eb0:	bf00      	nop
			}
			SET_BIT(TIM2->CCER, CCER_CC4E);
 8001eb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec0:	6213      	str	r3, [r2, #32]
			break;
 8001ec2:	bf00      	nop
		}
		break;
 8001ec4:	e2dd      	b.n	8002482 <MTIMER_voidSetChannelInputPolarity+0x83e>
	case TIMER3:
		switch (A_Channel)
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	f200 82db 	bhi.w	8002486 <MTIMER_voidSetChannelInputPolarity+0x842>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <MTIMER_voidSetChannelInputPolarity+0x294>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001f59 	.word	0x08001f59
 8001ee0:	08001fc9 	.word	0x08001fc9
 8001ee4:	08002039 	.word	0x08002039
		{
		case CHANNEL1:
			switch (A_Polarity)
 8001ee8:	797b      	ldrb	r3, [r7, #5]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d020      	beq.n	8001f30 <MTIMER_voidSetChannelInputPolarity+0x2ec>
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	dc2b      	bgt.n	8001f4a <MTIMER_voidSetChannelInputPolarity+0x306>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <MTIMER_voidSetChannelInputPolarity+0x2b8>
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d00d      	beq.n	8001f16 <MTIMER_voidSetChannelInputPolarity+0x2d2>
 8001efa:	e026      	b.n	8001f4a <MTIMER_voidSetChannelInputPolarity+0x306>
			{
			case RISING_EDGE:
				CLR_BIT(TIM3->CCER, CCER_CC1P);
 8001efc:	4b94      	ldr	r3, [pc, #592]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a93      	ldr	r2, [pc, #588]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f02:	f023 0302 	bic.w	r3, r3, #2
 8001f06:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM3->CCER, CCER_CC1NP);
 8001f08:	4b91      	ldr	r3, [pc, #580]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a90      	ldr	r2, [pc, #576]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f0e:	f023 0308 	bic.w	r3, r3, #8
 8001f12:	6213      	str	r3, [r2, #32]
				break;
 8001f14:	e019      	b.n	8001f4a <MTIMER_voidSetChannelInputPolarity+0x306>
			case FALLING_EDGE:
				SET_BIT(TIM3->CCER, CCER_CC1P);
 8001f16:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a8d      	ldr	r2, [pc, #564]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM3->CCER, CCER_CC1NP);
 8001f22:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f28:	f023 0308 	bic.w	r3, r3, #8
 8001f2c:	6213      	str	r3, [r2, #32]
				break;
 8001f2e:	e00c      	b.n	8001f4a <MTIMER_voidSetChannelInputPolarity+0x306>
			case BOTH_EDGES:
				SET_BIT(TIM3->CCER, CCER_CC1P);
 8001f30:	4b87      	ldr	r3, [pc, #540]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a86      	ldr	r2, [pc, #536]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM3->CCER, CCER_CC1NP);
 8001f3c:	4b84      	ldr	r3, [pc, #528]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a83      	ldr	r2, [pc, #524]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	6213      	str	r3, [r2, #32]
				break;
 8001f48:	bf00      	nop
			}
			SET_BIT(TIM3->CCER, CCER_CC1E);
 8001f4a:	4b81      	ldr	r3, [pc, #516]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a80      	ldr	r2, [pc, #512]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
			break;
 8001f56:	e0a7      	b.n	80020a8 <MTIMER_voidSetChannelInputPolarity+0x464>
		case CHANNEL2:
			switch (A_Polarity)
 8001f58:	797b      	ldrb	r3, [r7, #5]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d020      	beq.n	8001fa0 <MTIMER_voidSetChannelInputPolarity+0x35c>
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	dc2b      	bgt.n	8001fba <MTIMER_voidSetChannelInputPolarity+0x376>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <MTIMER_voidSetChannelInputPolarity+0x328>
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d00d      	beq.n	8001f86 <MTIMER_voidSetChannelInputPolarity+0x342>
 8001f6a:	e026      	b.n	8001fba <MTIMER_voidSetChannelInputPolarity+0x376>
			{
			case RISING_EDGE:
				CLR_BIT(TIM3->CCER, CCER_CC2P);
 8001f6c:	4b78      	ldr	r3, [pc, #480]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a77      	ldr	r2, [pc, #476]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f72:	f023 0320 	bic.w	r3, r3, #32
 8001f76:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM3->CCER, CCER_CC2NP);
 8001f78:	4b75      	ldr	r3, [pc, #468]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a74      	ldr	r2, [pc, #464]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f82:	6213      	str	r3, [r2, #32]
				break;
 8001f84:	e019      	b.n	8001fba <MTIMER_voidSetChannelInputPolarity+0x376>
			case FALLING_EDGE:
				SET_BIT(TIM3->CCER, CCER_CC2P);
 8001f86:	4b72      	ldr	r3, [pc, #456]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a71      	ldr	r2, [pc, #452]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f8c:	f043 0320 	orr.w	r3, r3, #32
 8001f90:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM3->CCER, CCER_CC2NP);
 8001f92:	4b6f      	ldr	r3, [pc, #444]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a6e      	ldr	r2, [pc, #440]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f9c:	6213      	str	r3, [r2, #32]
				break;
 8001f9e:	e00c      	b.n	8001fba <MTIMER_voidSetChannelInputPolarity+0x376>
			case BOTH_EDGES:
				SET_BIT(TIM3->CCER, CCER_CC2P);
 8001fa0:	4b6b      	ldr	r3, [pc, #428]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a6a      	ldr	r2, [pc, #424]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fa6:	f043 0320 	orr.w	r3, r3, #32
 8001faa:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM3->CCER, CCER_CC2NP);
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a67      	ldr	r2, [pc, #412]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb6:	6213      	str	r3, [r2, #32]
				break;
 8001fb8:	bf00      	nop
			}
			SET_BIT(TIM3->CCER, CCER_CC2E);
 8001fba:	4b65      	ldr	r3, [pc, #404]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a64      	ldr	r2, [pc, #400]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6213      	str	r3, [r2, #32]
			break;
 8001fc6:	e06f      	b.n	80020a8 <MTIMER_voidSetChannelInputPolarity+0x464>
		case CHANNEL3:
			switch (A_Polarity)
 8001fc8:	797b      	ldrb	r3, [r7, #5]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d020      	beq.n	8002010 <MTIMER_voidSetChannelInputPolarity+0x3cc>
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	dc2b      	bgt.n	800202a <MTIMER_voidSetChannelInputPolarity+0x3e6>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <MTIMER_voidSetChannelInputPolarity+0x398>
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d00d      	beq.n	8001ff6 <MTIMER_voidSetChannelInputPolarity+0x3b2>
 8001fda:	e026      	b.n	800202a <MTIMER_voidSetChannelInputPolarity+0x3e6>
			{
			case RISING_EDGE:
				CLR_BIT(TIM3->CCER, CCER_CC3P);
 8001fdc:	4b5c      	ldr	r3, [pc, #368]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a5b      	ldr	r2, [pc, #364]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fe2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fe6:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM3->CCER, CCER_CC3NP);
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a58      	ldr	r2, [pc, #352]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff2:	6213      	str	r3, [r2, #32]
				break;
 8001ff4:	e019      	b.n	800202a <MTIMER_voidSetChannelInputPolarity+0x3e6>
			case FALLING_EDGE:
				SET_BIT(TIM3->CCER, CCER_CC3P);
 8001ff6:	4b56      	ldr	r3, [pc, #344]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a55      	ldr	r2, [pc, #340]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8001ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002000:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM3->CCER, CCER_CC3NP);
 8002002:	4b53      	ldr	r3, [pc, #332]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a52      	ldr	r2, [pc, #328]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800200c:	6213      	str	r3, [r2, #32]
				break;
 800200e:	e00c      	b.n	800202a <MTIMER_voidSetChannelInputPolarity+0x3e6>
			case BOTH_EDGES:
				SET_BIT(TIM3->CCER, CCER_CC3P);
 8002010:	4b4f      	ldr	r3, [pc, #316]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201a:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM3->CCER, CCER_CC3NP);
 800201c:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002022:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002026:	6213      	str	r3, [r2, #32]
				break;
 8002028:	bf00      	nop
			}
			SET_BIT(TIM3->CCER, CCER_CC3E);
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a48      	ldr	r2, [pc, #288]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6213      	str	r3, [r2, #32]
			break;
 8002036:	e037      	b.n	80020a8 <MTIMER_voidSetChannelInputPolarity+0x464>
		case CHANNEL4:
			switch (A_Polarity)
 8002038:	797b      	ldrb	r3, [r7, #5]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d020      	beq.n	8002080 <MTIMER_voidSetChannelInputPolarity+0x43c>
 800203e:	2b03      	cmp	r3, #3
 8002040:	dc2b      	bgt.n	800209a <MTIMER_voidSetChannelInputPolarity+0x456>
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <MTIMER_voidSetChannelInputPolarity+0x408>
 8002046:	2b01      	cmp	r3, #1
 8002048:	d00d      	beq.n	8002066 <MTIMER_voidSetChannelInputPolarity+0x422>
 800204a:	e026      	b.n	800209a <MTIMER_voidSetChannelInputPolarity+0x456>
			{
			case RISING_EDGE:
				CLR_BIT(TIM3->CCER, CCER_CC4P);
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a3f      	ldr	r2, [pc, #252]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002056:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM3->CCER, CCER_CC4NP);
 8002058:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a3c      	ldr	r2, [pc, #240]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 800205e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002062:	6213      	str	r3, [r2, #32]
				break;
 8002064:	e019      	b.n	800209a <MTIMER_voidSetChannelInputPolarity+0x456>
			case FALLING_EDGE:
				SET_BIT(TIM3->CCER, CCER_CC4P);
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a39      	ldr	r2, [pc, #228]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 800206c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002070:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM3->CCER, CCER_CC4NP);
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a36      	ldr	r2, [pc, #216]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800207c:	6213      	str	r3, [r2, #32]
				break;
 800207e:	e00c      	b.n	800209a <MTIMER_voidSetChannelInputPolarity+0x456>
			case BOTH_EDGES:
				SET_BIT(TIM3->CCER, CCER_CC4P);
 8002080:	4b33      	ldr	r3, [pc, #204]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a32      	ldr	r2, [pc, #200]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800208a:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM3->CCER, CCER_CC4NP);
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 8002092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002096:	6213      	str	r3, [r2, #32]
				break;
 8002098:	bf00      	nop
			}
			SET_BIT(TIM3->CCER, CCER_CC4E);
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <MTIMER_voidSetChannelInputPolarity+0x50c>)
 80020a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a4:	6213      	str	r3, [r2, #32]
			break;
 80020a6:	bf00      	nop
		}
		break;
 80020a8:	e1ed      	b.n	8002486 <MTIMER_voidSetChannelInputPolarity+0x842>
	case TIMER4:
		switch (A_Channel)
 80020aa:	79bb      	ldrb	r3, [r7, #6]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	f200 81eb 	bhi.w	800248a <MTIMER_voidSetChannelInputPolarity+0x846>
 80020b4:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <MTIMER_voidSetChannelInputPolarity+0x478>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	0800213d 	.word	0x0800213d
 80020c4:	080021b5 	.word	0x080021b5
 80020c8:	08002225 	.word	0x08002225
		{
		case CHANNEL1:
			switch (A_Polarity)
 80020cc:	797b      	ldrb	r3, [r7, #5]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d020      	beq.n	8002114 <MTIMER_voidSetChannelInputPolarity+0x4d0>
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	dc2b      	bgt.n	800212e <MTIMER_voidSetChannelInputPolarity+0x4ea>
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <MTIMER_voidSetChannelInputPolarity+0x49c>
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d00d      	beq.n	80020fa <MTIMER_voidSetChannelInputPolarity+0x4b6>
 80020de:	e026      	b.n	800212e <MTIMER_voidSetChannelInputPolarity+0x4ea>
			{
			case RISING_EDGE:
				CLR_BIT(TIM4->CCER, CCER_CC1P);
 80020e0:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 80020e6:	f023 0302 	bic.w	r3, r3, #2
 80020ea:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM4->CCER, CCER_CC1NP);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a18      	ldr	r2, [pc, #96]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 80020f2:	f023 0308 	bic.w	r3, r3, #8
 80020f6:	6213      	str	r3, [r2, #32]
				break;
 80020f8:	e019      	b.n	800212e <MTIMER_voidSetChannelInputPolarity+0x4ea>
			case FALLING_EDGE:
				SET_BIT(TIM4->CCER, CCER_CC1P);
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM4->CCER, CCER_CC1NP);
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 800210c:	f023 0308 	bic.w	r3, r3, #8
 8002110:	6213      	str	r3, [r2, #32]
				break;
 8002112:	e00c      	b.n	800212e <MTIMER_voidSetChannelInputPolarity+0x4ea>
			case BOTH_EDGES:
				SET_BIT(TIM4->CCER, CCER_CC1P);
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM4->CCER, CCER_CC1NP);
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	6213      	str	r3, [r2, #32]
				break;
 800212c:	bf00      	nop
			}
			SET_BIT(TIM4->CCER, CCER_CC1E);
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <MTIMER_voidSetChannelInputPolarity+0x510>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
			break;
 800213a:	e0ab      	b.n	8002294 <MTIMER_voidSetChannelInputPolarity+0x650>
		case CHANNEL2:
			switch (A_Polarity)
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d024      	beq.n	800218c <MTIMER_voidSetChannelInputPolarity+0x548>
 8002142:	2b03      	cmp	r3, #3
 8002144:	dc2f      	bgt.n	80021a6 <MTIMER_voidSetChannelInputPolarity+0x562>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <MTIMER_voidSetChannelInputPolarity+0x514>
 800214a:	2b01      	cmp	r3, #1
 800214c:	d011      	beq.n	8002172 <MTIMER_voidSetChannelInputPolarity+0x52e>
 800214e:	e02a      	b.n	80021a6 <MTIMER_voidSetChannelInputPolarity+0x562>
 8002150:	40000400 	.word	0x40000400
 8002154:	40000800 	.word	0x40000800
			{
			case RISING_EDGE:
				CLR_BIT(TIM4->CCER, CCER_CC2P);
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a93      	ldr	r2, [pc, #588]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800215e:	f023 0320 	bic.w	r3, r3, #32
 8002162:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM4->CCER, CCER_CC2NP);
 8002164:	4b91      	ldr	r3, [pc, #580]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a90      	ldr	r2, [pc, #576]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800216a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800216e:	6213      	str	r3, [r2, #32]
				break;
 8002170:	e019      	b.n	80021a6 <MTIMER_voidSetChannelInputPolarity+0x562>
			case FALLING_EDGE:
				SET_BIT(TIM4->CCER, CCER_CC2P);
 8002172:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a8d      	ldr	r2, [pc, #564]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM4->CCER, CCER_CC2NP);
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a8a      	ldr	r2, [pc, #552]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002188:	6213      	str	r3, [r2, #32]
				break;
 800218a:	e00c      	b.n	80021a6 <MTIMER_voidSetChannelInputPolarity+0x562>
			case BOTH_EDGES:
				SET_BIT(TIM4->CCER, CCER_CC2P);
 800218c:	4b87      	ldr	r3, [pc, #540]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a86      	ldr	r2, [pc, #536]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002192:	f043 0320 	orr.w	r3, r3, #32
 8002196:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM4->CCER, CCER_CC2NP);
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a83      	ldr	r2, [pc, #524]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800219e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a2:	6213      	str	r3, [r2, #32]
				break;
 80021a4:	bf00      	nop
			}
			SET_BIT(TIM4->CCER, CCER_CC2E);
 80021a6:	4b81      	ldr	r3, [pc, #516]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a80      	ldr	r2, [pc, #512]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021ac:	f043 0310 	orr.w	r3, r3, #16
 80021b0:	6213      	str	r3, [r2, #32]
			break;
 80021b2:	e06f      	b.n	8002294 <MTIMER_voidSetChannelInputPolarity+0x650>
		case CHANNEL3:
			switch (A_Polarity)
 80021b4:	797b      	ldrb	r3, [r7, #5]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d020      	beq.n	80021fc <MTIMER_voidSetChannelInputPolarity+0x5b8>
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	dc2b      	bgt.n	8002216 <MTIMER_voidSetChannelInputPolarity+0x5d2>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <MTIMER_voidSetChannelInputPolarity+0x584>
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d00d      	beq.n	80021e2 <MTIMER_voidSetChannelInputPolarity+0x59e>
 80021c6:	e026      	b.n	8002216 <MTIMER_voidSetChannelInputPolarity+0x5d2>
			{
			case RISING_EDGE:
				CLR_BIT(TIM4->CCER, CCER_CC3P);
 80021c8:	4b78      	ldr	r3, [pc, #480]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a77      	ldr	r2, [pc, #476]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021d2:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM4->CCER, CCER_CC3NP);
 80021d4:	4b75      	ldr	r3, [pc, #468]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4a74      	ldr	r2, [pc, #464]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021de:	6213      	str	r3, [r2, #32]
				break;
 80021e0:	e019      	b.n	8002216 <MTIMER_voidSetChannelInputPolarity+0x5d2>
			case FALLING_EDGE:
				SET_BIT(TIM4->CCER, CCER_CC3P);
 80021e2:	4b72      	ldr	r3, [pc, #456]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a71      	ldr	r2, [pc, #452]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ec:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM4->CCER, CCER_CC3NP);
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021f8:	6213      	str	r3, [r2, #32]
				break;
 80021fa:	e00c      	b.n	8002216 <MTIMER_voidSetChannelInputPolarity+0x5d2>
			case BOTH_EDGES:
				SET_BIT(TIM4->CCER, CCER_CC3P);
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002206:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM4->CCER, CCER_CC3NP);
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a67      	ldr	r2, [pc, #412]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800220e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002212:	6213      	str	r3, [r2, #32]
				break;
 8002214:	bf00      	nop
			}
			SET_BIT(TIM4->CCER, CCER_CC3E);
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a64      	ldr	r2, [pc, #400]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6213      	str	r3, [r2, #32]
			break;
 8002222:	e037      	b.n	8002294 <MTIMER_voidSetChannelInputPolarity+0x650>
		case CHANNEL4:
			switch (A_Polarity)
 8002224:	797b      	ldrb	r3, [r7, #5]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d020      	beq.n	800226c <MTIMER_voidSetChannelInputPolarity+0x628>
 800222a:	2b03      	cmp	r3, #3
 800222c:	dc2b      	bgt.n	8002286 <MTIMER_voidSetChannelInputPolarity+0x642>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <MTIMER_voidSetChannelInputPolarity+0x5f4>
 8002232:	2b01      	cmp	r3, #1
 8002234:	d00d      	beq.n	8002252 <MTIMER_voidSetChannelInputPolarity+0x60e>
 8002236:	e026      	b.n	8002286 <MTIMER_voidSetChannelInputPolarity+0x642>
			{
			case RISING_EDGE:
				CLR_BIT(TIM4->CCER, CCER_CC4P);
 8002238:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4a5b      	ldr	r2, [pc, #364]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800223e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002242:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM4->CCER, CCER_CC4NP);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800224a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800224e:	6213      	str	r3, [r2, #32]
				break;
 8002250:	e019      	b.n	8002286 <MTIMER_voidSetChannelInputPolarity+0x642>
			case FALLING_EDGE:
				SET_BIT(TIM4->CCER, CCER_CC4P);
 8002252:	4b56      	ldr	r3, [pc, #344]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	4a55      	ldr	r2, [pc, #340]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002258:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800225c:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM4->CCER, CCER_CC4NP);
 800225e:	4b53      	ldr	r3, [pc, #332]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4a52      	ldr	r2, [pc, #328]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002264:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002268:	6213      	str	r3, [r2, #32]
				break;
 800226a:	e00c      	b.n	8002286 <MTIMER_voidSetChannelInputPolarity+0x642>
			case BOTH_EDGES:
				SET_BIT(TIM4->CCER, CCER_CC4P);
 800226c:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002276:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM4->CCER, CCER_CC4NP);
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a4b      	ldr	r2, [pc, #300]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800227e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002282:	6213      	str	r3, [r2, #32]
				break;
 8002284:	bf00      	nop
			}
			SET_BIT(TIM4->CCER, CCER_CC4E);
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a48      	ldr	r2, [pc, #288]	; (80023ac <MTIMER_voidSetChannelInputPolarity+0x768>)
 800228c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002290:	6213      	str	r3, [r2, #32]
			break;
 8002292:	bf00      	nop
		}
		break;
 8002294:	e0f9      	b.n	800248a <MTIMER_voidSetChannelInputPolarity+0x846>
	case TIMER5:
		switch (A_Channel)
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	3b01      	subs	r3, #1
 800229a:	2b03      	cmp	r3, #3
 800229c:	f200 80f7 	bhi.w	800248e <MTIMER_voidSetChannelInputPolarity+0x84a>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <MTIMER_voidSetChannelInputPolarity+0x664>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022b9 	.word	0x080022b9
 80022ac:	08002329 	.word	0x08002329
 80022b0:	08002399 	.word	0x08002399
 80022b4:	08002411 	.word	0x08002411
		{
		case CHANNEL1:
			switch (A_Polarity)
 80022b8:	797b      	ldrb	r3, [r7, #5]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d020      	beq.n	8002300 <MTIMER_voidSetChannelInputPolarity+0x6bc>
 80022be:	2b03      	cmp	r3, #3
 80022c0:	dc2b      	bgt.n	800231a <MTIMER_voidSetChannelInputPolarity+0x6d6>
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <MTIMER_voidSetChannelInputPolarity+0x688>
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d00d      	beq.n	80022e6 <MTIMER_voidSetChannelInputPolarity+0x6a2>
 80022ca:	e026      	b.n	800231a <MTIMER_voidSetChannelInputPolarity+0x6d6>
			{
			case RISING_EDGE:
				CLR_BIT(TIM5->CCER, CCER_CC1P);
 80022cc:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a37      	ldr	r2, [pc, #220]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM5->CCER, CCER_CC1NP);
 80022d8:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 80022de:	f023 0308 	bic.w	r3, r3, #8
 80022e2:	6213      	str	r3, [r2, #32]
				break;
 80022e4:	e019      	b.n	800231a <MTIMER_voidSetChannelInputPolarity+0x6d6>
			case FALLING_EDGE:
				SET_BIT(TIM5->CCER, CCER_CC1P);
 80022e6:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a31      	ldr	r2, [pc, #196]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM5->CCER, CCER_CC1NP);
 80022f2:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a2e      	ldr	r2, [pc, #184]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 80022f8:	f023 0308 	bic.w	r3, r3, #8
 80022fc:	6213      	str	r3, [r2, #32]
				break;
 80022fe:	e00c      	b.n	800231a <MTIMER_voidSetChannelInputPolarity+0x6d6>
			case BOTH_EDGES:
				SET_BIT(TIM5->CCER, CCER_CC1P);
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM5->CCER, CCER_CC1NP);
 800230c:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6213      	str	r3, [r2, #32]
				break;
 8002318:	bf00      	nop
			}
			SET_BIT(TIM5->CCER, CCER_CC1E);
 800231a:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6213      	str	r3, [r2, #32]
			break;
 8002326:	e0ab      	b.n	8002480 <MTIMER_voidSetChannelInputPolarity+0x83c>
		case CHANNEL2:
			switch (A_Polarity)
 8002328:	797b      	ldrb	r3, [r7, #5]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d020      	beq.n	8002370 <MTIMER_voidSetChannelInputPolarity+0x72c>
 800232e:	2b03      	cmp	r3, #3
 8002330:	dc2b      	bgt.n	800238a <MTIMER_voidSetChannelInputPolarity+0x746>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <MTIMER_voidSetChannelInputPolarity+0x6f8>
 8002336:	2b01      	cmp	r3, #1
 8002338:	d00d      	beq.n	8002356 <MTIMER_voidSetChannelInputPolarity+0x712>
 800233a:	e026      	b.n	800238a <MTIMER_voidSetChannelInputPolarity+0x746>
			{
			case RISING_EDGE:
				CLR_BIT(TIM5->CCER, CCER_CC2P);
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002342:	f023 0320 	bic.w	r3, r3, #32
 8002346:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM5->CCER, CCER_CC2NP);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 800234e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002352:	6213      	str	r3, [r2, #32]
				break;
 8002354:	e019      	b.n	800238a <MTIMER_voidSetChannelInputPolarity+0x746>
			case FALLING_EDGE:
				SET_BIT(TIM5->CCER, CCER_CC2P);
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 800235c:	f043 0320 	orr.w	r3, r3, #32
 8002360:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM5->CCER, CCER_CC2NP);
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800236c:	6213      	str	r3, [r2, #32]
				break;
 800236e:	e00c      	b.n	800238a <MTIMER_voidSetChannelInputPolarity+0x746>
			case BOTH_EDGES:
				SET_BIT(TIM5->CCER, CCER_CC2P);
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002376:	f043 0320 	orr.w	r3, r3, #32
 800237a:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM5->CCER, CCER_CC2NP);
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002386:	6213      	str	r3, [r2, #32]
				break;
 8002388:	bf00      	nop
			}
			SET_BIT(TIM5->CCER, CCER_CC2E);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <MTIMER_voidSetChannelInputPolarity+0x76c>)
 8002390:	f043 0310 	orr.w	r3, r3, #16
 8002394:	6213      	str	r3, [r2, #32]
			break;
 8002396:	e073      	b.n	8002480 <MTIMER_voidSetChannelInputPolarity+0x83c>
		case CHANNEL3:
			switch (A_Polarity)
 8002398:	797b      	ldrb	r3, [r7, #5]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d024      	beq.n	80023e8 <MTIMER_voidSetChannelInputPolarity+0x7a4>
 800239e:	2b03      	cmp	r3, #3
 80023a0:	dc2f      	bgt.n	8002402 <MTIMER_voidSetChannelInputPolarity+0x7be>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <MTIMER_voidSetChannelInputPolarity+0x770>
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d011      	beq.n	80023ce <MTIMER_voidSetChannelInputPolarity+0x78a>
 80023aa:	e02a      	b.n	8002402 <MTIMER_voidSetChannelInputPolarity+0x7be>
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40000c00 	.word	0x40000c00
			{
			case RISING_EDGE:
				CLR_BIT(TIM5->CCER, CCER_CC3P);
 80023b4:	4b39      	ldr	r3, [pc, #228]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a38      	ldr	r2, [pc, #224]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023be:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM5->CCER, CCER_CC3NP);
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4a35      	ldr	r2, [pc, #212]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023ca:	6213      	str	r3, [r2, #32]
				break;
 80023cc:	e019      	b.n	8002402 <MTIMER_voidSetChannelInputPolarity+0x7be>
			case FALLING_EDGE:
				SET_BIT(TIM5->CCER, CCER_CC3P);
 80023ce:	4b33      	ldr	r3, [pc, #204]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a32      	ldr	r2, [pc, #200]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d8:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM5->CCER, CCER_CC3NP);
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a2f      	ldr	r2, [pc, #188]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023e4:	6213      	str	r3, [r2, #32]
				break;
 80023e6:	e00c      	b.n	8002402 <MTIMER_voidSetChannelInputPolarity+0x7be>
			case BOTH_EDGES:
				SET_BIT(TIM5->CCER, CCER_CC3P);
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f2:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM5->CCER, CCER_CC3NP);
 80023f4:	4b29      	ldr	r3, [pc, #164]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 80023fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fe:	6213      	str	r3, [r2, #32]
				break;
 8002400:	bf00      	nop
			}
			SET_BIT(TIM5->CCER, CCER_CC3E);
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a25      	ldr	r2, [pc, #148]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240c:	6213      	str	r3, [r2, #32]
			break;
 800240e:	e037      	b.n	8002480 <MTIMER_voidSetChannelInputPolarity+0x83c>
		case CHANNEL4:
			switch (A_Polarity)
 8002410:	797b      	ldrb	r3, [r7, #5]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d020      	beq.n	8002458 <MTIMER_voidSetChannelInputPolarity+0x814>
 8002416:	2b03      	cmp	r3, #3
 8002418:	dc2b      	bgt.n	8002472 <MTIMER_voidSetChannelInputPolarity+0x82e>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <MTIMER_voidSetChannelInputPolarity+0x7e0>
 800241e:	2b01      	cmp	r3, #1
 8002420:	d00d      	beq.n	800243e <MTIMER_voidSetChannelInputPolarity+0x7fa>
 8002422:	e026      	b.n	8002472 <MTIMER_voidSetChannelInputPolarity+0x82e>
			{
			case RISING_EDGE:
				CLR_BIT(TIM5->CCER, CCER_CC4P);
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a1c      	ldr	r2, [pc, #112]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 800242a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800242e:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM5->CCER, CCER_CC4NP);
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a19      	ldr	r2, [pc, #100]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002436:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800243a:	6213      	str	r3, [r2, #32]
				break;
 800243c:	e019      	b.n	8002472 <MTIMER_voidSetChannelInputPolarity+0x82e>
			case FALLING_EDGE:
				SET_BIT(TIM5->CCER, CCER_CC4P);
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a16      	ldr	r2, [pc, #88]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002448:	6213      	str	r3, [r2, #32]
				CLR_BIT(TIM5->CCER, CCER_CC4NP);
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a13      	ldr	r2, [pc, #76]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002450:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002454:	6213      	str	r3, [r2, #32]
				break;
 8002456:	e00c      	b.n	8002472 <MTIMER_voidSetChannelInputPolarity+0x82e>
			case BOTH_EDGES:
				SET_BIT(TIM5->CCER, CCER_CC4P);
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 800245e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002462:	6213      	str	r3, [r2, #32]
				SET_BIT(TIM5->CCER, CCER_CC4NP);
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 800246a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246e:	6213      	str	r3, [r2, #32]
				break;
 8002470:	bf00      	nop
			}
			SET_BIT(TIM5->CCER, CCER_CC4E);
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <MTIMER_voidSetChannelInputPolarity+0x858>)
 8002478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800247c:	6213      	str	r3, [r2, #32]
			break;
 800247e:	bf00      	nop
		}
		break;
 8002480:	e005      	b.n	800248e <MTIMER_voidSetChannelInputPolarity+0x84a>
		break;
 8002482:	bf00      	nop
 8002484:	e004      	b.n	8002490 <MTIMER_voidSetChannelInputPolarity+0x84c>
		break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <MTIMER_voidSetChannelInputPolarity+0x84c>
		break;
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <MTIMER_voidSetChannelInputPolarity+0x84c>
		break;
 800248e:	bf00      	nop
	}
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40000c00 	.word	0x40000c00

080024a0 <MTIMER_u32ReadChannelValue>:

u32 MTIMER_u32ReadChannelValue (TIMERS_t A_Timer, CHANNELS_t A_Channel)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	460a      	mov	r2, r1
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	4613      	mov	r3, r2
 80024ae:	71bb      	strb	r3, [r7, #6]
	u32 local_ReturnValue = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
	switch (A_Timer)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	f200 8098 	bhi.w	80025ec <MTIMER_u32ReadChannelValue+0x14c>
 80024bc:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <MTIMER_u32ReadChannelValue+0x24>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	0800251f 	.word	0x0800251f
 80024cc:	0800255f 	.word	0x0800255f
 80024d0:	0800259f 	.word	0x0800259f
	{
	case TIMER2:
		switch (A_Channel)
 80024d4:	79bb      	ldrb	r3, [r7, #6]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	2b03      	cmp	r3, #3
 80024da:	f200 8080 	bhi.w	80025de <MTIMER_u32ReadChannelValue+0x13e>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <MTIMER_u32ReadChannelValue+0x44>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	080024ff 	.word	0x080024ff
 80024ec:	08002509 	.word	0x08002509
 80024f0:	08002513 	.word	0x08002513
		{
		case CHANNEL1:
			local_ReturnValue = TIM2->CCR1;
 80024f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	60fb      	str	r3, [r7, #12]
			break;
 80024fc:	e00e      	b.n	800251c <MTIMER_u32ReadChannelValue+0x7c>
		case CHANNEL2:
			local_ReturnValue = TIM2->CCR2;
 80024fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	60fb      	str	r3, [r7, #12]
			break;
 8002506:	e009      	b.n	800251c <MTIMER_u32ReadChannelValue+0x7c>
		case CHANNEL3:
			local_ReturnValue = TIM2->CCR3;
 8002508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	60fb      	str	r3, [r7, #12]
			break;
 8002510:	e004      	b.n	800251c <MTIMER_u32ReadChannelValue+0x7c>
		case CHANNEL4:
			local_ReturnValue = TIM2->CCR4;
 8002512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	60fb      	str	r3, [r7, #12]
			break;
 800251a:	bf00      	nop
		}
		break;
 800251c:	e05f      	b.n	80025de <MTIMER_u32ReadChannelValue+0x13e>
	case TIMER3:
		switch (A_Channel)
 800251e:	79bb      	ldrb	r3, [r7, #6]
 8002520:	3b01      	subs	r3, #1
 8002522:	2b03      	cmp	r3, #3
 8002524:	d85d      	bhi.n	80025e2 <MTIMER_u32ReadChannelValue+0x142>
 8002526:	a201      	add	r2, pc, #4	; (adr r2, 800252c <MTIMER_u32ReadChannelValue+0x8c>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	0800253d 	.word	0x0800253d
 8002530:	08002545 	.word	0x08002545
 8002534:	0800254d 	.word	0x0800254d
 8002538:	08002555 	.word	0x08002555
		{
		case CHANNEL1:
			local_ReturnValue = TIM3->CCR1;
 800253c:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <MTIMER_u32ReadChannelValue+0x15c>)
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	60fb      	str	r3, [r7, #12]
			break;
 8002542:	e00b      	b.n	800255c <MTIMER_u32ReadChannelValue+0xbc>
		case CHANNEL2:
			local_ReturnValue = TIM3->CCR2;
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <MTIMER_u32ReadChannelValue+0x15c>)
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	60fb      	str	r3, [r7, #12]
			break;
 800254a:	e007      	b.n	800255c <MTIMER_u32ReadChannelValue+0xbc>
		case CHANNEL3:
			local_ReturnValue = TIM3->CCR3;
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <MTIMER_u32ReadChannelValue+0x15c>)
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	60fb      	str	r3, [r7, #12]
			break;
 8002552:	e003      	b.n	800255c <MTIMER_u32ReadChannelValue+0xbc>
		case CHANNEL4:
			local_ReturnValue = TIM3->CCR4;
 8002554:	4b29      	ldr	r3, [pc, #164]	; (80025fc <MTIMER_u32ReadChannelValue+0x15c>)
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	60fb      	str	r3, [r7, #12]
			break;
 800255a:	bf00      	nop
		}
		break;
 800255c:	e041      	b.n	80025e2 <MTIMER_u32ReadChannelValue+0x142>
	case TIMER4:
		switch (A_Channel)
 800255e:	79bb      	ldrb	r3, [r7, #6]
 8002560:	3b01      	subs	r3, #1
 8002562:	2b03      	cmp	r3, #3
 8002564:	d83f      	bhi.n	80025e6 <MTIMER_u32ReadChannelValue+0x146>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <MTIMER_u32ReadChannelValue+0xcc>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	0800257d 	.word	0x0800257d
 8002570:	08002585 	.word	0x08002585
 8002574:	0800258d 	.word	0x0800258d
 8002578:	08002595 	.word	0x08002595
		{
		case CHANNEL1:
			local_ReturnValue = TIM4->CCR1;
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <MTIMER_u32ReadChannelValue+0x160>)
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	60fb      	str	r3, [r7, #12]
			break;
 8002582:	e00b      	b.n	800259c <MTIMER_u32ReadChannelValue+0xfc>
		case CHANNEL2:
			local_ReturnValue = TIM4->CCR2;
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <MTIMER_u32ReadChannelValue+0x160>)
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	60fb      	str	r3, [r7, #12]
			break;
 800258a:	e007      	b.n	800259c <MTIMER_u32ReadChannelValue+0xfc>
		case CHANNEL3:
			local_ReturnValue = TIM4->CCR3;
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <MTIMER_u32ReadChannelValue+0x160>)
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	60fb      	str	r3, [r7, #12]
			break;
 8002592:	e003      	b.n	800259c <MTIMER_u32ReadChannelValue+0xfc>
		case CHANNEL4:
			local_ReturnValue = TIM4->CCR4;
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <MTIMER_u32ReadChannelValue+0x160>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	60fb      	str	r3, [r7, #12]
			break;
 800259a:	bf00      	nop
		}
		break;
 800259c:	e023      	b.n	80025e6 <MTIMER_u32ReadChannelValue+0x146>
	case TIMER5:
		switch (A_Channel)
 800259e:	79bb      	ldrb	r3, [r7, #6]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d821      	bhi.n	80025ea <MTIMER_u32ReadChannelValue+0x14a>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <MTIMER_u32ReadChannelValue+0x10c>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025bd 	.word	0x080025bd
 80025b0:	080025c5 	.word	0x080025c5
 80025b4:	080025cd 	.word	0x080025cd
 80025b8:	080025d5 	.word	0x080025d5
		{
		case CHANNEL1:
			local_ReturnValue = TIM5->CCR1;
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <MTIMER_u32ReadChannelValue+0x164>)
 80025be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c0:	60fb      	str	r3, [r7, #12]
			break;
 80025c2:	e00b      	b.n	80025dc <MTIMER_u32ReadChannelValue+0x13c>
		case CHANNEL2:
			local_ReturnValue = TIM5->CCR2;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <MTIMER_u32ReadChannelValue+0x164>)
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	60fb      	str	r3, [r7, #12]
			break;
 80025ca:	e007      	b.n	80025dc <MTIMER_u32ReadChannelValue+0x13c>
		case CHANNEL3:
			local_ReturnValue = TIM5->CCR3;
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <MTIMER_u32ReadChannelValue+0x164>)
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	60fb      	str	r3, [r7, #12]
			break;
 80025d2:	e003      	b.n	80025dc <MTIMER_u32ReadChannelValue+0x13c>
		case CHANNEL4:
			local_ReturnValue = TIM5->CCR4;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MTIMER_u32ReadChannelValue+0x164>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	60fb      	str	r3, [r7, #12]
			break;
 80025da:	bf00      	nop
		}
		break;
 80025dc:	e005      	b.n	80025ea <MTIMER_u32ReadChannelValue+0x14a>
		break;
 80025de:	bf00      	nop
 80025e0:	e004      	b.n	80025ec <MTIMER_u32ReadChannelValue+0x14c>
		break;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <MTIMER_u32ReadChannelValue+0x14c>
		break;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <MTIMER_u32ReadChannelValue+0x14c>
		break;
 80025ea:	bf00      	nop
	}
	return local_ReturnValue;
 80025ec:	68fb      	ldr	r3, [r7, #12]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40000400 	.word	0x40000400
 8002600:	40000800 	.word	0x40000800
 8002604:	40000c00 	.word	0x40000c00

08002608 <MTIMER_voidSetCallBack>:

void MTIMER_voidSetCallBack (TIMERS_t A_Timer, PtrToFunc_void A_CallBack)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
	TIMER_CallBack[A_Timer] = A_CallBack;
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	4905      	ldr	r1, [pc, #20]	; (800262c <MTIMER_voidSetCallBack+0x24>)
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000078 	.word	0x20000078

08002630 <MTIMER_voidSetCounterValue>:


void MTIMER_voidSetCounterValue (TIMERS_t A_Timer, u32 A_u32CNTValue)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
	switch (A_Timer)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d81b      	bhi.n	800267a <MTIMER_voidSetCounterValue+0x4a>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <MTIMER_voidSetCounterValue+0x18>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	08002659 	.word	0x08002659
 800264c:	08002663 	.word	0x08002663
 8002650:	0800266b 	.word	0x0800266b
 8002654:	08002673 	.word	0x08002673
	{
	case TIMER2:
		TIM2->CNT = A_u32CNTValue;
 8002658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8002660:	e00b      	b.n	800267a <MTIMER_voidSetCounterValue+0x4a>
	case TIMER3:
		TIM3->CNT = A_u32CNTValue;
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <MTIMER_voidSetCounterValue+0x58>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8002668:	e007      	b.n	800267a <MTIMER_voidSetCounterValue+0x4a>
	case TIMER4:
		TIM4->CNT = A_u32CNTValue;
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <MTIMER_voidSetCounterValue+0x5c>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8002670:	e003      	b.n	800267a <MTIMER_voidSetCounterValue+0x4a>
	case TIMER5:
		TIM5->CNT = A_u32CNTValue;
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <MTIMER_voidSetCounterValue+0x60>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8002678:	bf00      	nop
	}
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00

08002694 <MTIMER_voidSetARRValue>:

void MTIMER_voidSetARRValue (TIMERS_t A_Timer, u32 A_u32ARRValue)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
	switch (A_Timer)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d81b      	bhi.n	80026de <MTIMER_voidSetARRValue+0x4a>
 80026a6:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <MTIMER_voidSetARRValue+0x18>)
 80026a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026c7 	.word	0x080026c7
 80026b4:	080026cf 	.word	0x080026cf
 80026b8:	080026d7 	.word	0x080026d7
	{
	case TIMER2:
		TIM2->ARR = A_u32ARRValue;
 80026bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80026c4:	e00b      	b.n	80026de <MTIMER_voidSetARRValue+0x4a>
	case TIMER3:
		TIM3->ARR = A_u32ARRValue;
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <MTIMER_voidSetARRValue+0x58>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80026cc:	e007      	b.n	80026de <MTIMER_voidSetARRValue+0x4a>
	case TIMER4:
		TIM4->ARR = A_u32ARRValue;
 80026ce:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <MTIMER_voidSetARRValue+0x5c>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80026d4:	e003      	b.n	80026de <MTIMER_voidSetARRValue+0x4a>
	case TIMER5:
		TIM5->ARR = A_u32ARRValue;
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <MTIMER_voidSetARRValue+0x60>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80026dc:	bf00      	nop
	}
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40000800 	.word	0x40000800
 80026f4:	40000c00 	.word	0x40000c00

080026f8 <MTIMER_voidSetCCRValue>:
void MTIMER_voidSetCCRValue (TIMERS_t A_Timer, CHANNELS_t A_Channel, u32 A_u32CCRValue)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	603a      	str	r2, [r7, #0]
 8002702:	71fb      	strb	r3, [r7, #7]
 8002704:	460b      	mov	r3, r1
 8002706:	71bb      	strb	r3, [r7, #6]
	switch (A_Timer)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2b03      	cmp	r3, #3
 800270c:	f200 8098 	bhi.w	8002840 <MTIMER_voidSetCCRValue+0x148>
 8002710:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <MTIMER_voidSetCCRValue+0x20>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	08002729 	.word	0x08002729
 800271c:	08002773 	.word	0x08002773
 8002720:	080027b3 	.word	0x080027b3
 8002724:	080027f3 	.word	0x080027f3
	{
	case TIMER2:
		switch (A_Channel)
 8002728:	79bb      	ldrb	r3, [r7, #6]
 800272a:	3b01      	subs	r3, #1
 800272c:	2b03      	cmp	r3, #3
 800272e:	f200 8080 	bhi.w	8002832 <MTIMER_voidSetCCRValue+0x13a>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <MTIMER_voidSetCCRValue+0x40>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002749 	.word	0x08002749
 800273c:	08002753 	.word	0x08002753
 8002740:	0800275d 	.word	0x0800275d
 8002744:	08002767 	.word	0x08002767
		{
		case CHANNEL1:
			TIM2->CCR1 = A_u32CCRValue;
 8002748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8002750:	e00e      	b.n	8002770 <MTIMER_voidSetCCRValue+0x78>
		case CHANNEL2:
			TIM2->CCR2 = A_u32CCRValue;
 8002752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800275a:	e009      	b.n	8002770 <MTIMER_voidSetCCRValue+0x78>
		case CHANNEL3:
			TIM2->CCR3 = A_u32CCRValue;
 800275c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8002764:	e004      	b.n	8002770 <MTIMER_voidSetCCRValue+0x78>
		case CHANNEL4:
			TIM2->CCR4 = A_u32CCRValue;
 8002766:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800276e:	bf00      	nop
		}
		break;
 8002770:	e05f      	b.n	8002832 <MTIMER_voidSetCCRValue+0x13a>
	case TIMER3:
		switch (A_Channel)
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	3b01      	subs	r3, #1
 8002776:	2b03      	cmp	r3, #3
 8002778:	d85d      	bhi.n	8002836 <MTIMER_voidSetCCRValue+0x13e>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <MTIMER_voidSetCCRValue+0x88>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002791 	.word	0x08002791
 8002784:	08002799 	.word	0x08002799
 8002788:	080027a1 	.word	0x080027a1
 800278c:	080027a9 	.word	0x080027a9
		{
		case CHANNEL1:
			TIM3->CCR1 = A_u32CCRValue;
 8002790:	4a2e      	ldr	r2, [pc, #184]	; (800284c <MTIMER_voidSetCCRValue+0x154>)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8002796:	e00b      	b.n	80027b0 <MTIMER_voidSetCCRValue+0xb8>
		case CHANNEL2:
			TIM3->CCR2 = A_u32CCRValue;
 8002798:	4a2c      	ldr	r2, [pc, #176]	; (800284c <MTIMER_voidSetCCRValue+0x154>)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800279e:	e007      	b.n	80027b0 <MTIMER_voidSetCCRValue+0xb8>
		case CHANNEL3:
			TIM3->CCR3 = A_u32CCRValue;
 80027a0:	4a2a      	ldr	r2, [pc, #168]	; (800284c <MTIMER_voidSetCCRValue+0x154>)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 80027a6:	e003      	b.n	80027b0 <MTIMER_voidSetCCRValue+0xb8>
		case CHANNEL4:
			TIM3->CCR4 = A_u32CCRValue;
 80027a8:	4a28      	ldr	r2, [pc, #160]	; (800284c <MTIMER_voidSetCCRValue+0x154>)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 80027ae:	bf00      	nop
		}
		break;
 80027b0:	e041      	b.n	8002836 <MTIMER_voidSetCCRValue+0x13e>
	case TIMER4:
		switch (A_Channel)
 80027b2:	79bb      	ldrb	r3, [r7, #6]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d83f      	bhi.n	800283a <MTIMER_voidSetCCRValue+0x142>
 80027ba:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <MTIMER_voidSetCCRValue+0xc8>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027d9 	.word	0x080027d9
 80027c8:	080027e1 	.word	0x080027e1
 80027cc:	080027e9 	.word	0x080027e9
		{
		case CHANNEL1:
			TIM4->CCR1 = A_u32CCRValue;
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <MTIMER_voidSetCCRValue+0x158>)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80027d6:	e00b      	b.n	80027f0 <MTIMER_voidSetCCRValue+0xf8>
		case CHANNEL2:
			TIM4->CCR2 = A_u32CCRValue;
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <MTIMER_voidSetCCRValue+0x158>)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 80027de:	e007      	b.n	80027f0 <MTIMER_voidSetCCRValue+0xf8>
		case CHANNEL3:
			TIM4->CCR3 = A_u32CCRValue;
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <MTIMER_voidSetCCRValue+0x158>)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 80027e6:	e003      	b.n	80027f0 <MTIMER_voidSetCCRValue+0xf8>
		case CHANNEL4:
			TIM4->CCR4 = A_u32CCRValue;
 80027e8:	4a19      	ldr	r2, [pc, #100]	; (8002850 <MTIMER_voidSetCCRValue+0x158>)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 80027ee:	bf00      	nop
		}
		break;
 80027f0:	e023      	b.n	800283a <MTIMER_voidSetCCRValue+0x142>
	case TIMER5:
		switch (A_Channel)
 80027f2:	79bb      	ldrb	r3, [r7, #6]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d821      	bhi.n	800283e <MTIMER_voidSetCCRValue+0x146>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <MTIMER_voidSetCCRValue+0x108>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002811 	.word	0x08002811
 8002804:	08002819 	.word	0x08002819
 8002808:	08002821 	.word	0x08002821
 800280c:	08002829 	.word	0x08002829
		{
		case CHANNEL1:
			TIM5->CCR1 = A_u32CCRValue;
 8002810:	4a10      	ldr	r2, [pc, #64]	; (8002854 <MTIMER_voidSetCCRValue+0x15c>)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8002816:	e00b      	b.n	8002830 <MTIMER_voidSetCCRValue+0x138>
		case CHANNEL2:
			TIM5->CCR2 = A_u32CCRValue;
 8002818:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <MTIMER_voidSetCCRValue+0x15c>)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800281e:	e007      	b.n	8002830 <MTIMER_voidSetCCRValue+0x138>
		case CHANNEL3:
			TIM5->CCR3 = A_u32CCRValue;
 8002820:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <MTIMER_voidSetCCRValue+0x15c>)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8002826:	e003      	b.n	8002830 <MTIMER_voidSetCCRValue+0x138>
		case CHANNEL4:
			TIM5->CCR4 = A_u32CCRValue;
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <MTIMER_voidSetCCRValue+0x15c>)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800282e:	bf00      	nop
		}
		break;
 8002830:	e005      	b.n	800283e <MTIMER_voidSetCCRValue+0x146>
		break;
 8002832:	bf00      	nop
 8002834:	e004      	b.n	8002840 <MTIMER_voidSetCCRValue+0x148>
		break;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <MTIMER_voidSetCCRValue+0x148>
		break;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <MTIMER_voidSetCCRValue+0x148>
		break;
 800283e:	bf00      	nop
	}
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800
 8002854:	40000c00 	.word	0x40000c00

08002858 <MTIMER_u8ReadInterruptState>:


u8 MTIMER_u8ReadInterruptState (TIMERS_t A_Timer, CHANNELS_t A_Channel)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	460a      	mov	r2, r1
 8002862:	71fb      	strb	r3, [r7, #7]
 8002864:	4613      	mov	r3, r2
 8002866:	71bb      	strb	r3, [r7, #6]
	u8 local_ReturnValue = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
	switch (A_Timer)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d833      	bhi.n	80028da <MTIMER_u8ReadInterruptState+0x82>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <MTIMER_u8ReadInterruptState+0x20>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	0800289f 	.word	0x0800289f
 8002880:	080028b3 	.word	0x080028b3
 8002884:	080028c7 	.word	0x080028c7
	{
	case TIMER2:
		local_ReturnValue = GET_BIT(TIM2->SR, A_Channel);
 8002888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	79bb      	ldrb	r3, [r7, #6]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
		break;
 800289c:	e01d      	b.n	80028da <MTIMER_u8ReadInterruptState+0x82>
	case TIMER3:
		local_ReturnValue = GET_BIT(TIM3->SR, A_Channel);
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <MTIMER_u8ReadInterruptState+0x90>)
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	79bb      	ldrb	r3, [r7, #6]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
		break;
 80028b0:	e013      	b.n	80028da <MTIMER_u8ReadInterruptState+0x82>
	case TIMER4:
		local_ReturnValue = GET_BIT(TIM4->SR, A_Channel);
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MTIMER_u8ReadInterruptState+0x94>)
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	79bb      	ldrb	r3, [r7, #6]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
		break;
 80028c4:	e009      	b.n	80028da <MTIMER_u8ReadInterruptState+0x82>
	case TIMER5:
		local_ReturnValue = GET_BIT(TIM5->SR, A_Channel);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <MTIMER_u8ReadInterruptState+0x98>)
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	79bb      	ldrb	r3, [r7, #6]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
		break;
 80028d8:	bf00      	nop
	}
	return local_ReturnValue;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00

080028f4 <MTIMER_voidSetOutputMode>:

void MTIMER_voidSetOutputMode (TIMERS_t A_Timer, CHANNELS_t A_Channel, OUT_MODES_t A_Mode)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
 80028fe:	460b      	mov	r3, r1
 8002900:	71bb      	strb	r3, [r7, #6]
 8002902:	4613      	mov	r3, r2
 8002904:	717b      	strb	r3, [r7, #5]
	switch (A_Timer)
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	2b03      	cmp	r3, #3
 800290a:	f200 8157 	bhi.w	8002bbc <MTIMER_voidSetOutputMode+0x2c8>
 800290e:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <MTIMER_voidSetOutputMode+0x20>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	08002925 	.word	0x08002925
 8002918:	080029df 	.word	0x080029df
 800291c:	08002a7b 	.word	0x08002a7b
 8002920:	08002b17 	.word	0x08002b17
	{
	case TIMER2:
		switch (A_Channel)
 8002924:	79bb      	ldrb	r3, [r7, #6]
 8002926:	3b01      	subs	r3, #1
 8002928:	2b03      	cmp	r3, #3
 800292a:	f200 8140 	bhi.w	8002bae <MTIMER_voidSetOutputMode+0x2ba>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <MTIMER_voidSetOutputMode+0x40>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002945 	.word	0x08002945
 8002938:	0800296b 	.word	0x0800296b
 800293c:	08002991 	.word	0x08002991
 8002940:	080029b7 	.word	0x080029b7
		{
		case CHANNEL1:
			TIM2->CCMR1 &= ~(THREE_BIT_MASK << CCMR1_OC1M);
 8002944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	6193      	str	r3, [r2, #24]
			TIM2->CCMR1 |=  (A_Mode << CCMR1_OC1M);
 8002954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	797a      	ldrb	r2, [r7, #5]
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	4611      	mov	r1, r2
 8002960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002964:	430b      	orrs	r3, r1
 8002966:	6193      	str	r3, [r2, #24]
			break;
 8002968:	e038      	b.n	80029dc <MTIMER_voidSetOutputMode+0xe8>
		case CHANNEL2:
			TIM2->CCMR1 &= ~(THREE_BIT_MASK << CCMR1_OC2M);
 800296a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002978:	6193      	str	r3, [r2, #24]
			TIM2->CCMR1 |=  (A_Mode << CCMR1_OC2M);
 800297a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	797a      	ldrb	r2, [r7, #5]
 8002982:	0312      	lsls	r2, r2, #12
 8002984:	4611      	mov	r1, r2
 8002986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800298a:	430b      	orrs	r3, r1
 800298c:	6193      	str	r3, [r2, #24]
			break;
 800298e:	e025      	b.n	80029dc <MTIMER_voidSetOutputMode+0xe8>
		case CHANNEL3:
			TIM2->CCMR2 &= ~(THREE_BIT_MASK << CCMR2_OC3M);
 8002990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	61d3      	str	r3, [r2, #28]
			TIM2->CCMR2 |=  (A_Mode << CCMR2_OC3M);
 80029a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	797a      	ldrb	r2, [r7, #5]
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	4611      	mov	r1, r2
 80029ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029b0:	430b      	orrs	r3, r1
 80029b2:	61d3      	str	r3, [r2, #28]
			break;
 80029b4:	e012      	b.n	80029dc <MTIMER_voidSetOutputMode+0xe8>
		case CHANNEL4:
			TIM2->CCMR2 &= ~(THREE_BIT_MASK << CCMR2_OC4M);
 80029b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c4:	61d3      	str	r3, [r2, #28]
			TIM2->CCMR2 |=  (A_Mode << CCMR2_OC4M);
 80029c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	797a      	ldrb	r2, [r7, #5]
 80029ce:	0312      	lsls	r2, r2, #12
 80029d0:	4611      	mov	r1, r2
 80029d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d6:	430b      	orrs	r3, r1
 80029d8:	61d3      	str	r3, [r2, #28]
			break;
 80029da:	bf00      	nop
		}
		break;
 80029dc:	e0e7      	b.n	8002bae <MTIMER_voidSetOutputMode+0x2ba>
	case TIMER3:
		switch (A_Channel)
 80029de:	79bb      	ldrb	r3, [r7, #6]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	f200 80e5 	bhi.w	8002bb2 <MTIMER_voidSetOutputMode+0x2be>
 80029e8:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <MTIMER_voidSetOutputMode+0xfc>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a1f 	.word	0x08002a1f
 80029f8:	08002a3d 	.word	0x08002a3d
 80029fc:	08002a5b 	.word	0x08002a5b
		{
		case CHANNEL1:
			TIM3->CCMR1 &= ~(THREE_BIT_MASK << CCMR1_OC1M);
 8002a00:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a70      	ldr	r2, [pc, #448]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0a:	6193      	str	r3, [r2, #24]
			TIM3->CCMR1 |=  (A_Mode << CCMR1_OC1M);
 8002a0c:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	797a      	ldrb	r2, [r7, #5]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	4611      	mov	r1, r2
 8002a16:	4a6c      	ldr	r2, [pc, #432]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6193      	str	r3, [r2, #24]
			break;
 8002a1c:	e02c      	b.n	8002a78 <MTIMER_voidSetOutputMode+0x184>
		case CHANNEL2:
			TIM3->CCMR1 &= ~(THREE_BIT_MASK << CCMR1_OC2M);
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	4a69      	ldr	r2, [pc, #420]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a28:	6193      	str	r3, [r2, #24]
			TIM3->CCMR1 |=  (A_Mode << CCMR1_OC2M);
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	797a      	ldrb	r2, [r7, #5]
 8002a30:	0312      	lsls	r2, r2, #12
 8002a32:	4611      	mov	r1, r2
 8002a34:	4a64      	ldr	r2, [pc, #400]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a36:	430b      	orrs	r3, r1
 8002a38:	6193      	str	r3, [r2, #24]
			break;
 8002a3a:	e01d      	b.n	8002a78 <MTIMER_voidSetOutputMode+0x184>
		case CHANNEL3:
			TIM3->CCMR2 &= ~(THREE_BIT_MASK << CCMR2_OC3M);
 8002a3c:	4b62      	ldr	r3, [pc, #392]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	4a61      	ldr	r2, [pc, #388]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	61d3      	str	r3, [r2, #28]
			TIM3->CCMR2 |=  (A_Mode << CCMR2_OC3M);
 8002a48:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	797a      	ldrb	r2, [r7, #5]
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	4611      	mov	r1, r2
 8002a52:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a54:	430b      	orrs	r3, r1
 8002a56:	61d3      	str	r3, [r2, #28]
			break;
 8002a58:	e00e      	b.n	8002a78 <MTIMER_voidSetOutputMode+0x184>
		case CHANNEL4:
			TIM3->CCMR2 &= ~(THREE_BIT_MASK << CCMR2_OC4M);
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4a5a      	ldr	r2, [pc, #360]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a64:	61d3      	str	r3, [r2, #28]
			TIM3->CCMR2 |=  (A_Mode << CCMR2_OC4M);
 8002a66:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	797a      	ldrb	r2, [r7, #5]
 8002a6c:	0312      	lsls	r2, r2, #12
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4a55      	ldr	r2, [pc, #340]	; (8002bc8 <MTIMER_voidSetOutputMode+0x2d4>)
 8002a72:	430b      	orrs	r3, r1
 8002a74:	61d3      	str	r3, [r2, #28]
			break;
 8002a76:	bf00      	nop
		}
		break;
 8002a78:	e09b      	b.n	8002bb2 <MTIMER_voidSetOutputMode+0x2be>
	case TIMER4:
		switch (A_Channel)
 8002a7a:	79bb      	ldrb	r3, [r7, #6]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	f200 8099 	bhi.w	8002bb6 <MTIMER_voidSetOutputMode+0x2c2>
 8002a84:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <MTIMER_voidSetOutputMode+0x198>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002abb 	.word	0x08002abb
 8002a94:	08002ad9 	.word	0x08002ad9
 8002a98:	08002af7 	.word	0x08002af7
		{
		case CHANNEL1:
			TIM4->CCMR1 &= ~(THREE_BIT_MASK << CCMR1_OC1M);
 8002a9c:	4b4b      	ldr	r3, [pc, #300]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	6193      	str	r3, [r2, #24]
			TIM4->CCMR1 |=  (A_Mode << CCMR1_OC1M);
 8002aa8:	4b48      	ldr	r3, [pc, #288]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	797a      	ldrb	r2, [r7, #5]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4a46      	ldr	r2, [pc, #280]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6193      	str	r3, [r2, #24]
			break;
 8002ab8:	e02c      	b.n	8002b14 <MTIMER_voidSetOutputMode+0x220>
		case CHANNEL2:
			TIM4->CCMR1 &= ~(THREE_BIT_MASK << CCMR1_OC2M);
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac4:	6193      	str	r3, [r2, #24]
			TIM4->CCMR1 |=  (A_Mode << CCMR1_OC2M);
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	797a      	ldrb	r2, [r7, #5]
 8002acc:	0312      	lsls	r2, r2, #12
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4a3e      	ldr	r2, [pc, #248]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	6193      	str	r3, [r2, #24]
			break;
 8002ad6:	e01d      	b.n	8002b14 <MTIMER_voidSetOutputMode+0x220>
		case CHANNEL3:
			TIM4->CCMR2 &= ~(THREE_BIT_MASK << CCMR2_OC3M);
 8002ad8:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	61d3      	str	r3, [r2, #28]
			TIM4->CCMR2 |=  (A_Mode << CCMR2_OC3M);
 8002ae4:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	797a      	ldrb	r2, [r7, #5]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	4611      	mov	r1, r2
 8002aee:	4a37      	ldr	r2, [pc, #220]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002af0:	430b      	orrs	r3, r1
 8002af2:	61d3      	str	r3, [r2, #28]
			break;
 8002af4:	e00e      	b.n	8002b14 <MTIMER_voidSetOutputMode+0x220>
		case CHANNEL4:
			TIM4->CCMR2 &= ~(THREE_BIT_MASK << CCMR2_OC4M);
 8002af6:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b00:	61d3      	str	r3, [r2, #28]
			TIM4->CCMR2 |=  (A_Mode << CCMR2_OC4M);
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	797a      	ldrb	r2, [r7, #5]
 8002b08:	0312      	lsls	r2, r2, #12
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4a2f      	ldr	r2, [pc, #188]	; (8002bcc <MTIMER_voidSetOutputMode+0x2d8>)
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	61d3      	str	r3, [r2, #28]
			break;
 8002b12:	bf00      	nop
		}
		break;
 8002b14:	e04f      	b.n	8002bb6 <MTIMER_voidSetOutputMode+0x2c2>
	case TIMER5:
		switch (A_Channel)
 8002b16:	79bb      	ldrb	r3, [r7, #6]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d84d      	bhi.n	8002bba <MTIMER_voidSetOutputMode+0x2c6>
 8002b1e:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <MTIMER_voidSetOutputMode+0x230>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b53 	.word	0x08002b53
 8002b2c:	08002b71 	.word	0x08002b71
 8002b30:	08002b8f 	.word	0x08002b8f
		{
		case CHANNEL1:
			TIM5->CCMR1 &= ~(THREE_BIT_MASK << CCMR1_OC1M);
 8002b34:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3e:	6193      	str	r3, [r2, #24]
			TIM5->CCMR1 |=  (A_Mode << CCMR1_OC1M);
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	797a      	ldrb	r2, [r7, #5]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6193      	str	r3, [r2, #24]
			break;
 8002b50:	e02c      	b.n	8002bac <MTIMER_voidSetOutputMode+0x2b8>
		case CHANNEL2:
			TIM5->CCMR1 &= ~(THREE_BIT_MASK << CCMR1_OC2M);
 8002b52:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5c:	6193      	str	r3, [r2, #24]
			TIM5->CCMR1 |=  (A_Mode << CCMR1_OC2M);
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	797a      	ldrb	r2, [r7, #5]
 8002b64:	0312      	lsls	r2, r2, #12
 8002b66:	4611      	mov	r1, r2
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	6193      	str	r3, [r2, #24]
			break;
 8002b6e:	e01d      	b.n	8002bac <MTIMER_voidSetOutputMode+0x2b8>
		case CHANNEL3:
			TIM5->CCMR2 &= ~(THREE_BIT_MASK << CCMR2_OC3M);
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	61d3      	str	r3, [r2, #28]
			TIM5->CCMR2 |=  (A_Mode << CCMR2_OC3M);
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	797a      	ldrb	r2, [r7, #5]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	4611      	mov	r1, r2
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	61d3      	str	r3, [r2, #28]
			break;
 8002b8c:	e00e      	b.n	8002bac <MTIMER_voidSetOutputMode+0x2b8>
		case CHANNEL4:
			TIM5->CCMR2 &= ~(THREE_BIT_MASK << CCMR2_OC4M);
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4a0f      	ldr	r2, [pc, #60]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b98:	61d3      	str	r3, [r2, #28]
			TIM5->CCMR2 |=  (A_Mode << CCMR2_OC4M);
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	797a      	ldrb	r2, [r7, #5]
 8002ba0:	0312      	lsls	r2, r2, #12
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <MTIMER_voidSetOutputMode+0x2dc>)
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	61d3      	str	r3, [r2, #28]
			break;
 8002baa:	bf00      	nop
		}
		break;
 8002bac:	e005      	b.n	8002bba <MTIMER_voidSetOutputMode+0x2c6>
		break;
 8002bae:	bf00      	nop
 8002bb0:	e004      	b.n	8002bbc <MTIMER_voidSetOutputMode+0x2c8>
		break;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <MTIMER_voidSetOutputMode+0x2c8>
		break;
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <MTIMER_voidSetOutputMode+0x2c8>
		break;
 8002bba:	bf00      	nop
	}
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	40000c00 	.word	0x40000c00

08002bd4 <MTIMER_voidEnableOutputPin>:

void MTIMER_voidEnableOutputPin (TIMERS_t A_Timer, CHANNELS_t A_Channel)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	460a      	mov	r2, r1
 8002bde:	71fb      	strb	r3, [r7, #7]
 8002be0:	4613      	mov	r3, r2
 8002be2:	71bb      	strb	r3, [r7, #6]
	switch (A_Timer)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	f200 80ce 	bhi.w	8002d88 <MTIMER_voidEnableOutputPin+0x1b4>
 8002bec:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <MTIMER_voidEnableOutputPin+0x20>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c6f 	.word	0x08002c6f
 8002bfc:	08002ccb 	.word	0x08002ccb
 8002c00:	08002d23 	.word	0x08002d23
	{
	case TIMER2:
		switch (A_Channel)
 8002c04:	79bb      	ldrb	r3, [r7, #6]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	f200 80b6 	bhi.w	8002d7a <MTIMER_voidEnableOutputPin+0x1a6>
 8002c0e:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <MTIMER_voidEnableOutputPin+0x40>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c37 	.word	0x08002c37
 8002c1c:	08002c49 	.word	0x08002c49
 8002c20:	08002c5b 	.word	0x08002c5b
		{
		case CHANNEL1:
			SET_BIT (TIM2->CCER, CCER_CC1E);
 8002c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6213      	str	r3, [r2, #32]
			break;
 8002c34:	e01a      	b.n	8002c6c <MTIMER_voidEnableOutputPin+0x98>
		case CHANNEL2:
			SET_BIT (TIM2->CCER, CCER_CC2E);
 8002c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c40:	f043 0310 	orr.w	r3, r3, #16
 8002c44:	6213      	str	r3, [r2, #32]
			break;
 8002c46:	e011      	b.n	8002c6c <MTIMER_voidEnableOutputPin+0x98>
		case CHANNEL3:
			SET_BIT (TIM2->CCER, CCER_CC3E);
 8002c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6213      	str	r3, [r2, #32]
			break;
 8002c58:	e008      	b.n	8002c6c <MTIMER_voidEnableOutputPin+0x98>
		case CHANNEL4:
			SET_BIT (TIM2->CCER, CCER_CC4E);
 8002c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c68:	6213      	str	r3, [r2, #32]
			break;
 8002c6a:	bf00      	nop
		}
		break;
 8002c6c:	e085      	b.n	8002d7a <MTIMER_voidEnableOutputPin+0x1a6>
	case TIMER3:
		switch (A_Channel)
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	f200 8083 	bhi.w	8002d7e <MTIMER_voidEnableOutputPin+0x1aa>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <MTIMER_voidEnableOutputPin+0xac>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002c9f 	.word	0x08002c9f
 8002c88:	08002cad 	.word	0x08002cad
 8002c8c:	08002cbb 	.word	0x08002cbb
		{
		case CHANNEL1:
			SET_BIT (TIM3->CCER, CCER_CC1E);
 8002c90:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <MTIMER_voidEnableOutputPin+0x1c0>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a3f      	ldr	r2, [pc, #252]	; (8002d94 <MTIMER_voidEnableOutputPin+0x1c0>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6213      	str	r3, [r2, #32]
			break;
 8002c9c:	e014      	b.n	8002cc8 <MTIMER_voidEnableOutputPin+0xf4>
		case CHANNEL2:
			SET_BIT (TIM3->CCER, CCER_CC2E);
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <MTIMER_voidEnableOutputPin+0x1c0>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a3c      	ldr	r2, [pc, #240]	; (8002d94 <MTIMER_voidEnableOutputPin+0x1c0>)
 8002ca4:	f043 0310 	orr.w	r3, r3, #16
 8002ca8:	6213      	str	r3, [r2, #32]
			break;
 8002caa:	e00d      	b.n	8002cc8 <MTIMER_voidEnableOutputPin+0xf4>
		case CHANNEL3:
			SET_BIT (TIM3->CCER, CCER_CC3E);
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <MTIMER_voidEnableOutputPin+0x1c0>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <MTIMER_voidEnableOutputPin+0x1c0>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6213      	str	r3, [r2, #32]
			break;
 8002cb8:	e006      	b.n	8002cc8 <MTIMER_voidEnableOutputPin+0xf4>
		case CHANNEL4:
			SET_BIT (TIM3->CCER, CCER_CC4E);
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <MTIMER_voidEnableOutputPin+0x1c0>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a35      	ldr	r2, [pc, #212]	; (8002d94 <MTIMER_voidEnableOutputPin+0x1c0>)
 8002cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cc4:	6213      	str	r3, [r2, #32]
			break;
 8002cc6:	bf00      	nop
		}
		break;
 8002cc8:	e059      	b.n	8002d7e <MTIMER_voidEnableOutputPin+0x1aa>
	case TIMER4:
		switch (A_Channel)
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d857      	bhi.n	8002d82 <MTIMER_voidEnableOutputPin+0x1ae>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <MTIMER_voidEnableOutputPin+0x104>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002ce9 	.word	0x08002ce9
 8002cdc:	08002cf7 	.word	0x08002cf7
 8002ce0:	08002d05 	.word	0x08002d05
 8002ce4:	08002d13 	.word	0x08002d13
		{
		case CHANNEL1:
			SET_BIT (TIM4->CCER, CCER_CC1E);
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <MTIMER_voidEnableOutputPin+0x1c4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <MTIMER_voidEnableOutputPin+0x1c4>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6213      	str	r3, [r2, #32]
			break;
 8002cf4:	e014      	b.n	8002d20 <MTIMER_voidEnableOutputPin+0x14c>
		case CHANNEL2:
			SET_BIT (TIM4->CCER, CCER_CC2E);
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <MTIMER_voidEnableOutputPin+0x1c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <MTIMER_voidEnableOutputPin+0x1c4>)
 8002cfc:	f043 0310 	orr.w	r3, r3, #16
 8002d00:	6213      	str	r3, [r2, #32]
			break;
 8002d02:	e00d      	b.n	8002d20 <MTIMER_voidEnableOutputPin+0x14c>
		case CHANNEL3:
			SET_BIT (TIM4->CCER, CCER_CC3E);
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <MTIMER_voidEnableOutputPin+0x1c4>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a23      	ldr	r2, [pc, #140]	; (8002d98 <MTIMER_voidEnableOutputPin+0x1c4>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6213      	str	r3, [r2, #32]
			break;
 8002d10:	e006      	b.n	8002d20 <MTIMER_voidEnableOutputPin+0x14c>
		case CHANNEL4:
			SET_BIT (TIM4->CCER, CCER_CC4E);
 8002d12:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <MTIMER_voidEnableOutputPin+0x1c4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <MTIMER_voidEnableOutputPin+0x1c4>)
 8002d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d1c:	6213      	str	r3, [r2, #32]
			break;
 8002d1e:	bf00      	nop
		}
		break;
 8002d20:	e02f      	b.n	8002d82 <MTIMER_voidEnableOutputPin+0x1ae>
	case TIMER5:
		switch (A_Channel)
 8002d22:	79bb      	ldrb	r3, [r7, #6]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d82d      	bhi.n	8002d86 <MTIMER_voidEnableOutputPin+0x1b2>
 8002d2a:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <MTIMER_voidEnableOutputPin+0x15c>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002d4f 	.word	0x08002d4f
 8002d38:	08002d5d 	.word	0x08002d5d
 8002d3c:	08002d6b 	.word	0x08002d6b
		{
		case CHANNEL1:
			SET_BIT (TIM5->CCER, CCER_CC1E);
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <MTIMER_voidEnableOutputPin+0x1c8>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <MTIMER_voidEnableOutputPin+0x1c8>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
			break;
 8002d4c:	e014      	b.n	8002d78 <MTIMER_voidEnableOutputPin+0x1a4>
		case CHANNEL2:
			SET_BIT (TIM5->CCER, CCER_CC2E);
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <MTIMER_voidEnableOutputPin+0x1c8>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <MTIMER_voidEnableOutputPin+0x1c8>)
 8002d54:	f043 0310 	orr.w	r3, r3, #16
 8002d58:	6213      	str	r3, [r2, #32]
			break;
 8002d5a:	e00d      	b.n	8002d78 <MTIMER_voidEnableOutputPin+0x1a4>
		case CHANNEL3:
			SET_BIT (TIM5->CCER, CCER_CC3E);
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MTIMER_voidEnableOutputPin+0x1c8>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <MTIMER_voidEnableOutputPin+0x1c8>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6213      	str	r3, [r2, #32]
			break;
 8002d68:	e006      	b.n	8002d78 <MTIMER_voidEnableOutputPin+0x1a4>
		case CHANNEL4:
			SET_BIT (TIM5->CCER, CCER_CC4E);
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <MTIMER_voidEnableOutputPin+0x1c8>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <MTIMER_voidEnableOutputPin+0x1c8>)
 8002d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d74:	6213      	str	r3, [r2, #32]
			break;
 8002d76:	bf00      	nop
		}
		break;
 8002d78:	e005      	b.n	8002d86 <MTIMER_voidEnableOutputPin+0x1b2>
		break;
 8002d7a:	bf00      	nop
 8002d7c:	e004      	b.n	8002d88 <MTIMER_voidEnableOutputPin+0x1b4>
		break;
 8002d7e:	bf00      	nop
 8002d80:	e002      	b.n	8002d88 <MTIMER_voidEnableOutputPin+0x1b4>
		break;
 8002d82:	bf00      	nop
 8002d84:	e000      	b.n	8002d88 <MTIMER_voidEnableOutputPin+0x1b4>
		break;
 8002d86:	bf00      	nop
	}
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00

08002da0 <MTIMER_voidSetPWMOption>:

void MTIMER_voidSetPWMOption (TIMERS_t A_Timer, CHANNELS_t A_Channel, u32 A_ARRValue, u32 A_CRRValue, u16 A_u16Prescaler)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	460b      	mov	r3, r1
 8002db0:	73bb      	strb	r3, [r7, #14]
	MTIMER_voidSetPrescaler(A_Timer, A_u16Prescaler);
 8002db2:	8b3a      	ldrh	r2, [r7, #24]
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fd35 	bl	8001828 <MTIMER_voidSetPrescaler>
	MTIMER_voidSetTimerCountDirection(A_Timer, UPCOUNT);
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fd64 	bl	8001890 <MTIMER_voidSetTimerCountDirection>
	MTIMER_voidSetChannelDirection(A_Timer, A_Channel, CHANNEL_OUTPUT);
 8002dc8:	7bb9      	ldrb	r1, [r7, #14]
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fdd8 	bl	8001984 <MTIMER_voidSetChannelDirection>
	MTIMER_voidSetOutputMode(A_Timer, A_Channel,PWM_MODE_1);
 8002dd4:	7bb9      	ldrb	r1, [r7, #14]
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2206      	movs	r2, #6
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fd8a 	bl	80028f4 <MTIMER_voidSetOutputMode>
	MTIMER_voidSetARRValue(A_Timer,A_ARRValue);
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fc55 	bl	8002694 <MTIMER_voidSetARRValue>
	MTIMER_voidSetCCRValue(A_Timer,A_Channel,A_CRRValue);
 8002dea:	7bb9      	ldrb	r1, [r7, #14]
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fc81 	bl	80026f8 <MTIMER_voidSetCCRValue>
	MTIMER_voidEnableOutputPin(A_Timer,A_Channel);
 8002df6:	7bba      	ldrb	r2, [r7, #14]
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fee9 	bl	8002bd4 <MTIMER_voidEnableOutputPin>
	MTIMER_voidEnableTimer(A_Timer);
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fc81 	bl	800170c <MTIMER_voidEnableTimer>
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <TIM2_IRQHandler>:


void TIM2_IRQHandler (void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	if (TIMER_CallBack[TIMER2] != NULL)
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <TIM2_IRQHandler+0x18>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <TIM2_IRQHandler+0x12>
	{
		TIMER_CallBack[TIMER2]();
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <TIM2_IRQHandler+0x18>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4798      	blx	r3
	}
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000078 	.word	0x20000078

08002e30 <TIM3_IRQHandler>:
void TIM3_IRQHandler (void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	if (TIMER_CallBack[TIMER3] != NULL)
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <TIM3_IRQHandler+0x18>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <TIM3_IRQHandler+0x12>
	{
		TIMER_CallBack[TIMER3]();
 8002e3c:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <TIM3_IRQHandler+0x18>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4798      	blx	r3
	}
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000078 	.word	0x20000078

08002e4c <TIM4_IRQHandler>:
void TIM4_IRQHandler (void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	if (TIMER_CallBack[TIMER4] != NULL)
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <TIM4_IRQHandler+0x18>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <TIM4_IRQHandler+0x12>
	{
		TIMER_CallBack[TIMER4]();
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <TIM4_IRQHandler+0x18>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4798      	blx	r3
	}
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000078 	.word	0x20000078

08002e68 <TIM5_IRQHandler>:
void TIM5_IRQHandler (void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	if (TIMER_CallBack[TIMER5] != NULL)
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <TIM5_IRQHandler+0x18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <TIM5_IRQHandler+0x12>
	{
		TIMER_CallBack[TIMER5]();
 8002e74:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <TIM5_IRQHandler+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4798      	blx	r3
	}
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000078 	.word	0x20000078

08002e84 <MUART1_voidInit>:
#include "../include/MCAL/UART/MUART_Config.h"

pf pfGlobalNotificationFunction = NULL;

void MUART1_voidInit (void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
	/* Set Baud rate value */
	UART1->BRR = MUART1_BRR_VALUE;
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002e8a:	2212      	movs	r2, #18
 8002e8c:	609a      	str	r2, [r3, #8]
	/* Set Oversampling value */
	UART1->CR1.OVER8 = MUART1_OVERSAMPLING;
 8002e8e:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002e90:	68d3      	ldr	r3, [r2, #12]
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e96:	60d3      	str	r3, [r2, #12]
	/* Set Data length */
	UART1->CR1.M = MUART1_DATA_LENGTH;
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002e9a:	68d3      	ldr	r3, [r2, #12]
 8002e9c:	f36f 330c 	bfc	r3, #12, #1
 8002ea0:	60d3      	str	r3, [r2, #12]
	/* Parity mode */
	UART1->CR1.PCE = MUART1_PARITY_MODE;
 8002ea2:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002ea4:	68d3      	ldr	r3, [r2, #12]
 8002ea6:	f36f 238a 	bfc	r3, #10, #1
 8002eaa:	60d3      	str	r3, [r2, #12]
#if MUART_ENABLE == MUART1_PARITY_MODE
	UART1->CR1.PS = MUART1_PARITY_SELECTION;
#endif
	/* Transmission complete interrupt */
	UART1->CR1.TCIE = MUART1_TRANSMISSION_COMPELETE_INTERRUPT;
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002eae:	68d3      	ldr	r3, [r2, #12]
 8002eb0:	f36f 1386 	bfc	r3, #6, #1
 8002eb4:	60d3      	str	r3, [r2, #12]
	/* Read data register interrupt */
	UART1->CR1.RXNEIE = MUART1_READ_DATA_REGISTER_EMPTY_INTERRUPT;
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002eb8:	68d3      	ldr	r3, [r2, #12]
 8002eba:	f36f 1345 	bfc	r3, #5, #1
 8002ebe:	60d3      	str	r3, [r2, #12]
	/* SEt stop bits */
	UART1->CR2 &= ~(MASK_2BITS << CR2_STOP0);
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002ec6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eca:	6113      	str	r3, [r2, #16]
	UART1->CR2 |=  (MUART1_STOP_BITS << CR2_STOP0);
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	6113      	str	r3, [r2, #16]

	UART1->SR = 0;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <MUART1_voidInit+0x60>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	40011000 	.word	0x40011000

08002ee8 <MUART1_voidEnable>:
	}
	return Local_u8ErrorStatus;
}

void MUART1_voidEnable (void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
	/* Enable Transmitter */
	UART1->CR1.TE = MUART1_TRANSMITTER_ENABLE;
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <MUART1_voidEnable+0x2c>)
 8002eee:	68d3      	ldr	r3, [r2, #12]
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	60d3      	str	r3, [r2, #12]
	/* Enable Receiver */
	UART1->CR1.RE = MUART1_RECEIVER_ENABLE;
 8002ef6:	4a07      	ldr	r2, [pc, #28]	; (8002f14 <MUART1_voidEnable+0x2c>)
 8002ef8:	68d3      	ldr	r3, [r2, #12]
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	60d3      	str	r3, [r2, #12]
	/* Enable USART */
	UART1->CR1.UE = MUART_ENABLE;
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <MUART1_voidEnable+0x2c>)
 8002f02:	68d3      	ldr	r3, [r2, #12]
 8002f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f08:	60d3      	str	r3, [r2, #12]
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40011000 	.word	0x40011000

08002f18 <MUART2_voidInit>:
		/* Do Nothing */
	}
}

void MUART2_voidInit (void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	/* Set Baud rate value */
	UART2->BRR = MUART2_BRR_VALUE;
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f1e:	f640 5202 	movw	r2, #3330	; 0xd02
 8002f22:	609a      	str	r2, [r3, #8]
	/* Set Oversampling value */
	UART2->CR1.OVER8 = MUART2_OVERSAMPLING;
 8002f24:	4a15      	ldr	r2, [pc, #84]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f26:	68d3      	ldr	r3, [r2, #12]
 8002f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2c:	60d3      	str	r3, [r2, #12]
	/* Set Data length */
	UART2->CR1.M = MUART2_DATA_LENGTH;
 8002f2e:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f30:	68d3      	ldr	r3, [r2, #12]
 8002f32:	f36f 330c 	bfc	r3, #12, #1
 8002f36:	60d3      	str	r3, [r2, #12]
	/* Parity mode */
	UART2->CR1.PCE = MUART2_PARITY_MODE;
 8002f38:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f3a:	68d3      	ldr	r3, [r2, #12]
 8002f3c:	f36f 238a 	bfc	r3, #10, #1
 8002f40:	60d3      	str	r3, [r2, #12]
#if MUART_ENABLE == MUART2_PARITY_MODE
	UART2->CR1.PS = MUART2_PARITY_SELECTION;
#endif
	/* Transmission complete interrupt */
	UART2->CR1.TCIE = MUART2_TRANSMISSION_COMPELETE_INTERRUPT;
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f44:	68d3      	ldr	r3, [r2, #12]
 8002f46:	f36f 1386 	bfc	r3, #6, #1
 8002f4a:	60d3      	str	r3, [r2, #12]
	/* Read data register interrupt */
	UART2->CR1.RXNEIE = MUART2_READ_DATA_REGISTER_EMPTY_INTERRUPT;
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f4e:	68d3      	ldr	r3, [r2, #12]
 8002f50:	f36f 1345 	bfc	r3, #5, #1
 8002f54:	60d3      	str	r3, [r2, #12]
	/* SEt stop bits */
	UART2->CR2 &= ~(MASK_2BITS << CR2_STOP0);
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f60:	6113      	str	r3, [r2, #16]
	UART2->CR2 |=  (MUART2_STOP_BITS << CR2_STOP0);
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f64:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	6113      	str	r3, [r2, #16]

	UART2->SR = 0;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <MUART2_voidInit+0x64>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40004400 	.word	0x40004400

08002f80 <MUART2_voidTransmitCharacter>:
		Local_u8Iterator++;
	}
}

void MUART2_voidTransmitCharacter (u8 Copy_u8Character)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
	UART2->DR = Copy_u8Character;
 8002f8a:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <MUART2_voidTransmitCharacter+0x30>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	6053      	str	r3, [r2, #4]
	while (!GET_BIT(UART2->SR, SR_TC));
 8002f90:	bf00      	nop
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <MUART2_voidTransmitCharacter+0x30>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f8      	beq.n	8002f92 <MUART2_voidTransmitCharacter+0x12>
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40004400 	.word	0x40004400

08002fb4 <MUART2_voidEnable>:
	}
	return Local_u8ErrorStatus;
}

void MUART2_voidEnable (void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
	/* Enable Transmitter */
	UART2->CR1.TE = MUART2_TRANSMITTER_ENABLE;
 8002fb8:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <MUART2_voidEnable+0x2c>)
 8002fba:	68d3      	ldr	r3, [r2, #12]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	60d3      	str	r3, [r2, #12]
	/* Enable Receiver */
	UART2->CR1.RE = MUART2_RECEIVER_ENABLE;
 8002fc2:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <MUART2_voidEnable+0x2c>)
 8002fc4:	68d3      	ldr	r3, [r2, #12]
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	60d3      	str	r3, [r2, #12]
	/* Enable USART */
	UART2->CR1.UE = MUART_ENABLE;
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <MUART2_voidEnable+0x2c>)
 8002fce:	68d3      	ldr	r3, [r2, #12]
 8002fd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fd4:	60d3      	str	r3, [r2, #12]
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40004400 	.word	0x40004400

08002fe4 <USART1_IRQHandler>:
		/* Do Nothing */
	}
}

void USART1_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	if (NULL != pfGlobalNotificationFunction)
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <USART1_IRQHandler+0x18>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <USART1_IRQHandler+0x12>
	{
		pfGlobalNotificationFunction ();
 8002ff0:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <USART1_IRQHandler+0x18>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4798      	blx	r3
	}
	else
	{
		/* Do Nothing */
	}
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000088 	.word	0x20000088

08003000 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0

}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <MUART2_voidSendNumbers>:


void MUART2_voidSendNumbers (u32 A_u32Number)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	u32 local_u32Temp = 1;
 8003024:	2301      	movs	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
	while (A_u32Number != 0)
 8003028:	e017      	b.n	800305a <MUART2_voidSendNumbers+0x3e>
	{
		local_u32Temp = local_u32Temp*10 + (A_u32Number%10);
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4618      	mov	r0, r3
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <MUART2_voidSendNumbers+0x84>)
 800303a:	fba3 2301 	umull	r2, r3, r3, r1
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	1aca      	subs	r2, r1, r3
 800304a:	1883      	adds	r3, r0, r2
 800304c:	60fb      	str	r3, [r7, #12]
		A_u32Number /= 10;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <MUART2_voidSendNumbers+0x84>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	08db      	lsrs	r3, r3, #3
 8003058:	607b      	str	r3, [r7, #4]
	while (A_u32Number != 0)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e4      	bne.n	800302a <MUART2_voidSendNumbers+0xe>
	}
	while (local_u32Temp != 1)
 8003060:	e015      	b.n	800308e <MUART2_voidSendNumbers+0x72>
	{
		MUART2_voidTransmitCharacter((local_u32Temp%10)+'0');
 8003062:	68f9      	ldr	r1, [r7, #12]
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <MUART2_voidSendNumbers+0x84>)
 8003066:	fba3 2301 	umull	r2, r3, r3, r1
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	1aca      	subs	r2, r1, r3
 8003076:	b2d3      	uxtb	r3, r2
 8003078:	3330      	adds	r3, #48	; 0x30
 800307a:	b2db      	uxtb	r3, r3
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff7f 	bl	8002f80 <MUART2_voidTransmitCharacter>
		local_u32Temp /= 10;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <MUART2_voidSendNumbers+0x84>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	60fb      	str	r3, [r7, #12]
	while (local_u32Temp != 1)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d1e6      	bne.n	8003062 <MUART2_voidSendNumbers+0x46>
	}
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	cccccccd 	.word	0xcccccccd

080030a4 <HUltrasonic_voidInit>:
#include "../include/HAL/Ultrasonic/Ultrasonic_Configurations.h"

u16 global_u16Distance = 0;

void HUltrasonic_voidInit (void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	MTIMER_voidSetPrescaler(ULTRA_SONIC_TIMER, 15);
 80030a8:	210f      	movs	r1, #15
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7fe fbbc 	bl	8001828 <MTIMER_voidSetPrescaler>
	MTIMER_voidSetTimerCountDirection(ULTRA_SONIC_TIMER, UPCOUNT);
 80030b0:	2100      	movs	r1, #0
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fe fbec 	bl	8001890 <MTIMER_voidSetTimerCountDirection>
	MTIMER_voidSetChannelDirection(ULTRA_SONIC_TIMER, CHANNEL1, CHANNELx_INPUT_TIx);
 80030b8:	2201      	movs	r2, #1
 80030ba:	2101      	movs	r1, #1
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fe fc61 	bl	8001984 <MTIMER_voidSetChannelDirection>
	MTIMER_voidSetChannelInputPolarity(ULTRA_SONIC_TIMER, CHANNEL1, RISING_EDGE);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2101      	movs	r1, #1
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fe fdbc 	bl	8001c44 <MTIMER_voidSetChannelInputPolarity>
	MTIMER_EnableChannelInterrupt(ULTRA_SONIC_TIMER, CHANNEL1);
 80030cc:	2101      	movs	r1, #1
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7fe fb5a 	bl	8001788 <MTIMER_EnableChannelInterrupt>
	MTIMER_voidSetChannelDirection(ULTRA_SONIC_TIMER, CHANNEL2, CHANNELx_INPUT_TIy);
 80030d4:	2202      	movs	r2, #2
 80030d6:	2102      	movs	r1, #2
 80030d8:	2000      	movs	r0, #0
 80030da:	f7fe fc53 	bl	8001984 <MTIMER_voidSetChannelDirection>
	MTIMER_voidSetChannelInputPolarity(ULTRA_SONIC_TIMER, CHANNEL2, FALLING_EDGE);
 80030de:	2201      	movs	r2, #1
 80030e0:	2102      	movs	r1, #2
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7fe fdae 	bl	8001c44 <MTIMER_voidSetChannelInputPolarity>
	MTIMER_EnableChannelInterrupt(ULTRA_SONIC_TIMER, CHANNEL2);
 80030e8:	2102      	movs	r1, #2
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fe fb4c 	bl	8001788 <MTIMER_EnableChannelInterrupt>
	MTIMER_voidSetCallBack(ULTRA_SONIC_TIMER, HUltrasonic_voidCallBack);
 80030f0:	4906      	ldr	r1, [pc, #24]	; (800310c <HUltrasonic_voidInit+0x68>)
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7ff fa88 	bl	8002608 <MTIMER_voidSetCallBack>
	MTIMER_voidSetARRValue(ULTRA_SONIC_TIMER, 0xffff);
 80030f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7ff fac9 	bl	8002694 <MTIMER_voidSetARRValue>
	MTIMER_voidEnableTimer(ULTRA_SONIC_TIMER);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fe fb02 	bl	800170c <MTIMER_voidEnableTimer>
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}
 800310c:	08003111 	.word	0x08003111

08003110 <HUltrasonic_voidCallBack>:
	return global_u16Distance;
}


static void HUltrasonic_voidCallBack (void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
	u32 local_u32Value = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
	if (MTIMER_u8ReadInterruptState(ULTRA_SONIC_TIMER, CHANNEL1) == 1)
 800311a:	2101      	movs	r1, #1
 800311c:	2000      	movs	r0, #0
 800311e:	f7ff fb9b 	bl	8002858 <MTIMER_u8ReadInterruptState>
 8003122:	4603      	mov	r3, r0
 8003124:	2b01      	cmp	r3, #1
 8003126:	d108      	bne.n	800313a <HUltrasonic_voidCallBack+0x2a>
	{
		MTIMER_u32ReadChannelValue(ULTRA_SONIC_TIMER, CHANNEL1);
 8003128:	2101      	movs	r1, #1
 800312a:	2000      	movs	r0, #0
 800312c:	f7ff f9b8 	bl	80024a0 <MTIMER_u32ReadChannelValue>
		MTIMER_voidSetCounterValue(ULTRA_SONIC_TIMER, 0);
 8003130:	2100      	movs	r1, #0
 8003132:	2000      	movs	r0, #0
 8003134:	f7ff fa7c 	bl	8002630 <MTIMER_voidSetCounterValue>
	else if (MTIMER_u8ReadInterruptState(ULTRA_SONIC_TIMER, CHANNEL2) == 1)
	{
		local_u32Value = MTIMER_u32ReadChannelValue(ULTRA_SONIC_TIMER, CHANNEL2);
		global_u16Distance = local_u32Value/58;
	}
}
 8003138:	e013      	b.n	8003162 <HUltrasonic_voidCallBack+0x52>
	else if (MTIMER_u8ReadInterruptState(ULTRA_SONIC_TIMER, CHANNEL2) == 1)
 800313a:	2102      	movs	r1, #2
 800313c:	2000      	movs	r0, #0
 800313e:	f7ff fb8b 	bl	8002858 <MTIMER_u8ReadInterruptState>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10c      	bne.n	8003162 <HUltrasonic_voidCallBack+0x52>
		local_u32Value = MTIMER_u32ReadChannelValue(ULTRA_SONIC_TIMER, CHANNEL2);
 8003148:	2102      	movs	r1, #2
 800314a:	2000      	movs	r0, #0
 800314c:	f7ff f9a8 	bl	80024a0 <MTIMER_u32ReadChannelValue>
 8003150:	6078      	str	r0, [r7, #4]
		global_u16Distance = local_u32Value/58;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <HUltrasonic_voidCallBack+0x5c>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	b29a      	uxth	r2, r3
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HUltrasonic_voidCallBack+0x60>)
 8003160:	801a      	strh	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	8d3dcb09 	.word	0x8d3dcb09
 8003170:	2000008c 	.word	0x2000008c

08003174 <HUltrasonic_voidReadDistanceBlocking>:


u16 HUltrasonic_voidReadDistanceBlocking (void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
	/*Send Trigger signal*/
	u32 local_u32Value = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	603b      	str	r3, [r7, #0]
	MGPIO_voidSetResetPin(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, GPIO_SET);
 800317e:	2201      	movs	r2, #1
 8003180:	2104      	movs	r1, #4
 8003182:	2000      	movs	r0, #0
 8003184:	f7fe f86c 	bl	8001260 <MGPIO_voidSetResetPin>
	for (u32 Delay = 0 ; Delay < 100 ; Delay++)
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	e003      	b.n	8003196 <HUltrasonic_voidReadDistanceBlocking+0x22>
	{
		asm("NOP");
 800318e:	bf00      	nop
	for (u32 Delay = 0 ; Delay < 100 ; Delay++)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3301      	adds	r3, #1
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b63      	cmp	r3, #99	; 0x63
 800319a:	d9f8      	bls.n	800318e <HUltrasonic_voidReadDistanceBlocking+0x1a>
	}
	MGPIO_voidSetResetPin(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, GPIO_RESET);
 800319c:	2200      	movs	r2, #0
 800319e:	2104      	movs	r1, #4
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7fe f85d 	bl	8001260 <MGPIO_voidSetResetPin>
	/*Wait for rising edge*/
	while(MTIMER_u8ReadInterruptState(ULTRA_SONIC_TIMER, CHANNEL1) == 0);
 80031a6:	bf00      	nop
 80031a8:	2101      	movs	r1, #1
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7ff fb54 	bl	8002858 <MTIMER_u8ReadInterruptState>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f8      	beq.n	80031a8 <HUltrasonic_voidReadDistanceBlocking+0x34>
	MTIMER_u32ReadChannelValue(ULTRA_SONIC_TIMER, CHANNEL1);
 80031b6:	2101      	movs	r1, #1
 80031b8:	2000      	movs	r0, #0
 80031ba:	f7ff f971 	bl	80024a0 <MTIMER_u32ReadChannelValue>
	MTIMER_voidSetCounterValue(ULTRA_SONIC_TIMER, 0);
 80031be:	2100      	movs	r1, #0
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7ff fa35 	bl	8002630 <MTIMER_voidSetCounterValue>
	/*Wait for falling edge*/
	while(MTIMER_u8ReadInterruptState(ULTRA_SONIC_TIMER, CHANNEL2) == 0);
 80031c6:	bf00      	nop
 80031c8:	2102      	movs	r1, #2
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7ff fb44 	bl	8002858 <MTIMER_u8ReadInterruptState>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f8      	beq.n	80031c8 <HUltrasonic_voidReadDistanceBlocking+0x54>
	local_u32Value = MTIMER_u32ReadChannelValue(ULTRA_SONIC_TIMER, CHANNEL2);
 80031d6:	2102      	movs	r1, #2
 80031d8:	2000      	movs	r0, #0
 80031da:	f7ff f961 	bl	80024a0 <MTIMER_u32ReadChannelValue>
 80031de:	6038      	str	r0, [r7, #0]
	global_u16Distance = local_u32Value/58;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4a06      	ldr	r2, [pc, #24]	; (80031fc <HUltrasonic_voidReadDistanceBlocking+0x88>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <HUltrasonic_voidReadDistanceBlocking+0x8c>)
 80031ee:	801a      	strh	r2, [r3, #0]
	return global_u16Distance;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HUltrasonic_voidReadDistanceBlocking+0x8c>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	8d3dcb09 	.word	0x8d3dcb09
 8003200:	2000008c 	.word	0x2000008c

08003204 <Ultrasonic_handler>:
		vTaskDelay(1);
	}
}

static void Ultrasonic_handler(void*parameters)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	static u32 speed=0;
	static s32 Distance = 0;
	while(1)
	{
		//xSemaphoreTake(Automatic_mode,portMAX_DELAY);
		Distance = HUltrasonic_voidReadDistanceBlocking();
 800320c:	f7ff ffb2 	bl	8003174 <HUltrasonic_voidReadDistanceBlocking>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <Ultrasonic_handler+0x78>)
 8003216:	601a      	str	r2, [r3, #0]
		MUART2_voidSendNumbers(Distance);
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <Ultrasonic_handler+0x78>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fefd 	bl	800301c <MUART2_voidSendNumbers>
		//MUART1_voidTransmitCharacter('\n');
		if ((Distance*25) >= 1000 )
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <Ultrasonic_handler+0x78>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003234:	db04      	blt.n	8003240 <Ultrasonic_handler+0x3c>
		{
			speed = 1000;
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <Ultrasonic_handler+0x7c>)
 8003238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e011      	b.n	8003264 <Ultrasonic_handler+0x60>
		}
		else if (Distance <= 6)
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <Ultrasonic_handler+0x78>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b06      	cmp	r3, #6
 8003246:	dc03      	bgt.n	8003250 <Ultrasonic_handler+0x4c>
		{
			speed = 0;
 8003248:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <Ultrasonic_handler+0x7c>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e009      	b.n	8003264 <Ultrasonic_handler+0x60>
		}
		else
		{
			speed = (Distance*25);
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <Ultrasonic_handler+0x78>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	461a      	mov	r2, r3
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <Ultrasonic_handler+0x7c>)
 8003262:	601a      	str	r2, [r3, #0]
		}
		HMotor_VoidCarSpeed(speed);
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <Ultrasonic_handler+0x7c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd fcc8 	bl	8000c00 <HMotor_VoidCarSpeed>
		HMotor_VoidCarForword();
 8003270:	f7fd fcae 	bl	8000bd0 <HMotor_VoidCarForword>
		//xSemaphoreGive(Automatic_mode);
		vTaskDelay(1);
 8003274:	2001      	movs	r0, #1
 8003276:	f000 ffd5 	bl	8004224 <vTaskDelay>
		Distance = HUltrasonic_voidReadDistanceBlocking();
 800327a:	e7c7      	b.n	800320c <Ultrasonic_handler+0x8>
 800327c:	200000a8 	.word	0x200000a8
 8003280:	200000ac 	.word	0x200000ac

08003284 <LDR_Task>:
	}
}


static void LDR_Task(void*parameters)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	u32 LDR_Read=0;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//xSemaphoreTake(Automatic_mode,portMAX_DELAY);
		LDR_Read=HLDR_u32MeasureLightIntensity();
 8003290:	f7fd fc0e 	bl	8000ab0 <HLDR_u32MeasureLightIntensity>
 8003294:	60f8      	str	r0, [r7, #12]
		if(LDR_Read>50000)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f24c 3250 	movw	r2, #50000	; 0xc350
 800329c:	4293      	cmp	r3, r2
 800329e:	d903      	bls.n	80032a8 <LDR_Task+0x24>
		{
			LDR_Read=50000;
 80032a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e006      	b.n	80032b6 <LDR_Task+0x32>
		}
		else if (LDR_Read<10000)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d801      	bhi.n	80032b6 <LDR_Task+0x32>
		{
			LDR_Read = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
		}
		MTIMER_voidSetCCRValue(TIMER3,CHANNEL3,(LDR_Read/50));
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <LDR_Task+0x50>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	461a      	mov	r2, r3
 80032c2:	2103      	movs	r1, #3
 80032c4:	2001      	movs	r0, #1
 80032c6:	f7ff fa17 	bl	80026f8 <MTIMER_voidSetCCRValue>
		//xSemaphoreGive(Automatic_mode);
		vTaskDelay(10);
 80032ca:	200a      	movs	r0, #10
 80032cc:	f000 ffaa 	bl	8004224 <vTaskDelay>
		LDR_Read=HLDR_u32MeasureLightIntensity();
 80032d0:	e7de      	b.n	8003290 <LDR_Task+0xc>
 80032d2:	bf00      	nop
 80032d4:	51eb851f 	.word	0x51eb851f

080032d8 <Airbag_Task>:
}



static void Airbag_Task(void*parameters)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	u32 Airbag_Read=0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//xSemaphoreTake(Automatic_mode,portMAX_DELAY);
//		MADC_VoidStartChannelConversion(ADC_CHANNEL1);
		Airbag_Read=HFSR_u32MeasureForce();
 80032e4:	f7fd fb9c 	bl	8000a20 <HFSR_u32MeasureForce>
 80032e8:	60f8      	str	r0, [r7, #12]
		if(Airbag_Read<2000000)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <Airbag_Task+0x30>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d806      	bhi.n	8003300 <Airbag_Task+0x28>
		{
			xSemaphoreGive(Accident_Key);
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <Airbag_Task+0x34>)
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	2300      	movs	r3, #0
 80032f8:	2200      	movs	r2, #0
 80032fa:	2100      	movs	r1, #0
 80032fc:	f000 fb70 	bl	80039e0 <xQueueGenericSend>
		else
		{

		}
		//xSemaphoreGive(Automatic_mode);
		vTaskDelay(1);
 8003300:	2001      	movs	r0, #1
 8003302:	f000 ff8f 	bl	8004224 <vTaskDelay>
		Airbag_Read=HFSR_u32MeasureForce();
 8003306:	e7ed      	b.n	80032e4 <Airbag_Task+0xc>
 8003308:	001e847f 	.word	0x001e847f
 800330c:	200000a0 	.word	0x200000a0

08003310 <Accident_Task>:
	}
}
static void Accident_Task(void*parameters)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]


	while(1)
	{
		xSemaphoreTake(Accident_Key,portMAX_DELAY);
 8003318:	4b07      	ldr	r3, [pc, #28]	; (8003338 <Accident_Task+0x28>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f04f 31ff 	mov.w	r1, #4294967295
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fc43 	bl	8003bac <xQueueSemaphoreTake>
		MGPIO_voidSetPinValue(GPIO_PORTA, GPIO_PIN8, GPIO_PIN_HIGH);
 8003326:	2201      	movs	r2, #1
 8003328:	2108      	movs	r1, #8
 800332a:	2000      	movs	r0, #0
 800332c:	f7fd ff02 	bl	8001134 <MGPIO_voidSetPinValue>
		vTaskSuspendAll();
 8003330:	f000 fff8 	bl	8004324 <vTaskSuspendAll>
		xSemaphoreTake(Accident_Key,portMAX_DELAY);
 8003334:	e7f0      	b.n	8003318 <Accident_Task+0x8>
 8003336:	bf00      	nop
 8003338:	200000a0 	.word	0x200000a0

0800333c <main>:
}

 */

int main(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8

	BaseType_t status;
	MRCC_voidInit();
 8003342:	f7fe f901 	bl	8001548 <MRCC_voidInit>
	MRCC_voidEnablePeripheral(MRCC_AHB1, MRCC_AHB1_GPIOA);
 8003346:	2100      	movs	r1, #0
 8003348:	2002      	movs	r0, #2
 800334a:	f7fe f937 	bl	80015bc <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(MRCC_AHB1, MRCC_AHB1_GPIOB);
 800334e:	2101      	movs	r1, #1
 8003350:	2002      	movs	r0, #2
 8003352:	f7fe f933 	bl	80015bc <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(MRCC_APB2, MRCC_APB2_USART1);
 8003356:	2104      	movs	r1, #4
 8003358:	2001      	movs	r0, #1
 800335a:	f7fe f92f 	bl	80015bc <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(MRCC_APB1, MRCC_APB1_USART2);
 800335e:	2111      	movs	r1, #17
 8003360:	2000      	movs	r0, #0
 8003362:	f7fe f92b 	bl	80015bc <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(MRCC_APB1, MRCC_APB1_TIM4);
 8003366:	2102      	movs	r1, #2
 8003368:	2000      	movs	r0, #0
 800336a:	f7fe f927 	bl	80015bc <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(MRCC_APB1, MRCC_APB1_TIM3);
 800336e:	2101      	movs	r1, #1
 8003370:	2000      	movs	r0, #0
 8003372:	f7fe f923 	bl	80015bc <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(MRCC_APB1, MRCC_APB1_TIM2);
 8003376:	2100      	movs	r1, #0
 8003378:	2000      	movs	r0, #0
 800337a:	f7fe f91f 	bl	80015bc <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(MRCC_APB2, MRCC_APB2_ADC1);
 800337e:	2108      	movs	r1, #8
 8003380:	2001      	movs	r0, #1
 8003382:	f7fe f91b 	bl	80015bc <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(MRCC_APB1, MRCC_APB1_SPI2);
 8003386:	210e      	movs	r1, #14
 8003388:	2000      	movs	r0, #0
 800338a:	f7fe f917 	bl	80015bc <MRCC_voidEnablePeripheral>

	/******************ADC**********************/
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN0, GPIO_ANALOG);
 800338e:	2203      	movs	r2, #3
 8003390:	2100      	movs	r1, #0
 8003392:	2000      	movs	r0, #0
 8003394:	f7fd fd80 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN1, GPIO_ANALOG);
 8003398:	2203      	movs	r2, #3
 800339a:	2101      	movs	r1, #1
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fd7b 	bl	8000e98 <MGPIO_voidSetPinMode>

	/******************HC-05 pins*****************/
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN2, GPIO_ALT_FUNC);
 80033a2:	2202      	movs	r2, #2
 80033a4:	2102      	movs	r1, #2
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd fd76 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTA, GPIO_PIN2, GPIO_AF7);
 80033ac:	2207      	movs	r2, #7
 80033ae:	2102      	movs	r1, #2
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fd ffeb 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN3, GPIO_ALT_FUNC);
 80033b6:	2202      	movs	r2, #2
 80033b8:	2103      	movs	r1, #3
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fd fd6c 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTA, GPIO_PIN3, GPIO_AF7);
 80033c0:	2207      	movs	r2, #7
 80033c2:	2103      	movs	r1, #3
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fd ffe1 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	/***************Ultrasonic Trig***************/
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN4, GPIO_OUTPUT);
 80033ca:	2201      	movs	r2, #1
 80033cc:	2104      	movs	r1, #4
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fd fd62 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinOutputMode(GPIO_PORTA, GPIO_PIN4, GPIO_PUSH_PULL,GPIO_MID_SPEED );
 80033d4:	2301      	movs	r3, #1
 80033d6:	2200      	movs	r2, #0
 80033d8:	2104      	movs	r1, #4
 80033da:	2000      	movs	r0, #0
 80033dc:	f7fd fdde 	bl	8000f9c <MGPIO_voidSetPinOutputMode>
	MGPIO_voidSetResetPin(GPIO_PORTA, GPIO_PIN4, GPIO_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2104      	movs	r1, #4
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fd ff3b 	bl	8001260 <MGPIO_voidSetResetPin>

	/*****************Ultrasonic echo*************/
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN5, GPIO_ALT_FUNC);
 80033ea:	2202      	movs	r2, #2
 80033ec:	2105      	movs	r1, #5
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fd fd52 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTA, GPIO_PIN5, GPIO_AF1);
 80033f4:	2201      	movs	r2, #1
 80033f6:	2105      	movs	r1, #5
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7fd ffc7 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>

	/*******************Motor Init pins*********************/
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN6, GPIO_ALT_FUNC);
 80033fe:	2202      	movs	r2, #2
 8003400:	2106      	movs	r1, #6
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fd48 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTA, GPIO_PIN6, GPIO_AF2);
 8003408:	2202      	movs	r2, #2
 800340a:	2106      	movs	r1, #6
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd ffbd 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN7, GPIO_ALT_FUNC);
 8003412:	2202      	movs	r2, #2
 8003414:	2107      	movs	r1, #7
 8003416:	2000      	movs	r0, #0
 8003418:	f7fd fd3e 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTA, GPIO_PIN7, GPIO_AF2);
 800341c:	2202      	movs	r2, #2
 800341e:	2107      	movs	r1, #7
 8003420:	2000      	movs	r0, #0
 8003422:	f7fd ffb3 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	/*********************** FSR LED ***************************/
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN8, GPIO_OUTPUT);
 8003426:	2201      	movs	r2, #1
 8003428:	2108      	movs	r1, #8
 800342a:	2000      	movs	r0, #0
 800342c:	f7fd fd34 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinOutputMode(GPIO_PORTA, GPIO_PIN8, GPIO_PUSH_PULL,GPIO_MID_SPEED );
 8003430:	2301      	movs	r3, #1
 8003432:	2200      	movs	r2, #0
 8003434:	2108      	movs	r1, #8
 8003436:	2000      	movs	r0, #0
 8003438:	f7fd fdb0 	bl	8000f9c <MGPIO_voidSetPinOutputMode>
	MGPIO_voidSetResetPin(GPIO_PORTA, GPIO_PIN8, GPIO_RESET);
 800343c:	2200      	movs	r2, #0
 800343e:	2108      	movs	r1, #8
 8003440:	2000      	movs	r0, #0
 8003442:	f7fd ff0d 	bl	8001260 <MGPIO_voidSetResetPin>

	/****************Uart1******************/
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN9, GPIO_ALT_FUNC);
 8003446:	2202      	movs	r2, #2
 8003448:	2109      	movs	r1, #9
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd fd24 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTA, GPIO_PIN9, GPIO_AF7);
 8003450:	2207      	movs	r2, #7
 8003452:	2109      	movs	r1, #9
 8003454:	2000      	movs	r0, #0
 8003456:	f7fd ff99 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN10, GPIO_ALT_FUNC);
 800345a:	2202      	movs	r2, #2
 800345c:	210a      	movs	r1, #10
 800345e:	2000      	movs	r0, #0
 8003460:	f7fd fd1a 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTA, GPIO_PIN10, GPIO_AF7);
 8003464:	2207      	movs	r2, #7
 8003466:	210a      	movs	r1, #10
 8003468:	2000      	movs	r0, #0
 800346a:	f7fd ff8f 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	/*****************Testing Pin*****************/
	MGPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN11, GPIO_OUTPUT);
 800346e:	2201      	movs	r2, #1
 8003470:	210b      	movs	r1, #11
 8003472:	2000      	movs	r0, #0
 8003474:	f7fd fd10 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinOutputMode(GPIO_PORTA, GPIO_PIN11, GPIO_PUSH_PULL,GPIO_MID_SPEED );
 8003478:	2301      	movs	r3, #1
 800347a:	2200      	movs	r2, #0
 800347c:	210b      	movs	r1, #11
 800347e:	2000      	movs	r0, #0
 8003480:	f7fd fd8c 	bl	8000f9c <MGPIO_voidSetPinOutputMode>
	MGPIO_voidSetResetPin(GPIO_PORTA, GPIO_PIN11, GPIO_SET);
 8003484:	2201      	movs	r2, #1
 8003486:	210b      	movs	r1, #11
 8003488:	2000      	movs	r0, #0
 800348a:	f7fd fee9 	bl	8001260 <MGPIO_voidSetResetPin>

	/*********Light control led***************/
	MGPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN0, GPIO_ALT_FUNC);
 800348e:	2202      	movs	r2, #2
 8003490:	2100      	movs	r1, #0
 8003492:	2001      	movs	r0, #1
 8003494:	f7fd fd00 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTB, GPIO_PIN0, GPIO_AF2);
 8003498:	2202      	movs	r2, #2
 800349a:	2100      	movs	r1, #0
 800349c:	2001      	movs	r0, #1
 800349e:	f7fd ff75 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	MTIMER_voidSetPWMOption(TIMER3, CHANNEL3, 1000, 0, 15);
 80034a2:	230f      	movs	r3, #15
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ac:	2103      	movs	r1, #3
 80034ae:	2001      	movs	r0, #1
 80034b0:	f7ff fc76 	bl	8002da0 <MTIMER_voidSetPWMOption>
	/*************SPI pins init****************/
	MGPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN12, GPIO_ALT_FUNC);
 80034b4:	2202      	movs	r2, #2
 80034b6:	210c      	movs	r1, #12
 80034b8:	2001      	movs	r0, #1
 80034ba:	f7fd fced 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTB, GPIO_PIN12, GPIO_AF5);
 80034be:	2205      	movs	r2, #5
 80034c0:	210c      	movs	r1, #12
 80034c2:	2001      	movs	r0, #1
 80034c4:	f7fd ff62 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	MGPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN13, GPIO_ALT_FUNC);
 80034c8:	2202      	movs	r2, #2
 80034ca:	210d      	movs	r1, #13
 80034cc:	2001      	movs	r0, #1
 80034ce:	f7fd fce3 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTB, GPIO_PIN13, GPIO_AF5);
 80034d2:	2205      	movs	r2, #5
 80034d4:	210d      	movs	r1, #13
 80034d6:	2001      	movs	r0, #1
 80034d8:	f7fd ff58 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	MGPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN14, GPIO_ALT_FUNC);
 80034dc:	2202      	movs	r2, #2
 80034de:	210e      	movs	r1, #14
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7fd fcd9 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTB, GPIO_PIN14, GPIO_AF5);
 80034e6:	2205      	movs	r2, #5
 80034e8:	210e      	movs	r1, #14
 80034ea:	2001      	movs	r0, #1
 80034ec:	f7fd ff4e 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>
	MGPIO_voidSetPinMode(GPIO_PORTB, GPIO_PIN15, GPIO_ALT_FUNC);
 80034f0:	2202      	movs	r2, #2
 80034f2:	210f      	movs	r1, #15
 80034f4:	2001      	movs	r0, #1
 80034f6:	f7fd fccf 	bl	8000e98 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinAltrenativeFunction(GPIO_PORTB, GPIO_PIN15, GPIO_AF5);
 80034fa:	2205      	movs	r2, #5
 80034fc:	210f      	movs	r1, #15
 80034fe:	2001      	movs	r0, #1
 8003500:	f7fd ff44 	bl	800138c <MGPIO_voidSetPinAltrenativeFunction>

	/***********Some inits**************/

	MUART1_voidInit();
 8003504:	f7ff fcbe 	bl	8002e84 <MUART1_voidInit>
	MUART1_voidEnable();
 8003508:	f7ff fcee 	bl	8002ee8 <MUART1_voidEnable>
	MUART2_voidInit();
 800350c:	f7ff fd04 	bl	8002f18 <MUART2_voidInit>
	MUART2_voidEnable();
 8003510:	f7ff fd50 	bl	8002fb4 <MUART2_voidEnable>
	MSPI2_voidInit();
 8003514:	f7fe f8ac 	bl	8001670 <MSPI2_voidInit>
	HUltrasonic_voidInit();
 8003518:	f7ff fdc4 	bl	80030a4 <HUltrasonic_voidInit>
	MADC_VoidInit();
 800351c:	f7fd fb86 	bl	8000c2c <MADC_VoidInit>
	MADC_VoidEnable();
 8003520:	f7fd fc40 	bl	8000da4 <MADC_VoidEnable>
	HMotor_VoidCarInit();
 8003524:	f7fd fb10 	bl	8000b48 <HMotor_VoidCarInit>

	/******************Bluetooth**********************/
	//status=xTaskCreate(Movement_handler,"RC Car",150,0,1,&Move_Handle);
	//configASSERT(status==pdPASS);
	/*******************LDR Task***********************/
	status=xTaskCreate(LDR_Task,"LDR",150,0,1,&LDR_Handle);
 8003528:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <main+0x2dc>)
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	2301      	movs	r3, #1
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2300      	movs	r3, #0
 8003532:	2296      	movs	r2, #150	; 0x96
 8003534:	4939      	ldr	r1, [pc, #228]	; (800361c <main+0x2e0>)
 8003536:	483a      	ldr	r0, [pc, #232]	; (8003620 <main+0x2e4>)
 8003538:	f000 fd2e 	bl	8003f98 <xTaskCreate>
 800353c:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d00a      	beq.n	800355a <main+0x21e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <main+0x21c>

	/******************  Adaptive cruise control ***********************/
	status=xTaskCreate(Ultrasonic_handler,"Ultrasonic",150,0,3,&Ultrasonic_Handle);
 800355a:	4b32      	ldr	r3, [pc, #200]	; (8003624 <main+0x2e8>)
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	2303      	movs	r3, #3
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	2296      	movs	r2, #150	; 0x96
 8003566:	4930      	ldr	r1, [pc, #192]	; (8003628 <main+0x2ec>)
 8003568:	4830      	ldr	r0, [pc, #192]	; (800362c <main+0x2f0>)
 800356a:	f000 fd15 	bl	8003f98 <xTaskCreate>
 800356e:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d00a      	beq.n	800358c <main+0x250>
        __asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	60fb      	str	r3, [r7, #12]
    }
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <main+0x24e>

	/**************** Air Bag***************************/
	status=xTaskCreate(Airbag_Task,"Airbag",150,0,4,&Airbag_handle);
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <main+0x2f4>)
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	2304      	movs	r3, #4
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2300      	movs	r3, #0
 8003596:	2296      	movs	r2, #150	; 0x96
 8003598:	4926      	ldr	r1, [pc, #152]	; (8003634 <main+0x2f8>)
 800359a:	4827      	ldr	r0, [pc, #156]	; (8003638 <main+0x2fc>)
 800359c:	f000 fcfc 	bl	8003f98 <xTaskCreate>
 80035a0:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d00a      	beq.n	80035be <main+0x282>
        __asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	60bb      	str	r3, [r7, #8]
    }
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <main+0x280>

	status=xTaskCreate(Accident_Task,"Accident",150,0,6,&Accident_handle);
 80035be:	4b1f      	ldr	r3, [pc, #124]	; (800363c <main+0x300>)
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	2306      	movs	r3, #6
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	2296      	movs	r2, #150	; 0x96
 80035ca:	491d      	ldr	r1, [pc, #116]	; (8003640 <main+0x304>)
 80035cc:	481d      	ldr	r0, [pc, #116]	; (8003644 <main+0x308>)
 80035ce:	f000 fce3 	bl	8003f98 <xTaskCreate>
 80035d2:	6178      	str	r0, [r7, #20]
	configASSERT(status==pdPASS);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d00a      	beq.n	80035f0 <main+0x2b4>
        __asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	607b      	str	r3, [r7, #4]
    }
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <main+0x2b2>
	/*********** Create Accident Key************/
	Accident_Key=xSemaphoreCreateBinary();
 80035f0:	2203      	movs	r2, #3
 80035f2:	2100      	movs	r1, #0
 80035f4:	2001      	movs	r0, #1
 80035f6:	f000 f971 	bl	80038dc <xQueueGenericCreate>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a12      	ldr	r2, [pc, #72]	; (8003648 <main+0x30c>)
 80035fe:	6013      	str	r3, [r2, #0]
	Normal_mode=xSemaphoreCreateBinary();
 8003600:	2203      	movs	r2, #3
 8003602:	2100      	movs	r1, #0
 8003604:	2001      	movs	r0, #1
 8003606:	f000 f969 	bl	80038dc <xQueueGenericCreate>
 800360a:	4603      	mov	r3, r0
 800360c:	4a0f      	ldr	r2, [pc, #60]	; (800364c <main+0x310>)
 800360e:	6013      	str	r3, [r2, #0]
	if(Q1==NULL)
	{

	}*/

	vTaskStartScheduler();
 8003610:	f000 fe3c 	bl	800428c <vTaskStartScheduler>

	while(1)
 8003614:	e7fe      	b.n	8003614 <main+0x2d8>
 8003616:	bf00      	nop
 8003618:	20000094 	.word	0x20000094
 800361c:	080056b4 	.word	0x080056b4
 8003620:	08003285 	.word	0x08003285
 8003624:	20000090 	.word	0x20000090
 8003628:	080056b8 	.word	0x080056b8
 800362c:	08003205 	.word	0x08003205
 8003630:	20000098 	.word	0x20000098
 8003634:	080056c4 	.word	0x080056c4
 8003638:	080032d9 	.word	0x080032d9
 800363c:	2000009c 	.word	0x2000009c
 8003640:	080056cc 	.word	0x080056cc
 8003644:	08003311 	.word	0x08003311
 8003648:	200000a0 	.word	0x200000a0
 800364c:	200000a4 	.word	0x200000a4

08003650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003650:	480d      	ldr	r0, [pc, #52]	; (8003688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003654:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <LoopForever+0x6>)
  ldr r1, =_edata
 800365a:	490d      	ldr	r1, [pc, #52]	; (8003690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800365c:	4a0d      	ldr	r2, [pc, #52]	; (8003694 <LoopForever+0xe>)
  movs r3, #0
 800365e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003660:	e002      	b.n	8003668 <LoopCopyDataInit>

08003662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003666:	3304      	adds	r3, #4

08003668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800366a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800366c:	d3f9      	bcc.n	8003662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003670:	4c0a      	ldr	r4, [pc, #40]	; (800369c <LoopForever+0x16>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003674:	e001      	b.n	800367a <LoopFillZerobss>

08003676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003678:	3204      	adds	r2, #4

0800367a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800367a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800367c:	d3fb      	bcc.n	8003676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800367e:	f001 ffcb 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003682:	f7ff fe5b 	bl	800333c <main>

08003686 <LoopForever>:

LoopForever:
  b LoopForever
 8003686:	e7fe      	b.n	8003686 <LoopForever>
  ldr   r0, =_estack
 8003688:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800368c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003690:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8003694:	080056e8 	.word	0x080056e8
  ldr r2, =_sbss
 8003698:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800369c:	20002144 	.word	0x20002144

080036a0 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036a0:	e7fe      	b.n	80036a0 <BusFault_Handler>

080036a2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f103 0208 	add.w	r2, r3, #8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ba:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f103 0208 	add.w	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f103 0208 	add.w	r2, r3, #8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d103      	bne.n	8003764 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e00c      	b.n	800377e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3308      	adds	r3, #8
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e002      	b.n	8003772 <vListInsert+0x2e>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d2f6      	bcs.n	800376c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6852      	ldr	r2, [r2, #4]
 80037d6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d103      	bne.n	80037ea <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <xQueueGenericReset+0x2a>
        __asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	60bb      	str	r3, [r7, #8]
    }
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003836:	f001 fc17 	bl	8005068 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	441a      	add	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	3b01      	subs	r3, #1
 8003868:	68f9      	ldr	r1, [r7, #12]
 800386a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	441a      	add	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	22ff      	movs	r2, #255	; 0xff
 800387a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	22ff      	movs	r2, #255	; 0xff
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d114      	bne.n	80038b6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01a      	beq.n	80038ca <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3310      	adds	r3, #16
 8003898:	4618      	mov	r0, r3
 800389a:	f000 ff25 	bl	80046e8 <xTaskRemoveFromEventList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d012      	beq.n	80038ca <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <xQueueGenericReset+0xcc>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	e009      	b.n	80038ca <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3310      	adds	r3, #16
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fef1 	bl	80036a2 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3324      	adds	r3, #36	; 0x24
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff feec 	bl	80036a2 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80038ca:	f001 fbfd 	bl	80050c8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80038ce:	2301      	movs	r3, #1
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	; 0x30
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <xQueueGenericCreate+0x2a>
        __asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	61bb      	str	r3, [r7, #24]
    }
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <xQueueGenericCreate+0x48>
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	d101      	bne.n	8003928 <xQueueGenericCreate+0x4c>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <xQueueGenericCreate+0x4e>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <xQueueGenericCreate+0x68>
        __asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	617b      	str	r3, [r7, #20]
    }
 8003940:	bf00      	nop
 8003942:	e7fe      	b.n	8003942 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800394a:	d90a      	bls.n	8003962 <xQueueGenericCreate+0x86>
        __asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	613b      	str	r3, [r7, #16]
    }
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	3350      	adds	r3, #80	; 0x50
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fc58 	bl	800521c <pvPortMalloc>
 800396c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	3350      	adds	r3, #80	; 0x50
 800397c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800397e:	79fa      	ldrb	r2, [r7, #7]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f805 	bl	800399a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003990:	6a3b      	ldr	r3, [r7, #32]
    }
 8003992:	4618      	mov	r0, r3
 8003994:	3728      	adds	r7, #40	; 0x28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e002      	b.n	80039bc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039c8:	2101      	movs	r1, #1
 80039ca:	69b8      	ldr	r0, [r7, #24]
 80039cc:	f7ff ff1e 	bl	800380c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericSend+0x32>
        __asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	623b      	str	r3, [r7, #32]
    }
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d103      	bne.n	8003a20 <xQueueGenericSend+0x40>
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <xQueueGenericSend+0x44>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <xQueueGenericSend+0x46>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <xQueueGenericSend+0x60>
        __asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	61fb      	str	r3, [r7, #28]
    }
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d103      	bne.n	8003a4e <xQueueGenericSend+0x6e>
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <xQueueGenericSend+0x72>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <xQueueGenericSend+0x74>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <xQueueGenericSend+0x8e>
        __asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	61bb      	str	r3, [r7, #24]
    }
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a6e:	f001 fafb 	bl	8005068 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <xQueueGenericSend+0xa4>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d129      	bne.n	8003ad8 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8a:	f000 f99b 	bl	8003dc4 <prvCopyDataToQueue>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d010      	beq.n	8003aba <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	3324      	adds	r3, #36	; 0x24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fe23 	bl	80046e8 <xTaskRemoveFromEventList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <xQueueGenericSend+0x1c8>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	e00a      	b.n	8003ad0 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <xQueueGenericSend+0x1c8>)
 8003ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003ad0:	f001 fafa 	bl	80050c8 <vPortExitCritical>
                return pdPASS;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e063      	b.n	8003ba0 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003ade:	f001 faf3 	bl	80050c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e05c      	b.n	8003ba0 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003aec:	f107 0310 	add.w	r3, r7, #16
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fe5b 	bl	80047ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003af6:	2301      	movs	r3, #1
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003afa:	f001 fae5 	bl	80050c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003afe:	f000 fc11 	bl	8004324 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003b02:	f001 fab1 	bl	8005068 <vPortEnterCritical>
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d103      	bne.n	8003b1c <xQueueGenericSend+0x13c>
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b22:	b25b      	sxtb	r3, r3
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d103      	bne.n	8003b32 <xQueueGenericSend+0x152>
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b32:	f001 fac9 	bl	80050c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b36:	1d3a      	adds	r2, r7, #4
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fe4a 	bl	80047d8 <xTaskCheckForTimeOut>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d124      	bne.n	8003b94 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b4c:	f000 fa0c 	bl	8003f68 <prvIsQueueFull>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d018      	beq.n	8003b88 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	3310      	adds	r3, #16
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fd9e 	bl	80046a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b66:	f000 f997 	bl	8003e98 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003b6a:	f000 fbe9 	bl	8004340 <xTaskResumeAll>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f af7c 	bne.w	8003a6e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <xQueueGenericSend+0x1c8>)
 8003b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	e772      	b.n	8003a6e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8a:	f000 f985 	bl	8003e98 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b8e:	f000 fbd7 	bl	8004340 <xTaskResumeAll>
 8003b92:	e76c      	b.n	8003a6e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b96:	f000 f97f 	bl	8003e98 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b9a:	f000 fbd1 	bl	8004340 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003b9e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3730      	adds	r7, #48	; 0x30
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	61bb      	str	r3, [r7, #24]
    }
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	617b      	str	r3, [r7, #20]
    }
 8003bf8:	bf00      	nop
 8003bfa:	e7fe      	b.n	8003bfa <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003bfc:	f001 fa34 	bl	8005068 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d024      	beq.n	8003c56 <xQueueSemaphoreTake+0xaa>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	1e5a      	subs	r2, r3, #1
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <xQueueSemaphoreTake+0x7a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c1c:	f001 f87e 	bl	8004d1c <pvTaskIncrementMutexHeldCount>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00f      	beq.n	8003c4e <xQueueSemaphoreTake+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	3310      	adds	r3, #16
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fd58 	bl	80046e8 <xTaskRemoveFromEventList>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <xQueueSemaphoreTake+0xa2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003c3e:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <xQueueSemaphoreTake+0x1e4>)
 8003c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003c4e:	f001 fa3b 	bl	80050c8 <vPortExitCritical>
                return pdPASS;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e097      	b.n	8003d86 <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d111      	bne.n	8003c80 <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <xQueueSemaphoreTake+0xcc>
        __asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	613b      	str	r3, [r7, #16]
    }
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueSemaphoreTake+0xca>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003c78:	f001 fa26 	bl	80050c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e082      	b.n	8003d86 <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fd8e 	bl	80047ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c94:	f001 fa18 	bl	80050c8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c98:	f000 fb44 	bl	8004324 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c9c:	f001 f9e4 	bl	8005068 <vPortEnterCritical>
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ca6:	b25b      	sxtb	r3, r3
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d103      	bne.n	8003cb6 <xQueueSemaphoreTake+0x10a>
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d103      	bne.n	8003ccc <xQueueSemaphoreTake+0x120>
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ccc:	f001 f9fc 	bl	80050c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cd0:	463a      	mov	r2, r7
 8003cd2:	f107 0308 	add.w	r3, r7, #8
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fd7d 	bl	80047d8 <xTaskCheckForTimeOut>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d132      	bne.n	8003d4a <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ce6:	f000 f929 	bl	8003f3c <prvIsQueueEmpty>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d026      	beq.n	8003d3e <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 8003cf8:	f001 f9b6 	bl	8005068 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fe8d 	bl	8004a20 <xTaskPriorityInherit>
 8003d06:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8003d08:	f001 f9de 	bl	80050c8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	3324      	adds	r3, #36	; 0x24
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fcc3 	bl	80046a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d1c:	f000 f8bc 	bl	8003e98 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003d20:	f000 fb0e 	bl	8004340 <xTaskResumeAll>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f47f af68 	bne.w	8003bfc <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <xQueueSemaphoreTake+0x1e4>)
 8003d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	e75e      	b.n	8003bfc <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d40:	f000 f8aa 	bl	8003e98 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d44:	f000 fafc 	bl	8004340 <xTaskResumeAll>
 8003d48:	e758      	b.n	8003bfc <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d4c:	f000 f8a4 	bl	8003e98 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d50:	f000 faf6 	bl	8004340 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d56:	f000 f8f1 	bl	8003f3c <prvIsQueueEmpty>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f43f af4d 	beq.w	8003bfc <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00d      	beq.n	8003d84 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8003d68:	f001 f97e 	bl	8005068 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d6e:	f000 f811 	bl	8003d94 <prvGetDisinheritPriorityAfterTimeout>
 8003d72:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	69f9      	ldr	r1, [r7, #28]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 ff40 	bl	8004c00 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003d80:	f001 f9a2 	bl	80050c8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003d84:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3730      	adds	r7, #48	; 0x30
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d006      	beq.n	8003db2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e001      	b.n	8003db6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003db6:	68fb      	ldr	r3, [r7, #12]
    }
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d14d      	bne.n	8003e86 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fe8c 	bl	8004b0c <xTaskPriorityDisinherit>
 8003df4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	e043      	b.n	8003e86 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d119      	bne.n	8003e38 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6858      	ldr	r0, [r3, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	f001 fc26 	bl	8005660 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	441a      	add	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d32b      	bcc.n	8003e86 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	e026      	b.n	8003e86 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68d8      	ldr	r0, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	461a      	mov	r2, r3
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	f001 fc0c 	bl	8005660 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	425b      	negs	r3, r3
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d207      	bcs.n	8003e74 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	425b      	negs	r3, r3
 8003e6e:	441a      	add	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d105      	bne.n	8003e86 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003e8e:	697b      	ldr	r3, [r7, #20]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003ea0:	f001 f8e2 	bl	8005068 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eaa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eac:	e011      	b.n	8003ed2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d012      	beq.n	8003edc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3324      	adds	r3, #36	; 0x24
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fc14 	bl	80046e8 <xTaskRemoveFromEventList>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003ec6:	f000 fced 	bl	80048a4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	dce9      	bgt.n	8003eae <prvUnlockQueue+0x16>
 8003eda:	e000      	b.n	8003ede <prvUnlockQueue+0x46>
                        break;
 8003edc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	22ff      	movs	r2, #255	; 0xff
 8003ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003ee6:	f001 f8ef 	bl	80050c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003eea:	f001 f8bd 	bl	8005068 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ef6:	e011      	b.n	8003f1c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d012      	beq.n	8003f26 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3310      	adds	r3, #16
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fbef 	bl	80046e8 <xTaskRemoveFromEventList>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003f10:	f000 fcc8 	bl	80048a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003f14:	7bbb      	ldrb	r3, [r7, #14]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	dce9      	bgt.n	8003ef8 <prvUnlockQueue+0x60>
 8003f24:	e000      	b.n	8003f28 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003f26:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	22ff      	movs	r2, #255	; 0xff
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003f30:	f001 f8ca 	bl	80050c8 <vPortExitCritical>
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f44:	f001 f890 	bl	8005068 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e001      	b.n	8003f5a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f5a:	f001 f8b5 	bl	80050c8 <vPortExitCritical>

    return xReturn;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003f70:	f001 f87a 	bl	8005068 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d102      	bne.n	8003f86 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e001      	b.n	8003f8a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f8a:	f001 f89d 	bl	80050c8 <vPortExitCritical>

    return xReturn;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af04      	add	r7, sp, #16
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f935 	bl	800521c <pvPortMalloc>
 8003fb2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00e      	beq.n	8003fd8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fba:	2058      	movs	r0, #88	; 0x58
 8003fbc:	f001 f92e 	bl	800521c <pvPortMalloc>
 8003fc0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8003fce:	e005      	b.n	8003fdc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003fd0:	6978      	ldr	r0, [r7, #20]
 8003fd2:	f001 fa03 	bl	80053dc <vPortFree>
 8003fd6:	e001      	b.n	8003fdc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d013      	beq.n	800400a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	9303      	str	r3, [sp, #12]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	9302      	str	r3, [sp, #8]
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f80e 	bl	800401a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003ffe:	69f8      	ldr	r0, [r7, #28]
 8004000:	f000 f8a2 	bl	8004148 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004004:	2301      	movs	r3, #1
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e002      	b.n	8004010 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
 800400e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004010:	69bb      	ldr	r3, [r7, #24]
    }
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b088      	sub	sp, #32
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	461a      	mov	r2, r3
 8004032:	21a5      	movs	r1, #165	; 0xa5
 8004034:	f001 fb22 	bl	800567c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004042:	3b01      	subs	r3, #1
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f023 0307 	bic.w	r3, r3, #7
 8004050:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <prvInitialiseNewTask+0x58>
        __asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	617b      	str	r3, [r7, #20]
    }
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01f      	beq.n	80040b8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e012      	b.n	80040a4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	7819      	ldrb	r1, [r3, #0]
 8004086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	3334      	adds	r3, #52	; 0x34
 800408e:	460a      	mov	r2, r1
 8004090:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3301      	adds	r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2b09      	cmp	r3, #9
 80040a8:	d9e9      	bls.n	800407e <prvInitialiseNewTask+0x64>
 80040aa:	e000      	b.n	80040ae <prvInitialiseNewTask+0x94>
            {
                break;
 80040ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040b6:	e003      	b.n	80040c0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d901      	bls.n	80040ca <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040c6:	2306      	movs	r3, #6
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	2200      	movs	r2, #0
 80040da:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	3304      	adds	r3, #4
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fafe 	bl	80036e2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	3318      	adds	r3, #24
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff faf9 	bl	80036e2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	f1c3 0207 	rsb	r2, r3, #7
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004104:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	3350      	adds	r3, #80	; 0x50
 800410a:	2204      	movs	r2, #4
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fab4 	bl	800567c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	3354      	adds	r3, #84	; 0x54
 8004118:	2201      	movs	r2, #1
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f001 faad 	bl	800567c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	68f9      	ldr	r1, [r7, #12]
 8004126:	69b8      	ldr	r0, [r7, #24]
 8004128:	f000 fe72 	bl	8004e10 <pxPortInitialiseStack>
 800412c:	4602      	mov	r2, r0
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800413e:	bf00      	nop
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004150:	f000 ff8a 	bl	8005068 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004154:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 800415c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800415e:	4b2b      	ldr	r3, [pc, #172]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004166:	4a29      	ldr	r2, [pc, #164]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800416c:	4b26      	ldr	r3, [pc, #152]	; (8004208 <prvAddNewTaskToReadyList+0xc0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d110      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004174:	f000 fbba 	bl	80048ec <prvInitialiseTaskLists>
 8004178:	e00d      	b.n	8004196 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800417a:	4b25      	ldr	r3, [pc, #148]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004182:	4b22      	ldr	r3, [pc, #136]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	429a      	cmp	r2, r3
 800418e:	d802      	bhi.n	8004196 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004190:	4a1e      	ldr	r2, [pc, #120]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004196:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <prvAddNewTaskToReadyList+0xcc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <prvAddNewTaskToReadyList+0xcc>)
 800419e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <prvAddNewTaskToReadyList+0xcc>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2201      	movs	r2, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <prvAddNewTaskToReadyList+0xd0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <prvAddNewTaskToReadyList+0xd0>)
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4a15      	ldr	r2, [pc, #84]	; (800421c <prvAddNewTaskToReadyList+0xd4>)
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7ff fa93 	bl	80036fc <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80041d6:	f000 ff77 	bl	80050c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <prvAddNewTaskToReadyList+0xc8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00e      	beq.n	8004200 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <prvAddNewTaskToReadyList+0xc4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d207      	bcs.n	8004200 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <prvAddNewTaskToReadyList+0xd8>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200001b0 	.word	0x200001b0
 800420c:	200000b0 	.word	0x200000b0
 8004210:	200001bc 	.word	0x200001bc
 8004214:	200001cc 	.word	0x200001cc
 8004218:	200001b8 	.word	0x200001b8
 800421c:	200000b4 	.word	0x200000b4
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d017      	beq.n	8004266 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004236:	4b13      	ldr	r3, [pc, #76]	; (8004284 <vTaskDelay+0x60>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <vTaskDelay+0x30>
        __asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60bb      	str	r3, [r7, #8]
    }
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004254:	f000 f866 	bl	8004324 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004258:	2100      	movs	r1, #0
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fd72 	bl	8004d44 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004260:	f000 f86e 	bl	8004340 <xTaskResumeAll>
 8004264:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <vTaskDelay+0x64>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	200001d8 	.word	0x200001d8
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <vTaskStartScheduler+0x7c>)
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	2300      	movs	r3, #0
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	2296      	movs	r2, #150	; 0x96
 800429e:	491b      	ldr	r1, [pc, #108]	; (800430c <vTaskStartScheduler+0x80>)
 80042a0:	481b      	ldr	r0, [pc, #108]	; (8004310 <vTaskStartScheduler+0x84>)
 80042a2:	f7ff fe79 	bl	8003f98 <xTaskCreate>
 80042a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d116      	bne.n	80042dc <vTaskStartScheduler+0x50>
        __asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	60bb      	str	r3, [r7, #8]
    }
 80042c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <vTaskStartScheduler+0x88>)
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295
 80042c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <vTaskStartScheduler+0x8c>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <vTaskStartScheduler+0x90>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80042d6:	f000 fe25 	bl	8004f24 <xPortStartScheduler>
 80042da:	e00e      	b.n	80042fa <vTaskStartScheduler+0x6e>
    {

        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d10a      	bne.n	80042fa <vTaskStartScheduler+0x6e>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	607b      	str	r3, [r7, #4]
    }
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <vTaskStartScheduler+0x94>)
 80042fc:	681b      	ldr	r3, [r3, #0]
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200001d4 	.word	0x200001d4
 800430c:	080056d8 	.word	0x080056d8
 8004310:	080048bd 	.word	0x080048bd
 8004314:	200001d0 	.word	0x200001d0
 8004318:	200001bc 	.word	0x200001bc
 800431c:	200001b4 	.word	0x200001b4
 8004320:	20000000 	.word	0x20000000

08004324 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <vTaskSuspendAll+0x18>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3301      	adds	r3, #1
 800432e:	4a03      	ldr	r2, [pc, #12]	; (800433c <vTaskSuspendAll+0x18>)
 8004330:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004332:	bf00      	nop
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	200001d8 	.word	0x200001d8

08004340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <xTaskResumeAll+0x114>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <xTaskResumeAll+0x2c>
        __asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	603b      	str	r3, [r7, #0]
    }
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800436c:	f000 fe7c 	bl	8005068 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004370:	4b38      	ldr	r3, [pc, #224]	; (8004454 <xTaskResumeAll+0x114>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3b01      	subs	r3, #1
 8004376:	4a37      	ldr	r2, [pc, #220]	; (8004454 <xTaskResumeAll+0x114>)
 8004378:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800437a:	4b36      	ldr	r3, [pc, #216]	; (8004454 <xTaskResumeAll+0x114>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d161      	bne.n	8004446 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004382:	4b35      	ldr	r3, [pc, #212]	; (8004458 <xTaskResumeAll+0x118>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d05d      	beq.n	8004446 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800438a:	e02e      	b.n	80043ea <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438c:	4b33      	ldr	r3, [pc, #204]	; (800445c <xTaskResumeAll+0x11c>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3318      	adds	r3, #24
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fa0c 	bl	80037b6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fa07 	bl	80037b6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	2201      	movs	r2, #1
 80043ae:	409a      	lsls	r2, r3
 80043b0:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <xTaskResumeAll+0x120>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <xTaskResumeAll+0x120>)
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4a27      	ldr	r2, [pc, #156]	; (8004464 <xTaskResumeAll+0x124>)
 80043c8:	441a      	add	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f7ff f993 	bl	80036fc <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <xTaskResumeAll+0x128>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80043e4:	4b21      	ldr	r3, [pc, #132]	; (800446c <xTaskResumeAll+0x12c>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ea:	4b1c      	ldr	r3, [pc, #112]	; (800445c <xTaskResumeAll+0x11c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1cc      	bne.n	800438c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80043f8:	f000 faf6 	bl	80049e8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <xTaskResumeAll+0x130>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d010      	beq.n	800442a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004408:	f000 f836 	bl	8004478 <xTaskIncrementTick>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004412:	4b16      	ldr	r3, [pc, #88]	; (800446c <xTaskResumeAll+0x12c>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f1      	bne.n	8004408 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <xTaskResumeAll+0x130>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <xTaskResumeAll+0x12c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004432:	2301      	movs	r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <xTaskResumeAll+0x134>)
 8004438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004446:	f000 fe3f 	bl	80050c8 <vPortExitCritical>

    return xAlreadyYielded;
 800444a:	68bb      	ldr	r3, [r7, #8]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200001d8 	.word	0x200001d8
 8004458:	200001b0 	.word	0x200001b0
 800445c:	20000170 	.word	0x20000170
 8004460:	200001b8 	.word	0x200001b8
 8004464:	200000b4 	.word	0x200000b4
 8004468:	200000b0 	.word	0x200000b0
 800446c:	200001c4 	.word	0x200001c4
 8004470:	200001c0 	.word	0x200001c0
 8004474:	e000ed04 	.word	0xe000ed04

08004478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004482:	4b4e      	ldr	r3, [pc, #312]	; (80045bc <xTaskIncrementTick+0x144>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 808e 	bne.w	80045a8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800448c:	4b4c      	ldr	r3, [pc, #304]	; (80045c0 <xTaskIncrementTick+0x148>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004494:	4a4a      	ldr	r2, [pc, #296]	; (80045c0 <xTaskIncrementTick+0x148>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d120      	bne.n	80044e2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80044a0:	4b48      	ldr	r3, [pc, #288]	; (80045c4 <xTaskIncrementTick+0x14c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <xTaskIncrementTick+0x48>
        __asm volatile
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	603b      	str	r3, [r7, #0]
    }
 80044bc:	bf00      	nop
 80044be:	e7fe      	b.n	80044be <xTaskIncrementTick+0x46>
 80044c0:	4b40      	ldr	r3, [pc, #256]	; (80045c4 <xTaskIncrementTick+0x14c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b40      	ldr	r3, [pc, #256]	; (80045c8 <xTaskIncrementTick+0x150>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3e      	ldr	r2, [pc, #248]	; (80045c4 <xTaskIncrementTick+0x14c>)
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4a3e      	ldr	r2, [pc, #248]	; (80045c8 <xTaskIncrementTick+0x150>)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <xTaskIncrementTick+0x154>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <xTaskIncrementTick+0x154>)
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	f000 fa83 	bl	80049e8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80044e2:	4b3b      	ldr	r3, [pc, #236]	; (80045d0 <xTaskIncrementTick+0x158>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d348      	bcc.n	800457e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ec:	4b35      	ldr	r3, [pc, #212]	; (80045c4 <xTaskIncrementTick+0x14c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f6:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <xTaskIncrementTick+0x158>)
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295
 80044fc:	601a      	str	r2, [r3, #0]
                    break;
 80044fe:	e03e      	b.n	800457e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004500:	4b30      	ldr	r3, [pc, #192]	; (80045c4 <xTaskIncrementTick+0x14c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d203      	bcs.n	8004520 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004518:	4a2d      	ldr	r2, [pc, #180]	; (80045d0 <xTaskIncrementTick+0x158>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800451e:	e02e      	b.n	800457e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	3304      	adds	r3, #4
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff f946 	bl	80037b6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3318      	adds	r3, #24
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff f93d 	bl	80037b6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	2201      	movs	r2, #1
 8004542:	409a      	lsls	r2, r3
 8004544:	4b23      	ldr	r3, [pc, #140]	; (80045d4 <xTaskIncrementTick+0x15c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <xTaskIncrementTick+0x15c>)
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <xTaskIncrementTick+0x160>)
 800455c:	441a      	add	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	3304      	adds	r3, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7ff f8c9 	bl	80036fc <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <xTaskIncrementTick+0x164>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	429a      	cmp	r2, r3
 8004576:	d3b9      	bcc.n	80044ec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004578:	2301      	movs	r3, #1
 800457a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800457c:	e7b6      	b.n	80044ec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800457e:	4b17      	ldr	r3, [pc, #92]	; (80045dc <xTaskIncrementTick+0x164>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	4914      	ldr	r1, [pc, #80]	; (80045d8 <xTaskIncrementTick+0x160>)
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d901      	bls.n	800459a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004596:	2301      	movs	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <xTaskIncrementTick+0x168>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80045a2:	2301      	movs	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e004      	b.n	80045b2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <xTaskIncrementTick+0x16c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3301      	adds	r3, #1
 80045ae:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <xTaskIncrementTick+0x16c>)
 80045b0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80045b2:	697b      	ldr	r3, [r7, #20]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	200001d8 	.word	0x200001d8
 80045c0:	200001b4 	.word	0x200001b4
 80045c4:	20000168 	.word	0x20000168
 80045c8:	2000016c 	.word	0x2000016c
 80045cc:	200001c8 	.word	0x200001c8
 80045d0:	200001d0 	.word	0x200001d0
 80045d4:	200001b8 	.word	0x200001b8
 80045d8:	200000b4 	.word	0x200000b4
 80045dc:	200000b0 	.word	0x200000b0
 80045e0:	200001c4 	.word	0x200001c4
 80045e4:	200001c0 	.word	0x200001c0

080045e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045ee:	4b27      	ldr	r3, [pc, #156]	; (800468c <vTaskSwitchContext+0xa4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <vTaskSwitchContext+0xa8>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80045fc:	e03f      	b.n	800467e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <vTaskSwitchContext+0xa8>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004604:	4b23      	ldr	r3, [pc, #140]	; (8004694 <vTaskSwitchContext+0xac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	fab3 f383 	clz	r3, r3
 8004610:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004612:	7afb      	ldrb	r3, [r7, #11]
 8004614:	f1c3 031f 	rsb	r3, r3, #31
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	491f      	ldr	r1, [pc, #124]	; (8004698 <vTaskSwitchContext+0xb0>)
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <vTaskSwitchContext+0x5c>
        __asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	607b      	str	r3, [r7, #4]
    }
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <vTaskSwitchContext+0x5a>
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4a12      	ldr	r2, [pc, #72]	; (8004698 <vTaskSwitchContext+0xb0>)
 8004650:	4413      	add	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3308      	adds	r3, #8
 8004666:	429a      	cmp	r2, r3
 8004668:	d104      	bne.n	8004674 <vTaskSwitchContext+0x8c>
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4a08      	ldr	r2, [pc, #32]	; (800469c <vTaskSwitchContext+0xb4>)
 800467c:	6013      	str	r3, [r2, #0]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	200001d8 	.word	0x200001d8
 8004690:	200001c4 	.word	0x200001c4
 8004694:	200001b8 	.word	0x200001b8
 8004698:	200000b4 	.word	0x200000b4
 800469c:	200000b0 	.word	0x200000b0

080046a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
    }
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <vTaskPlaceOnEventList+0x44>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3318      	adds	r3, #24
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff f838 	bl	8003744 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d4:	2101      	movs	r1, #1
 80046d6:	6838      	ldr	r0, [r7, #0]
 80046d8:	f000 fb34 	bl	8004d44 <prvAddCurrentTaskToDelayedList>
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	200000b0 	.word	0x200000b0

080046e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60fb      	str	r3, [r7, #12]
    }
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	3318      	adds	r3, #24
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff f84c 	bl	80037b6 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800471e:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <xTaskRemoveFromEventList+0xac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d11c      	bne.n	8004760 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3304      	adds	r3, #4
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff f843 	bl	80037b6 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	2201      	movs	r2, #1
 8004736:	409a      	lsls	r2, r3
 8004738:	4b17      	ldr	r3, [pc, #92]	; (8004798 <xTaskRemoveFromEventList+0xb0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4313      	orrs	r3, r2
 800473e:	4a16      	ldr	r2, [pc, #88]	; (8004798 <xTaskRemoveFromEventList+0xb0>)
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4a13      	ldr	r2, [pc, #76]	; (800479c <xTaskRemoveFromEventList+0xb4>)
 8004750:	441a      	add	r2, r3
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3304      	adds	r3, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f7fe ffcf 	bl	80036fc <vListInsertEnd>
 800475e:	e005      	b.n	800476c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	3318      	adds	r3, #24
 8004764:	4619      	mov	r1, r3
 8004766:	480e      	ldr	r0, [pc, #56]	; (80047a0 <xTaskRemoveFromEventList+0xb8>)
 8004768:	f7fe ffc8 	bl	80036fc <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <xTaskRemoveFromEventList+0xbc>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	429a      	cmp	r2, r3
 8004778:	d905      	bls.n	8004786 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800477e:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <xTaskRemoveFromEventList+0xc0>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e001      	b.n	800478a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800478a:	697b      	ldr	r3, [r7, #20]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	200001d8 	.word	0x200001d8
 8004798:	200001b8 	.word	0x200001b8
 800479c:	200000b4 	.word	0x200000b4
 80047a0:	20000170 	.word	0x20000170
 80047a4:	200000b0 	.word	0x200000b0
 80047a8:	200001c4 	.word	0x200001c4

080047ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <vTaskInternalSetTimeOutState+0x24>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <vTaskInternalSetTimeOutState+0x28>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	605a      	str	r2, [r3, #4]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	200001c8 	.word	0x200001c8
 80047d4:	200001b4 	.word	0x200001b4

080047d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	613b      	str	r3, [r7, #16]
    }
 80047fa:	bf00      	nop
 80047fc:	e7fe      	b.n	80047fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
    }
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800481a:	f000 fc25 	bl	8005068 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <xTaskCheckForTimeOut+0xc4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d102      	bne.n	800483e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e026      	b.n	800488c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <xTaskCheckForTimeOut+0xc8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d00a      	beq.n	8004860 <xTaskCheckForTimeOut+0x88>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	429a      	cmp	r2, r3
 8004852:	d305      	bcc.n	8004860 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004854:	2301      	movs	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e015      	b.n	800488c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	429a      	cmp	r2, r3
 8004868:	d20b      	bcs.n	8004882 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	1ad2      	subs	r2, r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff ff98 	bl	80047ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	e004      	b.n	800488c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004888:	2301      	movs	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800488c:	f000 fc1c 	bl	80050c8 <vPortExitCritical>

    return xReturn;
 8004890:	69fb      	ldr	r3, [r7, #28]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	200001b4 	.word	0x200001b4
 80048a0:	200001c8 	.word	0x200001c8

080048a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <vTaskMissedYield+0x14>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
}
 80048ae:	bf00      	nop
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	200001c4 	.word	0x200001c4

080048bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80048c4:	f000 f852 	bl	800496c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <prvIdleTask+0x28>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d9f9      	bls.n	80048c4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <prvIdleTask+0x2c>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80048e0:	e7f0      	b.n	80048c4 <prvIdleTask+0x8>
 80048e2:	bf00      	nop
 80048e4:	200000b4 	.word	0x200000b4
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	e00c      	b.n	8004912 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4a12      	ldr	r2, [pc, #72]	; (800494c <prvInitialiseTaskLists+0x60>)
 8004904:	4413      	add	r3, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fecb 	bl	80036a2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3301      	adds	r3, #1
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b06      	cmp	r3, #6
 8004916:	d9ef      	bls.n	80048f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004918:	480d      	ldr	r0, [pc, #52]	; (8004950 <prvInitialiseTaskLists+0x64>)
 800491a:	f7fe fec2 	bl	80036a2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800491e:	480d      	ldr	r0, [pc, #52]	; (8004954 <prvInitialiseTaskLists+0x68>)
 8004920:	f7fe febf 	bl	80036a2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004924:	480c      	ldr	r0, [pc, #48]	; (8004958 <prvInitialiseTaskLists+0x6c>)
 8004926:	f7fe febc 	bl	80036a2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800492a:	480c      	ldr	r0, [pc, #48]	; (800495c <prvInitialiseTaskLists+0x70>)
 800492c:	f7fe feb9 	bl	80036a2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004930:	480b      	ldr	r0, [pc, #44]	; (8004960 <prvInitialiseTaskLists+0x74>)
 8004932:	f7fe feb6 	bl	80036a2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004936:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <prvInitialiseTaskLists+0x78>)
 8004938:	4a05      	ldr	r2, [pc, #20]	; (8004950 <prvInitialiseTaskLists+0x64>)
 800493a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <prvInitialiseTaskLists+0x7c>)
 800493e:	4a05      	ldr	r2, [pc, #20]	; (8004954 <prvInitialiseTaskLists+0x68>)
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	200000b4 	.word	0x200000b4
 8004950:	20000140 	.word	0x20000140
 8004954:	20000154 	.word	0x20000154
 8004958:	20000170 	.word	0x20000170
 800495c:	20000184 	.word	0x20000184
 8004960:	2000019c 	.word	0x2000019c
 8004964:	20000168 	.word	0x20000168
 8004968:	2000016c 	.word	0x2000016c

0800496c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004972:	e019      	b.n	80049a8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004974:	f000 fb78 	bl	8005068 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004978:	4b10      	ldr	r3, [pc, #64]	; (80049bc <prvCheckTasksWaitingTermination+0x50>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe ff16 	bl	80037b6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <prvCheckTasksWaitingTermination+0x54>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	4a0b      	ldr	r2, [pc, #44]	; (80049c0 <prvCheckTasksWaitingTermination+0x54>)
 8004992:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <prvCheckTasksWaitingTermination+0x58>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3b01      	subs	r3, #1
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <prvCheckTasksWaitingTermination+0x58>)
 800499c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800499e:	f000 fb93 	bl	80050c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f810 	bl	80049c8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <prvCheckTasksWaitingTermination+0x58>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e1      	bne.n	8004974 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000184 	.word	0x20000184
 80049c0:	200001b0 	.word	0x200001b0
 80049c4:	20000198 	.word	0x20000198

080049c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fd01 	bl	80053dc <vPortFree>
                vPortFree( pxTCB );
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fcfe 	bl	80053dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <prvResetNextTaskUnblockTime+0x30>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <prvResetNextTaskUnblockTime+0x34>)
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295
 80049fc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80049fe:	e005      	b.n	8004a0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <prvResetNextTaskUnblockTime+0x30>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <prvResetNextTaskUnblockTime+0x34>)
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000168 	.word	0x20000168
 8004a1c:	200001d0 	.word	0x200001d0

08004a20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d05e      	beq.n	8004af4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3a:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <xTaskPriorityInherit+0xe0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d24e      	bcs.n	8004ae2 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	db06      	blt.n	8004a5a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <xTaskPriorityInherit+0xe0>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	f1c3 0207 	rsb	r2, r3, #7
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6959      	ldr	r1, [r3, #20]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4a26      	ldr	r2, [pc, #152]	; (8004b04 <xTaskPriorityInherit+0xe4>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4299      	cmp	r1, r3
 8004a70:	d12f      	bne.n	8004ad2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fe9d 	bl	80037b6 <uxListRemove>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	2201      	movs	r2, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43da      	mvns	r2, r3
 8004a8e:	4b1e      	ldr	r3, [pc, #120]	; (8004b08 <xTaskPriorityInherit+0xe8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4013      	ands	r3, r2
 8004a94:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <xTaskPriorityInherit+0xe8>)
 8004a96:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <xTaskPriorityInherit+0xe0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <xTaskPriorityInherit+0xe8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <xTaskPriorityInherit+0xe8>)
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4a10      	ldr	r2, [pc, #64]	; (8004b04 <xTaskPriorityInherit+0xe4>)
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f7fe fe16 	bl	80036fc <vListInsertEnd>
 8004ad0:	e004      	b.n	8004adc <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <xTaskPriorityInherit+0xe0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e008      	b.n	8004af4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <xTaskPriorityInherit+0xe0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d201      	bcs.n	8004af4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004af0:	2301      	movs	r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004af4:	68fb      	ldr	r3, [r7, #12]
    }
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200000b0 	.word	0x200000b0
 8004b04:	200000b4 	.word	0x200000b4
 8004b08:	200001b8 	.word	0x200001b8

08004b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d063      	beq.n	8004bea <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004b22:	4b34      	ldr	r3, [pc, #208]	; (8004bf4 <xTaskPriorityDisinherit+0xe8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d00a      	beq.n	8004b42 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	60fb      	str	r3, [r7, #12]
    }
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60bb      	str	r3, [r7, #8]
    }
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d039      	beq.n	8004bea <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d135      	bne.n	8004bea <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fe17 	bl	80037b6 <uxListRemove>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	2201      	movs	r2, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43da      	mvns	r2, r3
 8004b9a:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <xTaskPriorityDisinherit+0xec>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <xTaskPriorityDisinherit+0xec>)
 8004ba2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	f1c3 0207 	rsb	r2, r3, #7
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <xTaskPriorityDisinherit+0xec>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	4a0c      	ldr	r2, [pc, #48]	; (8004bf8 <xTaskPriorityDisinherit+0xec>)
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <xTaskPriorityDisinherit+0xf0>)
 8004bd8:	441a      	add	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fe fd8b 	bl	80036fc <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004bea:	697b      	ldr	r3, [r7, #20]
    }
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200000b0 	.word	0x200000b0
 8004bf8:	200001b8 	.word	0x200001b8
 8004bfc:	200000b4 	.word	0x200000b4

08004c00 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d077      	beq.n	8004d08 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
    }
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d902      	bls.n	8004c46 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	61fb      	str	r3, [r7, #28]
 8004c44:	e002      	b.n	8004c4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4a:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d058      	beq.n	8004d08 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d153      	bne.n	8004d08 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004c60:	4b2b      	ldr	r3, [pc, #172]	; (8004d10 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d10a      	bne.n	8004c80 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60bb      	str	r3, [r7, #8]
    }
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	db04      	blt.n	8004c9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f1c3 0207 	rsb	r2, r3, #7
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	6959      	ldr	r1, [r3, #20]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	4299      	cmp	r1, r3
 8004cb2:	d129      	bne.n	8004d08 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe fd7c 	bl	80037b6 <uxListRemove>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	2201      	movs	r2, #1
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004cd8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	2201      	movs	r2, #1
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	4a0b      	ldr	r2, [pc, #44]	; (8004d18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4a06      	ldr	r2, [pc, #24]	; (8004d14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004cfa:	441a      	add	r2, r3
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7fe fcfa 	bl	80036fc <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004d08:	bf00      	nop
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	200000b0 	.word	0x200000b0
 8004d14:	200000b4 	.word	0x200000b4
 8004d18:	200001b8 	.word	0x200001b8

08004d1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d2e:	3201      	adds	r2, #1
 8004d30:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004d32:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <pvTaskIncrementMutexHeldCount+0x24>)
 8004d34:	681b      	ldr	r3, [r3, #0]
    }
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	200000b0 	.word	0x200000b0

08004d44 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004d4e:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d54:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe fd2b 	bl	80037b6 <uxListRemove>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43da      	mvns	r2, r3
 8004d74:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d7c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d10a      	bne.n	8004d9c <prvAddCurrentTaskToDelayedList+0x58>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d007      	beq.n	8004d9c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	481a      	ldr	r0, [pc, #104]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d96:	f7fe fcb1 	bl	80036fc <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004d9a:	e026      	b.n	8004dea <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004da4:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d209      	bcs.n	8004dc8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db4:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7fe fcbf 	bl	8003744 <vListInsert>
}
 8004dc6:	e010      	b.n	8004dea <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7fe fcb5 	bl	8003744 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d202      	bcs.n	8004dea <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004de4:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6013      	str	r3, [r2, #0]
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200001b4 	.word	0x200001b4
 8004df8:	200000b0 	.word	0x200000b0
 8004dfc:	200001b8 	.word	0x200001b8
 8004e00:	2000019c 	.word	0x2000019c
 8004e04:	2000016c 	.word	0x2000016c
 8004e08:	20000168 	.word	0x20000168
 8004e0c:	200001d0 	.word	0x200001d0

08004e10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3b04      	subs	r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f023 0201 	bic.w	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b04      	subs	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004e40:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <pxPortInitialiseStack+0x64>)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b14      	subs	r3, #20
 8004e4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f06f 0202 	mvn.w	r2, #2
 8004e5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3b20      	subs	r3, #32
 8004e64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	08004e79 	.word	0x08004e79

08004e78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <prvTaskExitError+0x54>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d00a      	beq.n	8004ea2 <prvTaskExitError+0x2a>
        __asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
    }
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <prvTaskExitError+0x28>
        __asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
    }
 8004eb4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004eb6:	bf00      	nop
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0fc      	beq.n	8004eb8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000004 	.word	0x20000004

08004ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <pxCurrentTCBConst2>)
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	6808      	ldr	r0, [r1, #0]
 8004ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eda:	f380 8809 	msr	PSP, r0
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8811 	msr	BASEPRI, r0
 8004eea:	4770      	bx	lr
 8004eec:	f3af 8000 	nop.w

08004ef0 <pxCurrentTCBConst2>:
 8004ef0:	200000b0 	.word	0x200000b0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004ef8:	4808      	ldr	r0, [pc, #32]	; (8004f1c <prvPortStartFirstTask+0x24>)
 8004efa:	6800      	ldr	r0, [r0, #0]
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f380 8808 	msr	MSP, r0
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8814 	msr	CONTROL, r0
 8004f0a:	b662      	cpsie	i
 8004f0c:	b661      	cpsie	f
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	df00      	svc	0
 8004f18:	bf00      	nop
 8004f1a:	0000      	.short	0x0000
 8004f1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop

08004f24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f2a:	4b46      	ldr	r3, [pc, #280]	; (8005044 <xPortStartScheduler+0x120>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a46      	ldr	r2, [pc, #280]	; (8005048 <xPortStartScheduler+0x124>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10a      	bne.n	8004f4a <xPortStartScheduler+0x26>
        __asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	613b      	str	r3, [r7, #16]
    }
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f4a:	4b3e      	ldr	r3, [pc, #248]	; (8005044 <xPortStartScheduler+0x120>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a3f      	ldr	r2, [pc, #252]	; (800504c <xPortStartScheduler+0x128>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10a      	bne.n	8004f6a <xPortStartScheduler+0x46>
        __asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	60fb      	str	r3, [r7, #12]
    }
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f6a:	4b39      	ldr	r3, [pc, #228]	; (8005050 <xPortStartScheduler+0x12c>)
 8004f6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <xPortStartScheduler+0x130>)
 8004f90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f92:	4b31      	ldr	r3, [pc, #196]	; (8005058 <xPortStartScheduler+0x134>)
 8004f94:	2207      	movs	r2, #7
 8004f96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f98:	e009      	b.n	8004fae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <xPortStartScheduler+0x134>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	4a2d      	ldr	r2, [pc, #180]	; (8005058 <xPortStartScheduler+0x134>)
 8004fa2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b80      	cmp	r3, #128	; 0x80
 8004fb8:	d0ef      	beq.n	8004f9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fba:	4b27      	ldr	r3, [pc, #156]	; (8005058 <xPortStartScheduler+0x134>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1c3 0307 	rsb	r3, r3, #7
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d00a      	beq.n	8004fdc <xPortStartScheduler+0xb8>
        __asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60bb      	str	r3, [r7, #8]
    }
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <xPortStartScheduler+0x134>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <xPortStartScheduler+0x134>)
 8004fe4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fe6:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <xPortStartScheduler+0x134>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fee:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <xPortStartScheduler+0x134>)
 8004ff0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004ffa:	4b18      	ldr	r3, [pc, #96]	; (800505c <xPortStartScheduler+0x138>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a17      	ldr	r2, [pc, #92]	; (800505c <xPortStartScheduler+0x138>)
 8005000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005004:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <xPortStartScheduler+0x138>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a14      	ldr	r2, [pc, #80]	; (800505c <xPortStartScheduler+0x138>)
 800500c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005010:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005012:	f000 f8db 	bl	80051cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <xPortStartScheduler+0x13c>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800501c:	f000 f8f2 	bl	8005204 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <xPortStartScheduler+0x140>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0f      	ldr	r2, [pc, #60]	; (8005064 <xPortStartScheduler+0x140>)
 8005026:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800502a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800502c:	f7ff ff64 	bl	8004ef8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005030:	f7ff fada 	bl	80045e8 <vTaskSwitchContext>
    prvTaskExitError();
 8005034:	f7ff ff20 	bl	8004e78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	e000ed00 	.word	0xe000ed00
 8005048:	410fc271 	.word	0x410fc271
 800504c:	410fc270 	.word	0x410fc270
 8005050:	e000e400 	.word	0xe000e400
 8005054:	200001dc 	.word	0x200001dc
 8005058:	200001e0 	.word	0x200001e0
 800505c:	e000ed20 	.word	0xe000ed20
 8005060:	20000004 	.word	0x20000004
 8005064:	e000ef34 	.word	0xe000ef34

08005068 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
        __asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
    }
 8005080:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005082:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <vPortEnterCritical+0x58>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <vPortEnterCritical+0x58>)
 800508a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <vPortEnterCritical+0x58>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d10f      	bne.n	80050b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <vPortEnterCritical+0x5c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	603b      	str	r3, [r7, #0]
    }
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <vPortEnterCritical+0x4a>
    }
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	20000004 	.word	0x20000004
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80050ce:	4b12      	ldr	r3, [pc, #72]	; (8005118 <vPortExitCritical+0x50>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <vPortExitCritical+0x24>
        __asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	607b      	str	r3, [r7, #4]
    }
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <vPortExitCritical+0x50>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	4a09      	ldr	r2, [pc, #36]	; (8005118 <vPortExitCritical+0x50>)
 80050f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <vPortExitCritical+0x50>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <vPortExitCritical+0x42>
 80050fe:	2300      	movs	r3, #0
 8005100:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005108:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000004 	.word	0x20000004
 800511c:	00000000 	.word	0x00000000

08005120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005120:	f3ef 8009 	mrs	r0, PSP
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <pxCurrentTCBConst>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	f01e 0f10 	tst.w	lr, #16
 8005130:	bf08      	it	eq
 8005132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	6010      	str	r0, [r2, #0]
 800513c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005144:	f380 8811 	msr	BASEPRI, r0
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f7ff fa4a 	bl	80045e8 <vTaskSwitchContext>
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f380 8811 	msr	BASEPRI, r0
 800515c:	bc09      	pop	{r0, r3}
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	6808      	ldr	r0, [r1, #0]
 8005162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005166:	f01e 0f10 	tst.w	lr, #16
 800516a:	bf08      	it	eq
 800516c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005170:	f380 8809 	msr	PSP, r0
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst>:
 8005180:	200000b0 	.word	0x200000b0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
        __asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
    }
 80051a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80051a2:	f7ff f969 	bl	8004478 <xTaskIncrementTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <SysTick_Handler+0x40>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f383 8811 	msr	BASEPRI, r3
    }
 80051be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051d0:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <vPortSetupTimerInterrupt+0x28>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051d6:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <vPortSetupTimerInterrupt+0x2c>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <vPortSetupTimerInterrupt+0x30>)
 80051de:	4a08      	ldr	r2, [pc, #32]	; (8005200 <vPortSetupTimerInterrupt+0x34>)
 80051e0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051e2:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <vPortSetupTimerInterrupt+0x28>)
 80051e4:	2207      	movs	r2, #7
 80051e6:	601a      	str	r2, [r3, #0]
}
 80051e8:	bf00      	nop
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	e000e010 	.word	0xe000e010
 80051f8:	e000e018 	.word	0xe000e018
 80051fc:	e000e014 	.word	0xe000e014
 8005200:	000c34ff 	.word	0x000c34ff

08005204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005214 <vPortEnableVFP+0x10>
 8005208:	6801      	ldr	r1, [r0, #0]
 800520a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800520e:	6001      	str	r1, [r0, #0]
 8005210:	4770      	bx	lr
 8005212:	0000      	.short	0x0000
 8005214:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop

0800521c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005228:	f7ff f87c 	bl	8004324 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800522c:	4b65      	ldr	r3, [pc, #404]	; (80053c4 <pvPortMalloc+0x1a8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005234:	f000 f934 	bl	80054a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005238:	4b63      	ldr	r3, [pc, #396]	; (80053c8 <pvPortMalloc+0x1ac>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 80a7 	bne.w	8005394 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d02d      	beq.n	80052a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800524c:	2208      	movs	r2, #8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d227      	bcs.n	80052a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005258:	2208      	movs	r2, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d021      	beq.n	80052ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f023 0307 	bic.w	r3, r3, #7
 8005270:	3308      	adds	r3, #8
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	429a      	cmp	r2, r3
 8005276:	d214      	bcs.n	80052a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f023 0307 	bic.w	r3, r3, #7
 800527e:	3308      	adds	r3, #8
 8005280:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	2b00      	cmp	r3, #0
 800528a:	d010      	beq.n	80052ae <pvPortMalloc+0x92>
        __asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	617b      	str	r3, [r7, #20]
    }
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052a6:	e002      	b.n	80052ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	e000      	b.n	80052b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d06e      	beq.n	8005394 <pvPortMalloc+0x178>
 80052b6:	4b45      	ldr	r3, [pc, #276]	; (80053cc <pvPortMalloc+0x1b0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d869      	bhi.n	8005394 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80052c0:	4b43      	ldr	r3, [pc, #268]	; (80053d0 <pvPortMalloc+0x1b4>)
 80052c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80052c4:	4b42      	ldr	r3, [pc, #264]	; (80053d0 <pvPortMalloc+0x1b4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ca:	e004      	b.n	80052d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d903      	bls.n	80052e8 <pvPortMalloc+0xcc>
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f1      	bne.n	80052cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80052e8:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <pvPortMalloc+0x1a8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d050      	beq.n	8005394 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2208      	movs	r2, #8
 80052f8:	4413      	add	r3, r2
 80052fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad2      	subs	r2, r2, r3
 800530c:	2308      	movs	r3, #8
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	429a      	cmp	r2, r3
 8005312:	d91f      	bls.n	8005354 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <pvPortMalloc+0x120>
        __asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	613b      	str	r3, [r7, #16]
    }
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	1ad2      	subs	r2, r2, r3
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800534e:	69b8      	ldr	r0, [r7, #24]
 8005350:	f000 f908 	bl	8005564 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005354:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <pvPortMalloc+0x1b0>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	4a1b      	ldr	r2, [pc, #108]	; (80053cc <pvPortMalloc+0x1b0>)
 8005360:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005362:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <pvPortMalloc+0x1b0>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <pvPortMalloc+0x1b8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d203      	bcs.n	8005376 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800536e:	4b17      	ldr	r3, [pc, #92]	; (80053cc <pvPortMalloc+0x1b0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <pvPortMalloc+0x1b8>)
 8005374:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <pvPortMalloc+0x1ac>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	431a      	orrs	r2, r3
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <pvPortMalloc+0x1bc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	4a11      	ldr	r2, [pc, #68]	; (80053d8 <pvPortMalloc+0x1bc>)
 8005392:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005394:	f7fe ffd4 	bl	8004340 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <pvPortMalloc+0x19c>
        __asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60fb      	str	r3, [r7, #12]
    }
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80053b8:	69fb      	ldr	r3, [r7, #28]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3728      	adds	r7, #40	; 0x28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	2000212c 	.word	0x2000212c
 80053c8:	20002140 	.word	0x20002140
 80053cc:	20002130 	.word	0x20002130
 80053d0:	20002124 	.word	0x20002124
 80053d4:	20002134 	.word	0x20002134
 80053d8:	20002138 	.word	0x20002138

080053dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d04d      	beq.n	800548a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80053ee:	2308      	movs	r3, #8
 80053f0:	425b      	negs	r3, r3
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4b24      	ldr	r3, [pc, #144]	; (8005494 <vPortFree+0xb8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <vPortFree+0x44>
        __asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60fb      	str	r3, [r7, #12]
    }
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <vPortFree+0x62>
        __asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60bb      	str	r3, [r7, #8]
    }
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <vPortFree+0xb8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01e      	beq.n	800548a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d11a      	bne.n	800548a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <vPortFree+0xb8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	43db      	mvns	r3, r3
 800545e:	401a      	ands	r2, r3
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005464:	f7fe ff5e 	bl	8004324 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <vPortFree+0xbc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4413      	add	r3, r2
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <vPortFree+0xbc>)
 8005474:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005476:	6938      	ldr	r0, [r7, #16]
 8005478:	f000 f874 	bl	8005564 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800547c:	4b07      	ldr	r3, [pc, #28]	; (800549c <vPortFree+0xc0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	4a06      	ldr	r2, [pc, #24]	; (800549c <vPortFree+0xc0>)
 8005484:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005486:	f7fe ff5b 	bl	8004340 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20002140 	.word	0x20002140
 8005498:	20002130 	.word	0x20002130
 800549c:	2000213c 	.word	0x2000213c

080054a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054a6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80054aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80054ac:	4b27      	ldr	r3, [pc, #156]	; (800554c <prvHeapInit+0xac>)
 80054ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00c      	beq.n	80054d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3307      	adds	r3, #7
 80054be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	4a1f      	ldr	r2, [pc, #124]	; (800554c <prvHeapInit+0xac>)
 80054d0:	4413      	add	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054d8:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <prvHeapInit+0xb0>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <prvHeapInit+0xb0>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80054ec:	2208      	movs	r2, #8
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a15      	ldr	r2, [pc, #84]	; (8005554 <prvHeapInit+0xb4>)
 8005500:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005502:	4b14      	ldr	r3, [pc, #80]	; (8005554 <prvHeapInit+0xb4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <prvHeapInit+0xb4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	1ad2      	subs	r2, r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <prvHeapInit+0xb4>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <prvHeapInit+0xb8>)
 800552e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a09      	ldr	r2, [pc, #36]	; (800555c <prvHeapInit+0xbc>)
 8005536:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <prvHeapInit+0xc0>)
 800553a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800553e:	601a      	str	r2, [r3, #0]
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	200001e4 	.word	0x200001e4
 8005550:	20002124 	.word	0x20002124
 8005554:	2000212c 	.word	0x2000212c
 8005558:	20002134 	.word	0x20002134
 800555c:	20002130 	.word	0x20002130
 8005560:	20002140 	.word	0x20002140

08005564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800556c:	4b28      	ldr	r3, [pc, #160]	; (8005610 <prvInsertBlockIntoFreeList+0xac>)
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e002      	b.n	8005578 <prvInsertBlockIntoFreeList+0x14>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	429a      	cmp	r2, r3
 8005580:	d8f7      	bhi.n	8005572 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	4413      	add	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d108      	bne.n	80055a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	441a      	add	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	441a      	add	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d118      	bne.n	80055ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b15      	ldr	r3, [pc, #84]	; (8005614 <prvInsertBlockIntoFreeList+0xb0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d00d      	beq.n	80055e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	441a      	add	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e008      	b.n	80055f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <prvInsertBlockIntoFreeList+0xb0>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e003      	b.n	80055f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d002      	beq.n	8005602 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20002124 	.word	0x20002124
 8005614:	2000212c 	.word	0x2000212c

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	4d0d      	ldr	r5, [pc, #52]	; (8005650 <__libc_init_array+0x38>)
 800561c:	4c0d      	ldr	r4, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 800561e:	1b64      	subs	r4, r4, r5
 8005620:	10a4      	asrs	r4, r4, #2
 8005622:	2600      	movs	r6, #0
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	4d0b      	ldr	r5, [pc, #44]	; (8005658 <__libc_init_array+0x40>)
 800562a:	4c0c      	ldr	r4, [pc, #48]	; (800565c <__libc_init_array+0x44>)
 800562c:	f000 f82e 	bl	800568c <_init>
 8005630:	1b64      	subs	r4, r4, r5
 8005632:	10a4      	asrs	r4, r4, #2
 8005634:	2600      	movs	r6, #0
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005640:	4798      	blx	r3
 8005642:	3601      	adds	r6, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f855 3b04 	ldr.w	r3, [r5], #4
 800564a:	4798      	blx	r3
 800564c:	3601      	adds	r6, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	080056e0 	.word	0x080056e0
 8005654:	080056e0 	.word	0x080056e0
 8005658:	080056e0 	.word	0x080056e0
 800565c:	080056e4 	.word	0x080056e4

08005660 <memcpy>:
 8005660:	440a      	add	r2, r1
 8005662:	4291      	cmp	r1, r2
 8005664:	f100 33ff 	add.w	r3, r0, #4294967295
 8005668:	d100      	bne.n	800566c <memcpy+0xc>
 800566a:	4770      	bx	lr
 800566c:	b510      	push	{r4, lr}
 800566e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005676:	4291      	cmp	r1, r2
 8005678:	d1f9      	bne.n	800566e <memcpy+0xe>
 800567a:	bd10      	pop	{r4, pc}

0800567c <memset>:
 800567c:	4402      	add	r2, r0
 800567e:	4603      	mov	r3, r0
 8005680:	4293      	cmp	r3, r2
 8005682:	d100      	bne.n	8005686 <memset+0xa>
 8005684:	4770      	bx	lr
 8005686:	f803 1b01 	strb.w	r1, [r3], #1
 800568a:	e7f9      	b.n	8005680 <memset+0x4>

0800568c <_init>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr

08005698 <_fini>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr
